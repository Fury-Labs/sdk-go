// Code generated by goa v3.3.1, DO NOT EDIT.
//
// InjectiveExchangeRPC gRPC client
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-exchange/api/design -o ../

package client

import (
	"context"

	injective_exchange_rpcpb "github.com/InjectiveLabs/injective-exchange/api/gen/grpc/injective_exchange_rpc/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli injective_exchange_rpcpb.InjectiveExchangeRPCClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the InjectiveExchangeRPC service
// servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: injective_exchange_rpcpb.NewInjectiveExchangeRPCClient(cc),
		opts:    opts,
	}
}

// Ping calls the "Ping" function in
// injective_exchange_rpcpb.InjectiveExchangeRPCClient interface.
func (c *Client) Ping() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildPingFunc(c.grpccli, c.opts...),
			nil,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Version calls the "Version" function in
// injective_exchange_rpcpb.InjectiveExchangeRPCClient interface.
func (c *Client) Version() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildVersionFunc(c.grpccli, c.opts...),
			nil,
			DecodeVersionResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// GetTx calls the "GetTx" function in
// injective_exchange_rpcpb.InjectiveExchangeRPCClient interface.
func (c *Client) GetTx() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildGetTxFunc(c.grpccli, c.opts...),
			EncodeGetTxRequest,
			DecodeGetTxResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// PrepareTx calls the "PrepareTx" function in
// injective_exchange_rpcpb.InjectiveExchangeRPCClient interface.
func (c *Client) PrepareTx() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildPrepareTxFunc(c.grpccli, c.opts...),
			EncodePrepareTxRequest,
			DecodePrepareTxResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// BroadcastTx calls the "BroadcastTx" function in
// injective_exchange_rpcpb.InjectiveExchangeRPCClient interface.
func (c *Client) BroadcastTx() goa.Endpoint {
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		inv := goagrpc.NewInvoker(
			BuildBroadcastTxFunc(c.grpccli, c.opts...),
			EncodeBroadcastTxRequest,
			DecodeBroadcastTxResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}
