// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kaiju_exchange_rpc.proto

package kaiju_exchange_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaijuExchangeRPCClient is the client API for KaijuExchangeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaijuExchangeRPCClient interface {
	// GetTx gets transaction details by hash.
	GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
	// PrepareTx generates a Web3-signable body for a Cosmos transaction
	PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error)
	// BroadcastTx broadcasts a signed Web3 transaction
	BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error)
	// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
	PrepareCosmosTx(ctx context.Context, in *PrepareCosmosTxRequest, opts ...grpc.CallOption) (*PrepareCosmosTxResponse, error)
	// BroadcastCosmosTx broadcasts a signed Web3 transaction
	BroadcastCosmosTx(ctx context.Context, in *BroadcastCosmosTxRequest, opts ...grpc.CallOption) (*BroadcastCosmosTxResponse, error)
	// Return fee payer information's
	GetFeePayer(ctx context.Context, in *GetFeePayerRequest, opts ...grpc.CallOption) (*GetFeePayerResponse, error)
}

type kaijuExchangeRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewKaijuExchangeRPCClient(cc grpc.ClientConnInterface) KaijuExchangeRPCClient {
	return &kaijuExchangeRPCClient{cc}
}

func (c *kaijuExchangeRPCClient) GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuExchangeRPCClient) PrepareTx(ctx context.Context, in *PrepareTxRequest, opts ...grpc.CallOption) (*PrepareTxResponse, error) {
	out := new(PrepareTxResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/PrepareTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuExchangeRPCClient) BroadcastTx(ctx context.Context, in *BroadcastTxRequest, opts ...grpc.CallOption) (*BroadcastTxResponse, error) {
	out := new(BroadcastTxResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/BroadcastTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuExchangeRPCClient) PrepareCosmosTx(ctx context.Context, in *PrepareCosmosTxRequest, opts ...grpc.CallOption) (*PrepareCosmosTxResponse, error) {
	out := new(PrepareCosmosTxResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/PrepareCosmosTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuExchangeRPCClient) BroadcastCosmosTx(ctx context.Context, in *BroadcastCosmosTxRequest, opts ...grpc.CallOption) (*BroadcastCosmosTxResponse, error) {
	out := new(BroadcastCosmosTxResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/BroadcastCosmosTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuExchangeRPCClient) GetFeePayer(ctx context.Context, in *GetFeePayerRequest, opts ...grpc.CallOption) (*GetFeePayerResponse, error) {
	out := new(GetFeePayerResponse)
	err := c.cc.Invoke(ctx, "/kaiju_exchange_rpc.KaijuExchangeRPC/GetFeePayer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaijuExchangeRPCServer is the server API for KaijuExchangeRPC service.
// All implementations must embed UnimplementedKaijuExchangeRPCServer
// for forward compatibility
type KaijuExchangeRPCServer interface {
	// GetTx gets transaction details by hash.
	GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error)
	// PrepareTx generates a Web3-signable body for a Cosmos transaction
	PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error)
	// BroadcastTx broadcasts a signed Web3 transaction
	BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error)
	// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
	PrepareCosmosTx(context.Context, *PrepareCosmosTxRequest) (*PrepareCosmosTxResponse, error)
	// BroadcastCosmosTx broadcasts a signed Web3 transaction
	BroadcastCosmosTx(context.Context, *BroadcastCosmosTxRequest) (*BroadcastCosmosTxResponse, error)
	// Return fee payer information's
	GetFeePayer(context.Context, *GetFeePayerRequest) (*GetFeePayerResponse, error)
	mustEmbedUnimplementedKaijuExchangeRPCServer()
}

// UnimplementedKaijuExchangeRPCServer must be embedded to have forward compatible implementations.
type UnimplementedKaijuExchangeRPCServer struct {
}

func (UnimplementedKaijuExchangeRPCServer) GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) PrepareTx(context.Context, *PrepareTxRequest) (*PrepareTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareTx not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) BroadcastTx(context.Context, *BroadcastTxRequest) (*BroadcastTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTx not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) PrepareCosmosTx(context.Context, *PrepareCosmosTxRequest) (*PrepareCosmosTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareCosmosTx not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) BroadcastCosmosTx(context.Context, *BroadcastCosmosTxRequest) (*BroadcastCosmosTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastCosmosTx not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) GetFeePayer(context.Context, *GetFeePayerRequest) (*GetFeePayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeePayer not implemented")
}
func (UnimplementedKaijuExchangeRPCServer) mustEmbedUnimplementedKaijuExchangeRPCServer() {}

// UnsafeKaijuExchangeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaijuExchangeRPCServer will
// result in compilation errors.
type UnsafeKaijuExchangeRPCServer interface {
	mustEmbedUnimplementedKaijuExchangeRPCServer()
}

func RegisterKaijuExchangeRPCServer(s grpc.ServiceRegistrar, srv KaijuExchangeRPCServer) {
	s.RegisterService(&KaijuExchangeRPC_ServiceDesc, srv)
}

func _KaijuExchangeRPC_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).GetTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuExchangeRPC_PrepareTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).PrepareTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/PrepareTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).PrepareTx(ctx, req.(*PrepareTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuExchangeRPC_BroadcastTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).BroadcastTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/BroadcastTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).BroadcastTx(ctx, req.(*BroadcastTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuExchangeRPC_PrepareCosmosTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareCosmosTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).PrepareCosmosTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/PrepareCosmosTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).PrepareCosmosTx(ctx, req.(*PrepareCosmosTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuExchangeRPC_BroadcastCosmosTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastCosmosTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).BroadcastCosmosTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/BroadcastCosmosTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).BroadcastCosmosTx(ctx, req.(*BroadcastCosmosTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuExchangeRPC_GetFeePayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeePayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuExchangeRPCServer).GetFeePayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_exchange_rpc.KaijuExchangeRPC/GetFeePayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuExchangeRPCServer).GetFeePayer(ctx, req.(*GetFeePayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KaijuExchangeRPC_ServiceDesc is the grpc.ServiceDesc for KaijuExchangeRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KaijuExchangeRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju_exchange_rpc.KaijuExchangeRPC",
	HandlerType: (*KaijuExchangeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTx",
			Handler:    _KaijuExchangeRPC_GetTx_Handler,
		},
		{
			MethodName: "PrepareTx",
			Handler:    _KaijuExchangeRPC_PrepareTx_Handler,
		},
		{
			MethodName: "BroadcastTx",
			Handler:    _KaijuExchangeRPC_BroadcastTx_Handler,
		},
		{
			MethodName: "PrepareCosmosTx",
			Handler:    _KaijuExchangeRPC_PrepareCosmosTx_Handler,
		},
		{
			MethodName: "BroadcastCosmosTx",
			Handler:    _KaijuExchangeRPC_BroadcastCosmosTx_Handler,
		},
		{
			MethodName: "GetFeePayer",
			Handler:    _KaijuExchangeRPC_GetFeePayer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiju_exchange_rpc.proto",
}
