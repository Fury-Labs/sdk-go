// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kaiju_insurance_rpc.proto

package kaiju_insurance_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaijuInsuranceRPCClient is the client API for KaijuInsuranceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaijuInsuranceRPCClient interface {
	// Funds lists all insurance funds.
	Funds(ctx context.Context, in *FundsRequest, opts ...grpc.CallOption) (*FundsResponse, error)
	// PendingRedemptions lists all pending redemptions according to a filter
	Redemptions(ctx context.Context, in *RedemptionsRequest, opts ...grpc.CallOption) (*RedemptionsResponse, error)
}

type kaijuInsuranceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewKaijuInsuranceRPCClient(cc grpc.ClientConnInterface) KaijuInsuranceRPCClient {
	return &kaijuInsuranceRPCClient{cc}
}

func (c *kaijuInsuranceRPCClient) Funds(ctx context.Context, in *FundsRequest, opts ...grpc.CallOption) (*FundsResponse, error) {
	out := new(FundsResponse)
	err := c.cc.Invoke(ctx, "/kaiju_insurance_rpc.KaijuInsuranceRPC/Funds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuInsuranceRPCClient) Redemptions(ctx context.Context, in *RedemptionsRequest, opts ...grpc.CallOption) (*RedemptionsResponse, error) {
	out := new(RedemptionsResponse)
	err := c.cc.Invoke(ctx, "/kaiju_insurance_rpc.KaijuInsuranceRPC/Redemptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaijuInsuranceRPCServer is the server API for KaijuInsuranceRPC service.
// All implementations must embed UnimplementedKaijuInsuranceRPCServer
// for forward compatibility
type KaijuInsuranceRPCServer interface {
	// Funds lists all insurance funds.
	Funds(context.Context, *FundsRequest) (*FundsResponse, error)
	// PendingRedemptions lists all pending redemptions according to a filter
	Redemptions(context.Context, *RedemptionsRequest) (*RedemptionsResponse, error)
	mustEmbedUnimplementedKaijuInsuranceRPCServer()
}

// UnimplementedKaijuInsuranceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedKaijuInsuranceRPCServer struct {
}

func (UnimplementedKaijuInsuranceRPCServer) Funds(context.Context, *FundsRequest) (*FundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Funds not implemented")
}
func (UnimplementedKaijuInsuranceRPCServer) Redemptions(context.Context, *RedemptionsRequest) (*RedemptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redemptions not implemented")
}
func (UnimplementedKaijuInsuranceRPCServer) mustEmbedUnimplementedKaijuInsuranceRPCServer() {}

// UnsafeKaijuInsuranceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaijuInsuranceRPCServer will
// result in compilation errors.
type UnsafeKaijuInsuranceRPCServer interface {
	mustEmbedUnimplementedKaijuInsuranceRPCServer()
}

func RegisterKaijuInsuranceRPCServer(s grpc.ServiceRegistrar, srv KaijuInsuranceRPCServer) {
	s.RegisterService(&KaijuInsuranceRPC_ServiceDesc, srv)
}

func _KaijuInsuranceRPC_Funds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuInsuranceRPCServer).Funds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_insurance_rpc.KaijuInsuranceRPC/Funds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuInsuranceRPCServer).Funds(ctx, req.(*FundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuInsuranceRPC_Redemptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedemptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuInsuranceRPCServer).Redemptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_insurance_rpc.KaijuInsuranceRPC/Redemptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuInsuranceRPCServer).Redemptions(ctx, req.(*RedemptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KaijuInsuranceRPC_ServiceDesc is the grpc.ServiceDesc for KaijuInsuranceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KaijuInsuranceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju_insurance_rpc.KaijuInsuranceRPC",
	HandlerType: (*KaijuInsuranceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Funds",
			Handler:    _KaijuInsuranceRPC_Funds_Handler,
		},
		{
			MethodName: "Redemptions",
			Handler:    _KaijuInsuranceRPC_Redemptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiju_insurance_rpc.proto",
}
