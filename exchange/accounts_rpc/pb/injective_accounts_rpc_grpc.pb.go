// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kaiju_accounts_rpc.proto

package kaiju_accounts_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaijuAccountsRPCClient is the client API for KaijuAccountsRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaijuAccountsRPCClient interface {
	// Provide the account's portfolio value in USD.
	Portfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error)
	// List order states by order hashes
	OrderStates(ctx context.Context, in *OrderStatesRequest, opts ...grpc.CallOption) (*OrderStatesResponse, error)
	// List all subaccounts IDs of an account address
	SubaccountsList(ctx context.Context, in *SubaccountsListRequest, opts ...grpc.CallOption) (*SubaccountsListResponse, error)
	// List subaccount balances for the provided denoms.
	SubaccountBalancesList(ctx context.Context, in *SubaccountBalancesListRequest, opts ...grpc.CallOption) (*SubaccountBalancesListResponse, error)
	// Gets a balance for specific coin denom
	SubaccountBalanceEndpoint(ctx context.Context, in *SubaccountBalanceRequest, opts ...grpc.CallOption) (*SubaccountBalanceResponse, error)
	// StreamSubaccountBalance streams new balance changes for a specified
	// subaccount and denoms. If no denoms are provided, all denom changes are
	// streamed.
	StreamSubaccountBalance(ctx context.Context, in *StreamSubaccountBalanceRequest, opts ...grpc.CallOption) (KaijuAccountsRPC_StreamSubaccountBalanceClient, error)
	// Get subaccount's deposits and withdrawals history
	SubaccountHistory(ctx context.Context, in *SubaccountHistoryRequest, opts ...grpc.CallOption) (*SubaccountHistoryResponse, error)
	// Get subaccount's orders summary
	SubaccountOrderSummary(ctx context.Context, in *SubaccountOrderSummaryRequest, opts ...grpc.CallOption) (*SubaccountOrderSummaryResponse, error)
	// Provide historical trading rewards
	Rewards(ctx context.Context, in *RewardsRequest, opts ...grpc.CallOption) (*RewardsResponse, error)
}

type kaijuAccountsRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewKaijuAccountsRPCClient(cc grpc.ClientConnInterface) KaijuAccountsRPCClient {
	return &kaijuAccountsRPCClient{cc}
}

func (c *kaijuAccountsRPCClient) Portfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error) {
	out := new(PortfolioResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/Portfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) OrderStates(ctx context.Context, in *OrderStatesRequest, opts ...grpc.CallOption) (*OrderStatesResponse, error) {
	out := new(OrderStatesResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/OrderStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) SubaccountsList(ctx context.Context, in *SubaccountsListRequest, opts ...grpc.CallOption) (*SubaccountsListResponse, error) {
	out := new(SubaccountsListResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) SubaccountBalancesList(ctx context.Context, in *SubaccountBalancesListRequest, opts ...grpc.CallOption) (*SubaccountBalancesListResponse, error) {
	out := new(SubaccountBalancesListResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountBalancesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) SubaccountBalanceEndpoint(ctx context.Context, in *SubaccountBalanceRequest, opts ...grpc.CallOption) (*SubaccountBalanceResponse, error) {
	out := new(SubaccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountBalanceEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) StreamSubaccountBalance(ctx context.Context, in *StreamSubaccountBalanceRequest, opts ...grpc.CallOption) (KaijuAccountsRPC_StreamSubaccountBalanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &KaijuAccountsRPC_ServiceDesc.Streams[0], "/kaiju_accounts_rpc.KaijuAccountsRPC/StreamSubaccountBalance", opts...)
	if err != nil {
		return nil, err
	}
	x := &kaijuAccountsRPCStreamSubaccountBalanceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KaijuAccountsRPC_StreamSubaccountBalanceClient interface {
	Recv() (*StreamSubaccountBalanceResponse, error)
	grpc.ClientStream
}

type kaijuAccountsRPCStreamSubaccountBalanceClient struct {
	grpc.ClientStream
}

func (x *kaijuAccountsRPCStreamSubaccountBalanceClient) Recv() (*StreamSubaccountBalanceResponse, error) {
	m := new(StreamSubaccountBalanceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kaijuAccountsRPCClient) SubaccountHistory(ctx context.Context, in *SubaccountHistoryRequest, opts ...grpc.CallOption) (*SubaccountHistoryResponse, error) {
	out := new(SubaccountHistoryResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) SubaccountOrderSummary(ctx context.Context, in *SubaccountOrderSummaryRequest, opts ...grpc.CallOption) (*SubaccountOrderSummaryResponse, error) {
	out := new(SubaccountOrderSummaryResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountOrderSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAccountsRPCClient) Rewards(ctx context.Context, in *RewardsRequest, opts ...grpc.CallOption) (*RewardsResponse, error) {
	out := new(RewardsResponse)
	err := c.cc.Invoke(ctx, "/kaiju_accounts_rpc.KaijuAccountsRPC/Rewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KaijuAccountsRPCServer is the server API for KaijuAccountsRPC service.
// All implementations must embed UnimplementedKaijuAccountsRPCServer
// for forward compatibility
type KaijuAccountsRPCServer interface {
	// Provide the account's portfolio value in USD.
	Portfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error)
	// List order states by order hashes
	OrderStates(context.Context, *OrderStatesRequest) (*OrderStatesResponse, error)
	// List all subaccounts IDs of an account address
	SubaccountsList(context.Context, *SubaccountsListRequest) (*SubaccountsListResponse, error)
	// List subaccount balances for the provided denoms.
	SubaccountBalancesList(context.Context, *SubaccountBalancesListRequest) (*SubaccountBalancesListResponse, error)
	// Gets a balance for specific coin denom
	SubaccountBalanceEndpoint(context.Context, *SubaccountBalanceRequest) (*SubaccountBalanceResponse, error)
	// StreamSubaccountBalance streams new balance changes for a specified
	// subaccount and denoms. If no denoms are provided, all denom changes are
	// streamed.
	StreamSubaccountBalance(*StreamSubaccountBalanceRequest, KaijuAccountsRPC_StreamSubaccountBalanceServer) error
	// Get subaccount's deposits and withdrawals history
	SubaccountHistory(context.Context, *SubaccountHistoryRequest) (*SubaccountHistoryResponse, error)
	// Get subaccount's orders summary
	SubaccountOrderSummary(context.Context, *SubaccountOrderSummaryRequest) (*SubaccountOrderSummaryResponse, error)
	// Provide historical trading rewards
	Rewards(context.Context, *RewardsRequest) (*RewardsResponse, error)
	mustEmbedUnimplementedKaijuAccountsRPCServer()
}

// UnimplementedKaijuAccountsRPCServer must be embedded to have forward compatible implementations.
type UnimplementedKaijuAccountsRPCServer struct {
}

func (UnimplementedKaijuAccountsRPCServer) Portfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfolio not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) OrderStates(context.Context, *OrderStatesRequest) (*OrderStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderStates not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) SubaccountsList(context.Context, *SubaccountsListRequest) (*SubaccountsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountsList not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) SubaccountBalancesList(context.Context, *SubaccountBalancesListRequest) (*SubaccountBalancesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountBalancesList not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) SubaccountBalanceEndpoint(context.Context, *SubaccountBalanceRequest) (*SubaccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountBalanceEndpoint not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) StreamSubaccountBalance(*StreamSubaccountBalanceRequest, KaijuAccountsRPC_StreamSubaccountBalanceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSubaccountBalance not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) SubaccountHistory(context.Context, *SubaccountHistoryRequest) (*SubaccountHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountHistory not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) SubaccountOrderSummary(context.Context, *SubaccountOrderSummaryRequest) (*SubaccountOrderSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrderSummary not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) Rewards(context.Context, *RewardsRequest) (*RewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewards not implemented")
}
func (UnimplementedKaijuAccountsRPCServer) mustEmbedUnimplementedKaijuAccountsRPCServer() {}

// UnsafeKaijuAccountsRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaijuAccountsRPCServer will
// result in compilation errors.
type UnsafeKaijuAccountsRPCServer interface {
	mustEmbedUnimplementedKaijuAccountsRPCServer()
}

func RegisterKaijuAccountsRPCServer(s grpc.ServiceRegistrar, srv KaijuAccountsRPCServer) {
	s.RegisterService(&KaijuAccountsRPC_ServiceDesc, srv)
}

func _KaijuAccountsRPC_Portfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).Portfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/Portfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).Portfolio(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_OrderStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).OrderStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/OrderStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).OrderStates(ctx, req.(*OrderStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_SubaccountsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).SubaccountsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).SubaccountsList(ctx, req.(*SubaccountsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_SubaccountBalancesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountBalancesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).SubaccountBalancesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountBalancesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).SubaccountBalancesList(ctx, req.(*SubaccountBalancesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_SubaccountBalanceEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).SubaccountBalanceEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountBalanceEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).SubaccountBalanceEndpoint(ctx, req.(*SubaccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_StreamSubaccountBalance_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSubaccountBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KaijuAccountsRPCServer).StreamSubaccountBalance(m, &kaijuAccountsRPCStreamSubaccountBalanceServer{stream})
}

type KaijuAccountsRPC_StreamSubaccountBalanceServer interface {
	Send(*StreamSubaccountBalanceResponse) error
	grpc.ServerStream
}

type kaijuAccountsRPCStreamSubaccountBalanceServer struct {
	grpc.ServerStream
}

func (x *kaijuAccountsRPCStreamSubaccountBalanceServer) Send(m *StreamSubaccountBalanceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _KaijuAccountsRPC_SubaccountHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).SubaccountHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).SubaccountHistory(ctx, req.(*SubaccountHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_SubaccountOrderSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubaccountOrderSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).SubaccountOrderSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/SubaccountOrderSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).SubaccountOrderSummary(ctx, req.(*SubaccountOrderSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAccountsRPC_Rewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAccountsRPCServer).Rewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_accounts_rpc.KaijuAccountsRPC/Rewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAccountsRPCServer).Rewards(ctx, req.(*RewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KaijuAccountsRPC_ServiceDesc is the grpc.ServiceDesc for KaijuAccountsRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KaijuAccountsRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju_accounts_rpc.KaijuAccountsRPC",
	HandlerType: (*KaijuAccountsRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Portfolio",
			Handler:    _KaijuAccountsRPC_Portfolio_Handler,
		},
		{
			MethodName: "OrderStates",
			Handler:    _KaijuAccountsRPC_OrderStates_Handler,
		},
		{
			MethodName: "SubaccountsList",
			Handler:    _KaijuAccountsRPC_SubaccountsList_Handler,
		},
		{
			MethodName: "SubaccountBalancesList",
			Handler:    _KaijuAccountsRPC_SubaccountBalancesList_Handler,
		},
		{
			MethodName: "SubaccountBalanceEndpoint",
			Handler:    _KaijuAccountsRPC_SubaccountBalanceEndpoint_Handler,
		},
		{
			MethodName: "SubaccountHistory",
			Handler:    _KaijuAccountsRPC_SubaccountHistory_Handler,
		},
		{
			MethodName: "SubaccountOrderSummary",
			Handler:    _KaijuAccountsRPC_SubaccountOrderSummary_Handler,
		},
		{
			MethodName: "Rewards",
			Handler:    _KaijuAccountsRPC_Rewards_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSubaccountBalance",
			Handler:       _KaijuAccountsRPC_StreamSubaccountBalance_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaiju_accounts_rpc.proto",
}
