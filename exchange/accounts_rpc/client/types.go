// Code generated by goa v3.3.1, DO NOT EDIT.
//
// InjectiveAccountsRPC gRPC client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-exchange/api/design -o ../

package client

import (
	"unicode/utf8"

	injective_accounts_rpcpb "github.com/InjectiveLabs/injective-exchange/api/gen/grpc/injective_accounts_rpc/pb"
	injectiveaccountsrpc "github.com/InjectiveLabs/injective-exchange/api/gen/injective_accounts_rpc"
	goa "goa.design/goa/v3/pkg"
)

// NewSubaccountsListRequest builds the gRPC request type from the payload of
// the "subaccountsList" endpoint of the "InjectiveAccountsRPC" service.
func NewSubaccountsListRequest(payload *injectiveaccountsrpc.SubaccountsListPayload) *injective_accounts_rpcpb.SubaccountsListRequest {
	message := &injective_accounts_rpcpb.SubaccountsListRequest{
		AccountAddress: payload.AccountAddress,
	}
	return message
}

// NewSubaccountsListResult builds the result type of the "subaccountsList"
// endpoint of the "InjectiveAccountsRPC" service from the gRPC response type.
func NewSubaccountsListResult(message *injective_accounts_rpcpb.SubaccountsListResponse) *injectiveaccountsrpc.SubaccountsListResult {
	result := &injectiveaccountsrpc.SubaccountsListResult{}
	if message.Subaccounts != nil {
		result.Subaccounts = make([]string, len(message.Subaccounts))
		for i, val := range message.Subaccounts {
			result.Subaccounts[i] = val
		}
	}
	return result
}

// NewSubaccountBalancesListRequest builds the gRPC request type from the
// payload of the "subaccountBalancesList" endpoint of the
// "InjectiveAccountsRPC" service.
func NewSubaccountBalancesListRequest(payload *injectiveaccountsrpc.SubaccountBalanceFilter) *injective_accounts_rpcpb.SubaccountBalancesListRequest {
	message := &injective_accounts_rpcpb.SubaccountBalancesListRequest{
		SubaccountId: payload.SubaccountID,
	}
	if payload.Denoms != nil {
		message.Denoms = make([]string, len(payload.Denoms))
		for i, val := range payload.Denoms {
			message.Denoms[i] = val
		}
	}
	return message
}

// NewSubaccountBalancesListResult builds the result type of the
// "subaccountBalancesList" endpoint of the "InjectiveAccountsRPC" service from
// the gRPC response type.
func NewSubaccountBalancesListResult(message *injective_accounts_rpcpb.SubaccountBalancesListResponse) *injectiveaccountsrpc.SubaccountBalancesListResult {
	result := &injectiveaccountsrpc.SubaccountBalancesListResult{}
	if message.Balances != nil {
		result.Balances = make([]*injectiveaccountsrpc.SubaccountBalance, len(message.Balances))
		for i, val := range message.Balances {
			result.Balances[i] = &injectiveaccountsrpc.SubaccountBalance{
				SubaccountID:   val.SubaccountId,
				AccountAddress: val.AccountAddress,
				Denom:          val.Denom,
			}
			if val.Deposit != nil {
				result.Balances[i].Deposit = protobufInjectiveAccountsRpcpbSubaccountDepositToInjectiveaccountsrpcSubaccountDeposit(val.Deposit)
			}
		}
	}
	return result
}

// NewSubaccountBalanceRequest builds the gRPC request type from the payload of
// the "subaccountBalance" endpoint of the "InjectiveAccountsRPC" service.
func NewSubaccountBalanceRequest(payload *injectiveaccountsrpc.SubaccountBalancePayload) *injective_accounts_rpcpb.SubaccountBalanceRequest {
	message := &injective_accounts_rpcpb.SubaccountBalanceRequest{
		SubaccountId: payload.SubaccountID,
		Denom:        payload.Denom,
	}
	return message
}

// NewSubaccountBalanceResult builds the result type of the "subaccountBalance"
// endpoint of the "InjectiveAccountsRPC" service from the gRPC response type.
func NewSubaccountBalanceResult(message *injective_accounts_rpcpb.SubaccountBalanceResponse) *injectiveaccountsrpc.SubaccountBalanceResult {
	result := &injectiveaccountsrpc.SubaccountBalanceResult{}
	if message.Balance != nil {
		result.Balance = protobufInjectiveAccountsRpcpbSubaccountBalanceToInjectiveaccountsrpcSubaccountBalance(message.Balance)
	}
	return result
}

// NewStreamSubaccountBalanceRequest builds the gRPC request type from the
// payload of the "streamSubaccountBalance" endpoint of the
// "InjectiveAccountsRPC" service.
func NewStreamSubaccountBalanceRequest(payload *injectiveaccountsrpc.SubaccountBalanceFilter) *injective_accounts_rpcpb.StreamSubaccountBalanceRequest {
	message := &injective_accounts_rpcpb.StreamSubaccountBalanceRequest{
		SubaccountId: payload.SubaccountID,
	}
	if payload.Denoms != nil {
		message.Denoms = make([]string, len(payload.Denoms))
		for i, val := range payload.Denoms {
			message.Denoms[i] = val
		}
	}
	return message
}

func NewStreamSubaccountBalanceResult(v *injective_accounts_rpcpb.StreamSubaccountBalanceResponse) *injectiveaccountsrpc.StreamSubaccountBalanceResult {
	result := &injectiveaccountsrpc.StreamSubaccountBalanceResult{
		Timestamp: v.Timestamp,
	}
	if v.Balance != nil {
		result.Balance = protobufInjectiveAccountsRpcpbSubaccountBalanceToInjectiveaccountsrpcSubaccountBalance(v.Balance)
	}
	return result
}

// NewSubaccountHistoryRequest builds the gRPC request type from the payload of
// the "subaccountHistory" endpoint of the "InjectiveAccountsRPC" service.
func NewSubaccountHistoryRequest(payload *injectiveaccountsrpc.SubaccountHistoryPayload) *injective_accounts_rpcpb.SubaccountHistoryRequest {
	message := &injective_accounts_rpcpb.SubaccountHistoryRequest{
		SubaccountId: payload.SubaccountID,
	}
	if payload.Denom != nil {
		message.Denom = *payload.Denom
	}
	if payload.TransferTypes != nil {
		message.TransferTypes = make([]string, len(payload.TransferTypes))
		for i, val := range payload.TransferTypes {
			message.TransferTypes[i] = val
		}
	}
	return message
}

// NewSubaccountHistoryResult builds the result type of the "subaccountHistory"
// endpoint of the "InjectiveAccountsRPC" service from the gRPC response type.
func NewSubaccountHistoryResult(message *injective_accounts_rpcpb.SubaccountHistoryResponse) *injectiveaccountsrpc.SubaccountHistoryResult {
	result := &injectiveaccountsrpc.SubaccountHistoryResult{}
	if message.Transfers != nil {
		result.Transfers = make([]*injectiveaccountsrpc.SubaccountBalanceTransfer, len(message.Transfers))
		for i, val := range message.Transfers {
			result.Transfers[i] = &injectiveaccountsrpc.SubaccountBalanceTransfer{
				TransferType: val.TransferType,
				ExecutedAt:   val.ExecutedAt,
			}
			if val.SrcSubaccountId != "" {
				result.Transfers[i].SrcSubaccountID = &val.SrcSubaccountId
			}
			if val.SrcAccountAddress != "" {
				result.Transfers[i].SrcAccountAddress = &val.SrcAccountAddress
			}
			if val.DstSubaccountId != "" {
				result.Transfers[i].DstSubaccountID = &val.DstSubaccountId
			}
			if val.DstAccountAddress != "" {
				result.Transfers[i].DstAccountAddress = &val.DstAccountAddress
			}
			if val.Amount != nil {
				result.Transfers[i].Amount = protobufInjectiveAccountsRpcpbCosmosCoinToInjectiveaccountsrpcCosmosCoin(val.Amount)
			}
		}
	}
	return result
}

// ValidateSubaccountsListResponse runs the validations defined on
// SubaccountsListResponse.
func ValidateSubaccountsListResponse(message *injective_accounts_rpcpb.SubaccountsListResponse) (err error) {
	for _, e := range message.Subaccounts {
		err = goa.MergeErrors(err, goa.ValidatePattern("message.subaccounts[*]", e, "^0x[0-9a-fA-F]{64}$"))
		if utf8.RuneCountInString(e) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.subaccounts[*]", e, utf8.RuneCountInString(e), 66, true))
		}
		if utf8.RuneCountInString(e) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.subaccounts[*]", e, utf8.RuneCountInString(e), 66, false))
		}
	}
	return
}

// ValidateSubaccountBalancesListResponse runs the validations defined on
// SubaccountBalancesListResponse.
func ValidateSubaccountBalancesListResponse(message *injective_accounts_rpcpb.SubaccountBalancesListResponse) (err error) {
	for _, e := range message.Balances {
		if e != nil {
			if err2 := ValidateSubaccountBalance(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubaccountBalance runs the validations defined on SubaccountBalance.
func ValidateSubaccountBalance(message *injective_accounts_rpcpb.SubaccountBalance) (err error) {
	if message.Deposit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deposit", "message"))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.subaccountId", message.SubaccountId, "^0x[0-9a-fA-F]{64}$"))
	if utf8.RuneCountInString(message.SubaccountId) < 66 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.subaccountId", message.SubaccountId, utf8.RuneCountInString(message.SubaccountId), 66, true))
	}
	if utf8.RuneCountInString(message.SubaccountId) > 66 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.subaccountId", message.SubaccountId, utf8.RuneCountInString(message.SubaccountId), 66, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.accountAddress", message.AccountAddress, "^inj1[0-9a-zA-Z]{38}$"))
	if utf8.RuneCountInString(message.AccountAddress) < 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.accountAddress", message.AccountAddress, utf8.RuneCountInString(message.AccountAddress), 42, true))
	}
	if utf8.RuneCountInString(message.AccountAddress) > 42 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.accountAddress", message.AccountAddress, utf8.RuneCountInString(message.AccountAddress), 42, false))
	}
	if message.Deposit != nil {
		if err2 := ValidateSubaccountDeposit(message.Deposit); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSubaccountDeposit runs the validations defined on SubaccountDeposit.
func ValidateSubaccountDeposit(message *injective_accounts_rpcpb.SubaccountDeposit) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.totalBalance", message.TotalBalance, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(message.TotalBalance) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.totalBalance", message.TotalBalance, utf8.RuneCountInString(message.TotalBalance), 100, false))
	}
	err = goa.MergeErrors(err, goa.ValidatePattern("message.availableBalance", message.AvailableBalance, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(message.AvailableBalance) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.availableBalance", message.AvailableBalance, utf8.RuneCountInString(message.AvailableBalance), 100, false))
	}
	return
}

// ValidateSubaccountBalanceResponse runs the validations defined on
// SubaccountBalanceResponse.
func ValidateSubaccountBalanceResponse(message *injective_accounts_rpcpb.SubaccountBalanceResponse) (err error) {
	if message.Balance != nil {
		if err2 := ValidateSubaccountBalance(message.Balance); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateStreamSubaccountBalanceResponse runs the validations defined on
// StreamSubaccountBalanceResponse.
func ValidateStreamSubaccountBalanceResponse(message *injective_accounts_rpcpb.StreamSubaccountBalanceResponse) (err error) {
	if message.Balance == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("balance", "message"))
	}
	if message.Balance != nil {
		if err2 := ValidateSubaccountBalance(message.Balance); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSubaccountHistoryResponse runs the validations defined on
// SubaccountHistoryResponse.
func ValidateSubaccountHistoryResponse(message *injective_accounts_rpcpb.SubaccountHistoryResponse) (err error) {
	for _, e := range message.Transfers {
		if e != nil {
			if err2 := ValidateSubaccountBalanceTransfer(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateSubaccountBalanceTransfer runs the validations defined on
// SubaccountBalanceTransfer.
func ValidateSubaccountBalanceTransfer(message *injective_accounts_rpcpb.SubaccountBalanceTransfer) (err error) {
	if message.Amount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("amount", "message"))
	}
	if !(message.TransferType == "internal" || message.TransferType == "external" || message.TransferType == "withdraw" || message.TransferType == "deposit") {
		err = goa.MergeErrors(err, goa.InvalidEnumValueError("message.transferType", message.TransferType, []interface{}{"internal", "external", "withdraw", "deposit"}))
	}
	if message.SrcSubaccountId != "" {
		err = goa.MergeErrors(err, goa.ValidatePattern("message.srcSubaccountID", message.SrcSubaccountId, "^0x[0-9a-fA-F]{64}$"))
	}
	if message.SrcSubaccountId != "" {
		if utf8.RuneCountInString(message.SrcSubaccountId) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.srcSubaccountID", message.SrcSubaccountId, utf8.RuneCountInString(message.SrcSubaccountId), 66, true))
		}
	}
	if message.SrcSubaccountId != "" {
		if utf8.RuneCountInString(message.SrcSubaccountId) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.srcSubaccountID", message.SrcSubaccountId, utf8.RuneCountInString(message.SrcSubaccountId), 66, false))
		}
	}
	if message.SrcAccountAddress != "" {
		err = goa.MergeErrors(err, goa.ValidatePattern("message.srcAccountAddress", message.SrcAccountAddress, "^inj1[0-9a-zA-Z]{38}$"))
	}
	if message.SrcAccountAddress != "" {
		if utf8.RuneCountInString(message.SrcAccountAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.srcAccountAddress", message.SrcAccountAddress, utf8.RuneCountInString(message.SrcAccountAddress), 42, true))
		}
	}
	if message.SrcAccountAddress != "" {
		if utf8.RuneCountInString(message.SrcAccountAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.srcAccountAddress", message.SrcAccountAddress, utf8.RuneCountInString(message.SrcAccountAddress), 42, false))
		}
	}
	if message.DstSubaccountId != "" {
		err = goa.MergeErrors(err, goa.ValidatePattern("message.dstSubaccountID", message.DstSubaccountId, "^0x[0-9a-fA-F]{64}$"))
	}
	if message.DstSubaccountId != "" {
		if utf8.RuneCountInString(message.DstSubaccountId) < 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.dstSubaccountID", message.DstSubaccountId, utf8.RuneCountInString(message.DstSubaccountId), 66, true))
		}
	}
	if message.DstSubaccountId != "" {
		if utf8.RuneCountInString(message.DstSubaccountId) > 66 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.dstSubaccountID", message.DstSubaccountId, utf8.RuneCountInString(message.DstSubaccountId), 66, false))
		}
	}
	if message.DstAccountAddress != "" {
		err = goa.MergeErrors(err, goa.ValidatePattern("message.dstAccountAddress", message.DstAccountAddress, "^inj1[0-9a-zA-Z]{38}$"))
	}
	if message.DstAccountAddress != "" {
		if utf8.RuneCountInString(message.DstAccountAddress) < 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.dstAccountAddress", message.DstAccountAddress, utf8.RuneCountInString(message.DstAccountAddress), 42, true))
		}
	}
	if message.DstAccountAddress != "" {
		if utf8.RuneCountInString(message.DstAccountAddress) > 42 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("message.dstAccountAddress", message.DstAccountAddress, utf8.RuneCountInString(message.DstAccountAddress), 42, false))
		}
	}
	if message.Amount != nil {
		if err2 := ValidateCosmosCoin(message.Amount); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCosmosCoin runs the validations defined on CosmosCoin.
func ValidateCosmosCoin(message *injective_accounts_rpcpb.CosmosCoin) (err error) {
	err = goa.MergeErrors(err, goa.ValidatePattern("message.amount", message.Amount, "^\\d+(\\.\\d+)?$"))
	if utf8.RuneCountInString(message.Amount) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("message.amount", message.Amount, utf8.RuneCountInString(message.Amount), 100, false))
	}
	return
}

// svcInjectiveaccountsrpcSubaccountDepositToInjectiveAccountsRpcpbSubaccountDeposit
// builds a value of type *injective_accounts_rpcpb.SubaccountDeposit from a
// value of type *injectiveaccountsrpc.SubaccountDeposit.
func svcInjectiveaccountsrpcSubaccountDepositToInjectiveAccountsRpcpbSubaccountDeposit(v *injectiveaccountsrpc.SubaccountDeposit) *injective_accounts_rpcpb.SubaccountDeposit {
	res := &injective_accounts_rpcpb.SubaccountDeposit{
		TotalBalance:     v.TotalBalance,
		AvailableBalance: v.AvailableBalance,
	}

	return res
}

// protobufInjectiveAccountsRpcpbSubaccountDepositToInjectiveaccountsrpcSubaccountDeposit
// builds a value of type *injectiveaccountsrpc.SubaccountDeposit from a value
// of type *injective_accounts_rpcpb.SubaccountDeposit.
func protobufInjectiveAccountsRpcpbSubaccountDepositToInjectiveaccountsrpcSubaccountDeposit(v *injective_accounts_rpcpb.SubaccountDeposit) *injectiveaccountsrpc.SubaccountDeposit {
	res := &injectiveaccountsrpc.SubaccountDeposit{
		TotalBalance:     v.TotalBalance,
		AvailableBalance: v.AvailableBalance,
	}

	return res
}

// svcInjectiveaccountsrpcSubaccountBalanceToInjectiveAccountsRpcpbSubaccountBalance
// builds a value of type *injective_accounts_rpcpb.SubaccountBalance from a
// value of type *injectiveaccountsrpc.SubaccountBalance.
func svcInjectiveaccountsrpcSubaccountBalanceToInjectiveAccountsRpcpbSubaccountBalance(v *injectiveaccountsrpc.SubaccountBalance) *injective_accounts_rpcpb.SubaccountBalance {
	if v == nil {
		return nil
	}
	res := &injective_accounts_rpcpb.SubaccountBalance{
		SubaccountId:   v.SubaccountID,
		AccountAddress: v.AccountAddress,
		Denom:          v.Denom,
	}
	if v.Deposit != nil {
		res.Deposit = svcInjectiveaccountsrpcSubaccountDepositToInjectiveAccountsRpcpbSubaccountDeposit(v.Deposit)
	}

	return res
}

// protobufInjectiveAccountsRpcpbSubaccountBalanceToInjectiveaccountsrpcSubaccountBalance
// builds a value of type *injectiveaccountsrpc.SubaccountBalance from a value
// of type *injective_accounts_rpcpb.SubaccountBalance.
func protobufInjectiveAccountsRpcpbSubaccountBalanceToInjectiveaccountsrpcSubaccountBalance(v *injective_accounts_rpcpb.SubaccountBalance) *injectiveaccountsrpc.SubaccountBalance {
	if v == nil {
		return nil
	}
	res := &injectiveaccountsrpc.SubaccountBalance{
		SubaccountID:   v.SubaccountId,
		AccountAddress: v.AccountAddress,
		Denom:          v.Denom,
	}
	if v.Deposit != nil {
		res.Deposit = protobufInjectiveAccountsRpcpbSubaccountDepositToInjectiveaccountsrpcSubaccountDeposit(v.Deposit)
	}

	return res
}

// svcInjectiveaccountsrpcCosmosCoinToInjectiveAccountsRpcpbCosmosCoin builds a
// value of type *injective_accounts_rpcpb.CosmosCoin from a value of type
// *injectiveaccountsrpc.CosmosCoin.
func svcInjectiveaccountsrpcCosmosCoinToInjectiveAccountsRpcpbCosmosCoin(v *injectiveaccountsrpc.CosmosCoin) *injective_accounts_rpcpb.CosmosCoin {
	res := &injective_accounts_rpcpb.CosmosCoin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}

// protobufInjectiveAccountsRpcpbCosmosCoinToInjectiveaccountsrpcCosmosCoin
// builds a value of type *injectiveaccountsrpc.CosmosCoin from a value of type
// *injective_accounts_rpcpb.CosmosCoin.
func protobufInjectiveAccountsRpcpbCosmosCoinToInjectiveaccountsrpcCosmosCoin(v *injective_accounts_rpcpb.CosmosCoin) *injectiveaccountsrpc.CosmosCoin {
	res := &injectiveaccountsrpc.CosmosCoin{
		Denom:  v.Denom,
		Amount: v.Amount,
	}

	return res
}
