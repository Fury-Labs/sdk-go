// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kaiju_oracle_rpc.proto

package kaiju_oracle_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaijuOracleRPCClient is the client API for KaijuOracleRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaijuOracleRPCClient interface {
	// List all oracles
	OracleList(ctx context.Context, in *OracleListRequest, opts ...grpc.CallOption) (*OracleListResponse, error)
	// Gets the price of the oracle
	Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
	// StreamPrices streams new price changes for a specified oracle. If no oracles
	// are provided, all price changes are streamed.
	StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (KaijuOracleRPC_StreamPricesClient, error)
}

type kaijuOracleRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewKaijuOracleRPCClient(cc grpc.ClientConnInterface) KaijuOracleRPCClient {
	return &kaijuOracleRPCClient{cc}
}

func (c *kaijuOracleRPCClient) OracleList(ctx context.Context, in *OracleListRequest, opts ...grpc.CallOption) (*OracleListResponse, error) {
	out := new(OracleListResponse)
	err := c.cc.Invoke(ctx, "/kaiju_oracle_rpc.KaijuOracleRPC/OracleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuOracleRPCClient) Price(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, "/kaiju_oracle_rpc.KaijuOracleRPC/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuOracleRPCClient) StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (KaijuOracleRPC_StreamPricesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KaijuOracleRPC_ServiceDesc.Streams[0], "/kaiju_oracle_rpc.KaijuOracleRPC/StreamPrices", opts...)
	if err != nil {
		return nil, err
	}
	x := &kaijuOracleRPCStreamPricesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KaijuOracleRPC_StreamPricesClient interface {
	Recv() (*StreamPricesResponse, error)
	grpc.ClientStream
}

type kaijuOracleRPCStreamPricesClient struct {
	grpc.ClientStream
}

func (x *kaijuOracleRPCStreamPricesClient) Recv() (*StreamPricesResponse, error) {
	m := new(StreamPricesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KaijuOracleRPCServer is the server API for KaijuOracleRPC service.
// All implementations must embed UnimplementedKaijuOracleRPCServer
// for forward compatibility
type KaijuOracleRPCServer interface {
	// List all oracles
	OracleList(context.Context, *OracleListRequest) (*OracleListResponse, error)
	// Gets the price of the oracle
	Price(context.Context, *PriceRequest) (*PriceResponse, error)
	// StreamPrices streams new price changes for a specified oracle. If no oracles
	// are provided, all price changes are streamed.
	StreamPrices(*StreamPricesRequest, KaijuOracleRPC_StreamPricesServer) error
	mustEmbedUnimplementedKaijuOracleRPCServer()
}

// UnimplementedKaijuOracleRPCServer must be embedded to have forward compatible implementations.
type UnimplementedKaijuOracleRPCServer struct {
}

func (UnimplementedKaijuOracleRPCServer) OracleList(context.Context, *OracleListRequest) (*OracleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleList not implemented")
}
func (UnimplementedKaijuOracleRPCServer) Price(context.Context, *PriceRequest) (*PriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (UnimplementedKaijuOracleRPCServer) StreamPrices(*StreamPricesRequest, KaijuOracleRPC_StreamPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrices not implemented")
}
func (UnimplementedKaijuOracleRPCServer) mustEmbedUnimplementedKaijuOracleRPCServer() {}

// UnsafeKaijuOracleRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaijuOracleRPCServer will
// result in compilation errors.
type UnsafeKaijuOracleRPCServer interface {
	mustEmbedUnimplementedKaijuOracleRPCServer()
}

func RegisterKaijuOracleRPCServer(s grpc.ServiceRegistrar, srv KaijuOracleRPCServer) {
	s.RegisterService(&KaijuOracleRPC_ServiceDesc, srv)
}

func _KaijuOracleRPC_OracleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OracleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuOracleRPCServer).OracleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_oracle_rpc.KaijuOracleRPC/OracleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuOracleRPCServer).OracleList(ctx, req.(*OracleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuOracleRPC_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuOracleRPCServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_oracle_rpc.KaijuOracleRPC/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuOracleRPCServer).Price(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuOracleRPC_StreamPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KaijuOracleRPCServer).StreamPrices(m, &kaijuOracleRPCStreamPricesServer{stream})
}

type KaijuOracleRPC_StreamPricesServer interface {
	Send(*StreamPricesResponse) error
	grpc.ServerStream
}

type kaijuOracleRPCStreamPricesServer struct {
	grpc.ServerStream
}

func (x *kaijuOracleRPCStreamPricesServer) Send(m *StreamPricesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KaijuOracleRPC_ServiceDesc is the grpc.ServiceDesc for KaijuOracleRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KaijuOracleRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju_oracle_rpc.KaijuOracleRPC",
	HandlerType: (*KaijuOracleRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OracleList",
			Handler:    _KaijuOracleRPC_OracleList_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _KaijuOracleRPC_Price_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPrices",
			Handler:       _KaijuOracleRPC_StreamPrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaiju_oracle_rpc.proto",
}
