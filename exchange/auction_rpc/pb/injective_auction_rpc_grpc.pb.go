// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: kaiju_auction_rpc.proto

package kaiju_auction_rpcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KaijuAuctionRPCClient is the client API for KaijuAuctionRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KaijuAuctionRPCClient interface {
	// Provide historical auction info for a given auction
	AuctionEndpoint(ctx context.Context, in *AuctionRequest, opts ...grpc.CallOption) (*AuctionResponse, error)
	// Provide the historical auctions info
	Auctions(ctx context.Context, in *AuctionsRequest, opts ...grpc.CallOption) (*AuctionsResponse, error)
	// StreamBids streams new bids of an auction.
	StreamBids(ctx context.Context, in *StreamBidsRequest, opts ...grpc.CallOption) (KaijuAuctionRPC_StreamBidsClient, error)
}

type kaijuAuctionRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewKaijuAuctionRPCClient(cc grpc.ClientConnInterface) KaijuAuctionRPCClient {
	return &kaijuAuctionRPCClient{cc}
}

func (c *kaijuAuctionRPCClient) AuctionEndpoint(ctx context.Context, in *AuctionRequest, opts ...grpc.CallOption) (*AuctionResponse, error) {
	out := new(AuctionResponse)
	err := c.cc.Invoke(ctx, "/kaiju_auction_rpc.KaijuAuctionRPC/AuctionEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAuctionRPCClient) Auctions(ctx context.Context, in *AuctionsRequest, opts ...grpc.CallOption) (*AuctionsResponse, error) {
	out := new(AuctionsResponse)
	err := c.cc.Invoke(ctx, "/kaiju_auction_rpc.KaijuAuctionRPC/Auctions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kaijuAuctionRPCClient) StreamBids(ctx context.Context, in *StreamBidsRequest, opts ...grpc.CallOption) (KaijuAuctionRPC_StreamBidsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KaijuAuctionRPC_ServiceDesc.Streams[0], "/kaiju_auction_rpc.KaijuAuctionRPC/StreamBids", opts...)
	if err != nil {
		return nil, err
	}
	x := &kaijuAuctionRPCStreamBidsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KaijuAuctionRPC_StreamBidsClient interface {
	Recv() (*StreamBidsResponse, error)
	grpc.ClientStream
}

type kaijuAuctionRPCStreamBidsClient struct {
	grpc.ClientStream
}

func (x *kaijuAuctionRPCStreamBidsClient) Recv() (*StreamBidsResponse, error) {
	m := new(StreamBidsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KaijuAuctionRPCServer is the server API for KaijuAuctionRPC service.
// All implementations must embed UnimplementedKaijuAuctionRPCServer
// for forward compatibility
type KaijuAuctionRPCServer interface {
	// Provide historical auction info for a given auction
	AuctionEndpoint(context.Context, *AuctionRequest) (*AuctionResponse, error)
	// Provide the historical auctions info
	Auctions(context.Context, *AuctionsRequest) (*AuctionsResponse, error)
	// StreamBids streams new bids of an auction.
	StreamBids(*StreamBidsRequest, KaijuAuctionRPC_StreamBidsServer) error
	mustEmbedUnimplementedKaijuAuctionRPCServer()
}

// UnimplementedKaijuAuctionRPCServer must be embedded to have forward compatible implementations.
type UnimplementedKaijuAuctionRPCServer struct {
}

func (UnimplementedKaijuAuctionRPCServer) AuctionEndpoint(context.Context, *AuctionRequest) (*AuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionEndpoint not implemented")
}
func (UnimplementedKaijuAuctionRPCServer) Auctions(context.Context, *AuctionsRequest) (*AuctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auctions not implemented")
}
func (UnimplementedKaijuAuctionRPCServer) StreamBids(*StreamBidsRequest, KaijuAuctionRPC_StreamBidsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamBids not implemented")
}
func (UnimplementedKaijuAuctionRPCServer) mustEmbedUnimplementedKaijuAuctionRPCServer() {}

// UnsafeKaijuAuctionRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KaijuAuctionRPCServer will
// result in compilation errors.
type UnsafeKaijuAuctionRPCServer interface {
	mustEmbedUnimplementedKaijuAuctionRPCServer()
}

func RegisterKaijuAuctionRPCServer(s grpc.ServiceRegistrar, srv KaijuAuctionRPCServer) {
	s.RegisterService(&KaijuAuctionRPC_ServiceDesc, srv)
}

func _KaijuAuctionRPC_AuctionEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAuctionRPCServer).AuctionEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_auction_rpc.KaijuAuctionRPC/AuctionEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAuctionRPCServer).AuctionEndpoint(ctx, req.(*AuctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAuctionRPC_Auctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KaijuAuctionRPCServer).Auctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju_auction_rpc.KaijuAuctionRPC/Auctions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KaijuAuctionRPCServer).Auctions(ctx, req.(*AuctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KaijuAuctionRPC_StreamBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBidsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KaijuAuctionRPCServer).StreamBids(m, &kaijuAuctionRPCStreamBidsServer{stream})
}

type KaijuAuctionRPC_StreamBidsServer interface {
	Send(*StreamBidsResponse) error
	grpc.ServerStream
}

type kaijuAuctionRPCStreamBidsServer struct {
	grpc.ServerStream
}

func (x *kaijuAuctionRPCStreamBidsServer) Send(m *StreamBidsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// KaijuAuctionRPC_ServiceDesc is the grpc.ServiceDesc for KaijuAuctionRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KaijuAuctionRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju_auction_rpc.KaijuAuctionRPC",
	HandlerType: (*KaijuAuctionRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuctionEndpoint",
			Handler:    _KaijuAuctionRPC_AuctionEndpoint_Handler,
		},
		{
			MethodName: "Auctions",
			Handler:    _KaijuAuctionRPC_Auctions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBids",
			Handler:       _KaijuAuctionRPC_StreamBids_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kaiju_auction_rpc.proto",
}
