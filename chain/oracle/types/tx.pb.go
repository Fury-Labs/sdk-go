// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/oracle/v1beta1/tx.proto

package types

import (
	"context"
	"fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	"github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"io"
	"math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetPrice defines a SDK message for for creating an oracle
type MsgSetPriceFeederPrice struct {
	Sender string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Base   []string `protobuf:"bytes,2,rep,name=base,proto3" json:"base,omitempty"`
	Quote  []string `protobuf:"bytes,3,rep,name=quote,proto3" json:"quote,omitempty"`
	// price defines the price of the oracle base and quote
	Price []github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,rep,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
}

func (m *MsgSetPriceFeederPrice) Reset()         { *m = MsgSetPriceFeederPrice{} }
func (m *MsgSetPriceFeederPrice) String() string { return proto.CompactTextString(m) }
func (*MsgSetPriceFeederPrice) ProtoMessage()    {}
func (*MsgSetPriceFeederPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fdf1c490eba4310, []int{0}
}
func (m *MsgSetPriceFeederPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPriceFeederPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPriceFeederPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPriceFeederPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPriceFeederPrice.Merge(m, src)
}
func (m *MsgSetPriceFeederPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPriceFeederPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPriceFeederPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPriceFeederPrice proto.InternalMessageInfo

type MsgSetPriceFeederPriceResponse struct {
}

func (m *MsgSetPriceFeederPriceResponse) Reset()         { *m = MsgSetPriceFeederPriceResponse{} }
func (m *MsgSetPriceFeederPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPriceFeederPriceResponse) ProtoMessage()    {}
func (*MsgSetPriceFeederPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fdf1c490eba4310, []int{1}
}
func (m *MsgSetPriceFeederPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPriceFeederPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPriceFeederPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPriceFeederPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPriceFeederPriceResponse.Merge(m, src)
}
func (m *MsgSetPriceFeederPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPriceFeederPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPriceFeederPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPriceFeederPriceResponse proto.InternalMessageInfo

type MsgRelay struct {
	Relayer      string   `protobuf:"bytes,1,opt,name=relayer,proto3" json:"relayer,omitempty"`
	Symbols      []string `protobuf:"bytes,2,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Rates        []uint64 `protobuf:"varint,3,rep,packed,name=rates,proto3" json:"rates,omitempty"`
	ResolveTimes []uint64 `protobuf:"varint,4,rep,packed,name=resolve_times,json=resolveTimes,proto3" json:"resolve_times,omitempty"`
	RequestIDs   []uint64 `protobuf:"varint,5,rep,packed,name=requestIDs,proto3" json:"requestIDs,omitempty"`
}

func (m *MsgRelay) Reset()         { *m = MsgRelay{} }
func (m *MsgRelay) String() string { return proto.CompactTextString(m) }
func (*MsgRelay) ProtoMessage()    {}
func (*MsgRelay) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fdf1c490eba4310, []int{2}
}
func (m *MsgRelay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelay.Merge(m, src)
}
func (m *MsgRelay) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelay) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelay.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelay proto.InternalMessageInfo

func (m *MsgRelay) GetRelayer() string {
	if m != nil {
		return m.Relayer
	}
	return ""
}

func (m *MsgRelay) GetSymbols() []string {
	if m != nil {
		return m.Symbols
	}
	return nil
}

func (m *MsgRelay) GetRates() []uint64 {
	if m != nil {
		return m.Rates
	}
	return nil
}

func (m *MsgRelay) GetResolveTimes() []uint64 {
	if m != nil {
		return m.ResolveTimes
	}
	return nil
}

func (m *MsgRelay) GetRequestIDs() []uint64 {
	if m != nil {
		return m.RequestIDs
	}
	return nil
}

type MsgRelayResponse struct {
}

func (m *MsgRelayResponse) Reset()         { *m = MsgRelayResponse{} }
func (m *MsgRelayResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRelayResponse) ProtoMessage()    {}
func (*MsgRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fdf1c490eba4310, []int{3}
}
func (m *MsgRelayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRelayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRelayResponse.Merge(m, src)
}
func (m *MsgRelayResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRelayResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetPriceFeederPrice)(nil), "injective.oracle.v1beta1.MsgSetPriceFeederPrice")
	proto.RegisterType((*MsgSetPriceFeederPriceResponse)(nil), "injective.oracle.v1beta1.MsgSetPriceFeederPriceResponse")
	proto.RegisterType((*MsgRelay)(nil), "injective.oracle.v1beta1.MsgRelay")
	proto.RegisterType((*MsgRelayResponse)(nil), "injective.oracle.v1beta1.MsgRelayResponse")
}

func init() { proto.RegisterFile("injective/oracle/v1beta1/tx.proto", fileDescriptor_5fdf1c490eba4310) }

var fileDescriptor_5fdf1c490eba4310 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x91, 0xa4, 0xb4, 0x4f, 0x20, 0xa1, 0xa3, 0xaa, 0xac, 0x0c, 0x97, 0x60, 0x04, 0xaa,
	0x90, 0xea, 0xa3, 0xb0, 0x20, 0xc6, 0x2a, 0x42, 0xaa, 0xd4, 0x48, 0xc8, 0x20, 0x21, 0xb1, 0x20,
	0xdb, 0x79, 0xb8, 0x06, 0xdb, 0x97, 0xde, 0xbb, 0x44, 0x64, 0x64, 0x63, 0x64, 0x65, 0xeb, 0xcc,
	0x2f, 0xe9, 0xd8, 0x11, 0x31, 0x54, 0x28, 0x59, 0xf8, 0x19, 0xc8, 0x67, 0x3b, 0x64, 0x48, 0x40,
	0x9d, 0xfc, 0xbe, 0x77, 0xdf, 0x7d, 0xf7, 0xbe, 0xe7, 0x0f, 0xee, 0xa5, 0xc5, 0x07, 0x8c, 0x4d,
	0x3a, 0x45, 0xa9, 0x74, 0x18, 0x67, 0x28, 0xa7, 0x87, 0x11, 0x9a, 0xf0, 0x50, 0x9a, 0x4f, 0xfe,
	0x58, 0x2b, 0xa3, 0xb8, 0xbb, 0xa4, 0xf8, 0x15, 0xc5, 0xaf, 0x29, 0xdd, 0xdd, 0x44, 0x25, 0xca,
	0x92, 0x64, 0x59, 0x55, 0xfc, 0xae, 0x88, 0x15, 0xe5, 0x8a, 0x64, 0x14, 0xd2, 0x5f, 0xb5, 0x58,
	0xa5, 0x45, 0x7d, 0xfe, 0x60, 0xe3, 0x93, 0xb5, 0xbc, 0xa5, 0x79, 0xdf, 0x19, 0xec, 0x0d, 0x29,
	0x79, 0x85, 0xe6, 0xa5, 0x4e, 0x63, 0x7c, 0x81, 0x38, 0x42, 0x6d, 0x4b, 0xbe, 0x07, 0x5b, 0x84,
	0xc5, 0x08, 0xb5, 0xcb, 0xfa, 0x6c, 0x7f, 0x27, 0xa8, 0x11, 0xe7, 0xd0, 0x2e, 0x1f, 0x75, 0x6f,
	0xf4, 0x5b, 0xfb, 0x3b, 0x81, 0xad, 0xf9, 0x2e, 0x74, 0xce, 0x26, 0xca, 0xa0, 0xdb, 0xb2, 0xcd,
	0x0a, 0xf0, 0x01, 0x74, 0xc6, 0xa5, 0x94, 0xdb, 0x2e, 0xbb, 0x47, 0xfe, 0xc5, 0x55, 0xcf, 0xf9,
	0x79, 0xd5, 0x7b, 0x98, 0xa4, 0xe6, 0x74, 0x12, 0xf9, 0xb1, 0xca, 0x65, 0xed, 0xa2, 0xfa, 0x1c,
	0xd0, 0xe8, 0xa3, 0x34, 0xb3, 0x31, 0x92, 0x3f, 0xc0, 0x38, 0xa8, 0x2e, 0x3f, 0xdf, 0xfe, 0x72,
	0xde, 0x73, 0x7e, 0x9f, 0xf7, 0x1c, 0xaf, 0x0f, 0x62, 0xfd, 0xac, 0x01, 0xd2, 0x58, 0x15, 0x84,
	0xde, 0x37, 0x06, 0xdb, 0x43, 0x4a, 0x02, 0xcc, 0xc2, 0x19, 0x77, 0xe1, 0xa6, 0x2e, 0x8b, 0xa5,
	0x83, 0x06, 0x96, 0x27, 0x34, 0xcb, 0x23, 0x95, 0x51, 0xed, 0xa2, 0x81, 0xa5, 0x11, 0x1d, 0x1a,
	0x24, 0x6b, 0xa4, 0x1d, 0x54, 0x80, 0xdf, 0x87, 0xdb, 0x1a, 0x49, 0x65, 0x53, 0x7c, 0x67, 0xd2,
	0x1c, 0xc9, 0x1a, 0x6a, 0x07, 0xb7, 0xea, 0xe6, 0xeb, 0xb2, 0xc7, 0x05, 0x80, 0xc6, 0xb3, 0x09,
	0x92, 0x39, 0x1e, 0x90, 0xdb, 0xb1, 0x8c, 0x95, 0x8e, 0xc7, 0xe1, 0x4e, 0x33, 0x5a, 0x33, 0xef,
	0x93, 0x39, 0x83, 0xd6, 0x90, 0x12, 0xfe, 0x99, 0xc1, 0xdd, 0x75, 0xff, 0xe0, 0xb1, 0xbf, 0x29,
	0x16, 0xfe, 0xfa, 0x4d, 0x74, 0x9f, 0x5d, 0xf7, 0x46, 0x33, 0x0b, 0x7f, 0x03, 0x9d, 0x6a, 0x6f,
	0xde, 0x3f, 0x25, 0x2c, 0xa7, 0xfb, 0xe8, 0xff, 0x9c, 0x46, 0xf8, 0xe8, 0xfd, 0xc5, 0x5c, 0xb0,
	0xcb, 0xb9, 0x60, 0xbf, 0xe6, 0x82, 0x7d, 0x5d, 0x08, 0xe7, 0x72, 0x21, 0x9c, 0x1f, 0x0b, 0xe1,
	0xbc, 0x3d, 0x59, 0x49, 0xc2, 0x71, 0xa3, 0x77, 0x12, 0x46, 0x24, 0x97, 0xea, 0x07, 0xb1, 0xd2,
	0xb8, 0x0a, 0x4f, 0xc3, 0xb4, 0x90, 0xb9, 0x1a, 0x4d, 0x32, 0xa4, 0x26, 0xda, 0x36, 0x33, 0xd1,
	0x96, 0x8d, 0xf4, 0xd3, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x1f, 0x44, 0x0b, 0x6e, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetPriceFeederPrice defines a method for setting a price for a price feeder-based oracle
	SetPriceFeederPrice(ctx context.Context, in *MsgSetPriceFeederPrice, opts ...grpc.CallOption) (*MsgSetPriceFeederPriceResponse, error)
	// Relay defines a method for relaying rates from Band
	Relay(ctx context.Context, in *MsgRelay, opts ...grpc.CallOption) (*MsgRelayResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetPriceFeederPrice(ctx context.Context, in *MsgSetPriceFeederPrice, opts ...grpc.CallOption) (*MsgSetPriceFeederPriceResponse, error) {
	out := new(MsgSetPriceFeederPriceResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Msg/SetPriceFeederPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Relay(ctx context.Context, in *MsgRelay, opts ...grpc.CallOption) (*MsgRelayResponse, error) {
	out := new(MsgRelayResponse)
	err := c.cc.Invoke(ctx, "/injective.oracle.v1beta1.Msg/Relay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetPriceFeederPrice defines a method for setting a price for a price feeder-based oracle
	SetPriceFeederPrice(context.Context, *MsgSetPriceFeederPrice) (*MsgSetPriceFeederPriceResponse, error)
	// Relay defines a method for relaying rates from Band
	Relay(context.Context, *MsgRelay) (*MsgRelayResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetPriceFeederPrice(ctx context.Context, req *MsgSetPriceFeederPrice) (*MsgSetPriceFeederPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPriceFeederPrice not implemented")
}
func (*UnimplementedMsgServer) Relay(ctx context.Context, req *MsgRelay) (*MsgRelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Relay not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetPriceFeederPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPriceFeederPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPriceFeederPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Msg/SetPriceFeederPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPriceFeederPrice(ctx, req.(*MsgSetPriceFeederPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Relay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Relay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.oracle.v1beta1.Msg/Relay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Relay(ctx, req.(*MsgRelay))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.oracle.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPriceFeederPrice",
			Handler:    _Msg_SetPriceFeederPrice_Handler,
		},
		{
			MethodName: "Relay",
			Handler:    _Msg_Relay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/oracle/v1beta1/tx.proto",
}

func (m *MsgSetPriceFeederPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPriceFeederPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPriceFeederPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Price[iNdEx].Size()
				i -= size
				if _, err := m.Price[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Quote) > 0 {
		for iNdEx := len(m.Quote) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Quote[iNdEx])
			copy(dAtA[i:], m.Quote[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Quote[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Base) > 0 {
		for iNdEx := len(m.Base) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Base[iNdEx])
			copy(dAtA[i:], m.Base[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Base[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPriceFeederPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPriceFeederPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPriceFeederPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRelay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestIDs) > 0 {
		dAtA2 := make([]byte, len(m.RequestIDs)*10)
		var j1 int
		for _, num := range m.RequestIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResolveTimes) > 0 {
		dAtA4 := make([]byte, len(m.ResolveTimes)*10)
		var j3 int
		for _, num := range m.ResolveTimes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Rates) > 0 {
		dAtA6 := make([]byte, len(m.Rates)*10)
		var j5 int
		for _, num := range m.Rates {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTx(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbols) > 0 {
		for iNdEx := len(m.Symbols) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Symbols[iNdEx])
			copy(dAtA[i:], m.Symbols[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Symbols[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Relayer) > 0 {
		i -= len(m.Relayer)
		copy(dAtA[i:], m.Relayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Relayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRelayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRelayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRelayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetPriceFeederPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Base) > 0 {
		for _, s := range m.Base {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Quote) > 0 {
		for _, s := range m.Quote {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetPriceFeederPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRelay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Relayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Symbols) > 0 {
		for _, s := range m.Symbols {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Rates) > 0 {
		l = 0
		for _, e := range m.Rates {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.ResolveTimes) > 0 {
		l = 0
		for _, e := range m.ResolveTimes {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.RequestIDs) > 0 {
		l = 0
		for _, e := range m.RequestIDs {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgRelayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetPriceFeederPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPriceFeederPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPriceFeederPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Base = append(m.Base, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quote = append(m.Quote, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Price = append(m.Price, v)
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPriceFeederPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPriceFeederPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPriceFeederPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbols", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbols = append(m.Symbols, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rates = append(m.Rates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rates) == 0 {
					m.Rates = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rates = append(m.Rates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResolveTimes = append(m.ResolveTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ResolveTimes) == 0 {
					m.ResolveTimes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResolveTimes = append(m.ResolveTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTimes", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestIDs = append(m.RequestIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RequestIDs) == 0 {
					m.RequestIDs = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestIDs = append(m.RequestIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRelayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRelayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRelayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
