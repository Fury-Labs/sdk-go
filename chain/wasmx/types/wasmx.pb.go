// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/wasmx/v1/wasmx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// Set the status to active to indicate that the contract is to be executed in begin blocker.
	IsExecutionEnabled bool `protobuf:"varint,1,opt,name=is_execution_enabled,json=isExecutionEnabled,proto3" json:"is_execution_enabled,omitempty"`
	// registry_contract is the address of the registry contract that will be used to register contract executions in begin blocker.
	RegistryContract string `protobuf:"bytes,2,opt,name=registry_contract,json=registryContract,proto3" json:"registry_contract,omitempty"`
	// Maximum aggregate total gas to be used for the contract executions in the BeginBlocker.
	MaxBeginBlockTotalGas uint64 `protobuf:"varint,3,opt,name=max_begin_block_total_gas,json=maxBeginBlockTotalGas,proto3" json:"max_begin_block_total_gas,omitempty"`
	// the maximum gas limit each individual contract can consume in the BeginBlocker.
	MaxContractGasLimit uint64 `protobuf:"varint,4,opt,name=max_contract_gas_limit,json=maxContractGasLimit,proto3" json:"max_contract_gas_limit,omitempty"`
	// min_gas_price defines the minimum gas price the contracts must pay to be executed in the BeginBlocker.
	MinGasPrice github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=min_gas_price,json=minGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_gas_price"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6818ff331f2cddc4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIsExecutionEnabled() bool {
	if m != nil {
		return m.IsExecutionEnabled
	}
	return false
}

func (m *Params) GetRegistryContract() string {
	if m != nil {
		return m.RegistryContract
	}
	return ""
}

func (m *Params) GetMaxBeginBlockTotalGas() uint64 {
	if m != nil {
		return m.MaxBeginBlockTotalGas
	}
	return 0
}

func (m *Params) GetMaxContractGasLimit() uint64 {
	if m != nil {
		return m.MaxContractGasLimit
	}
	return 0
}

type ContractRegistrationRequestProposal struct {
	Title                       string                      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                 string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ContractRegistrationRequest ContractRegistrationRequest `protobuf:"bytes,3,opt,name=contract_registration_request,json=contractRegistrationRequest,proto3" json:"contract_registration_request"`
}

func (m *ContractRegistrationRequestProposal) Reset()         { *m = ContractRegistrationRequestProposal{} }
func (m *ContractRegistrationRequestProposal) String() string { return proto.CompactTextString(m) }
func (*ContractRegistrationRequestProposal) ProtoMessage()    {}
func (*ContractRegistrationRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6818ff331f2cddc4, []int{1}
}
func (m *ContractRegistrationRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractRegistrationRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractRegistrationRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractRegistrationRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractRegistrationRequestProposal.Merge(m, src)
}
func (m *ContractRegistrationRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *ContractRegistrationRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractRegistrationRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ContractRegistrationRequestProposal proto.InternalMessageInfo

type BatchContractRegistrationRequestProposal struct {
	Title                        string                        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                  string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ContractRegistrationRequests []ContractRegistrationRequest `protobuf:"bytes,3,rep,name=contract_registration_requests,json=contractRegistrationRequests,proto3" json:"contract_registration_requests"`
}

func (m *BatchContractRegistrationRequestProposal) Reset() {
	*m = BatchContractRegistrationRequestProposal{}
}
func (m *BatchContractRegistrationRequestProposal) String() string { return proto.CompactTextString(m) }
func (*BatchContractRegistrationRequestProposal) ProtoMessage()    {}
func (*BatchContractRegistrationRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_6818ff331f2cddc4, []int{2}
}
func (m *BatchContractRegistrationRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchContractRegistrationRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchContractRegistrationRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchContractRegistrationRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchContractRegistrationRequestProposal.Merge(m, src)
}
func (m *BatchContractRegistrationRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *BatchContractRegistrationRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchContractRegistrationRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BatchContractRegistrationRequestProposal proto.InternalMessageInfo

type ContractRegistrationRequest struct {
	// Unique Identifier for contract instance to be registered.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Maximum gas to be used for the smart contract execution.
	GasLimit uint64 `protobuf:"varint,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// gas price to be used for the smart contract execution.
	GasPrice    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"gas_price"`
	PinContract bool                                   `protobuf:"varint,4,opt,name=pin_contract,json=pinContract,proto3" json:"pin_contract,omitempty"`
}

func (m *ContractRegistrationRequest) Reset()         { *m = ContractRegistrationRequest{} }
func (m *ContractRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*ContractRegistrationRequest) ProtoMessage()    {}
func (*ContractRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6818ff331f2cddc4, []int{3}
}
func (m *ContractRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractRegistrationRequest.Merge(m, src)
}
func (m *ContractRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractRegistrationRequest proto.InternalMessageInfo

func (m *ContractRegistrationRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractRegistrationRequest) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ContractRegistrationRequest) GetPinContract() bool {
	if m != nil {
		return m.PinContract
	}
	return false
}

func init() {
	proto.RegisterType((*Params)(nil), "injective.wasmx.v1.Params")
	proto.RegisterType((*ContractRegistrationRequestProposal)(nil), "injective.wasmx.v1.ContractRegistrationRequestProposal")
	proto.RegisterType((*BatchContractRegistrationRequestProposal)(nil), "injective.wasmx.v1.BatchContractRegistrationRequestProposal")
	proto.RegisterType((*ContractRegistrationRequest)(nil), "injective.wasmx.v1.ContractRegistrationRequest")
}

func init() { proto.RegisterFile("injective/wasmx/v1/wasmx.proto", fileDescriptor_6818ff331f2cddc4) }

var fileDescriptor_6818ff331f2cddc4 = []byte{
	// 571 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x1c, 0x4e, 0xda, 0x6e, 0x6a, 0x5d, 0x10, 0xc3, 0x14, 0x54, 0x28, 0xa4, 0xa5, 0x48, 0xa8, 0x08,
	0x2d, 0x61, 0xec, 0x82, 0x76, 0x23, 0x68, 0xaa, 0xa6, 0xed, 0x50, 0x45, 0x9c, 0xb8, 0x44, 0x8e,
	0x63, 0xa5, 0x66, 0x89, 0x1d, 0x6c, 0xb7, 0xb4, 0xe2, 0x05, 0x38, 0xf2, 0x08, 0x7d, 0x04, 0x1e,
	0x63, 0xc7, 0x5d, 0x90, 0x10, 0x87, 0x09, 0xb5, 0x97, 0xf1, 0x16, 0xc8, 0x49, 0xd3, 0x55, 0x42,
	0xf4, 0x30, 0x69, 0xa7, 0xd8, 0xbf, 0xcf, 0xbf, 0x3f, 0xdf, 0x97, 0xcf, 0x06, 0x16, 0x65, 0x1f,
	0x09, 0x56, 0x74, 0x4c, 0x9c, 0xcf, 0x48, 0x26, 0x13, 0x67, 0xbc, 0x97, 0x2f, 0xec, 0x54, 0x70,
	0xc5, 0x21, 0x5c, 0xe1, 0x76, 0x1e, 0x1e, 0xef, 0x3d, 0x6a, 0x44, 0x3c, 0xe2, 0x19, 0xec, 0xe8,
	0x55, 0x7e, 0xb2, 0xfb, 0xbd, 0x04, 0xb6, 0x07, 0x48, 0xa0, 0x44, 0xc2, 0x57, 0xa0, 0x41, 0xa5,
	0x4f, 0x26, 0x04, 0x8f, 0x14, 0xe5, 0xcc, 0x27, 0x0c, 0x05, 0x31, 0x09, 0x9b, 0x66, 0xc7, 0xec,
	0x55, 0x3d, 0x48, 0xe5, 0x61, 0x01, 0x1d, 0xe6, 0x08, 0x7c, 0x09, 0xee, 0x0a, 0x12, 0x51, 0xa9,
	0xc4, 0xd4, 0xc7, 0x9c, 0x29, 0x81, 0xb0, 0x6a, 0x96, 0x3a, 0x66, 0xaf, 0xe6, 0xed, 0x14, 0xc0,
	0xbb, 0x65, 0x1c, 0xbe, 0x01, 0x0f, 0x13, 0x34, 0xf1, 0x03, 0x12, 0x51, 0xe6, 0x07, 0x31, 0xc7,
	0xa7, 0xbe, 0xe2, 0x0a, 0xc5, 0x7e, 0x84, 0x64, 0xb3, 0xdc, 0x31, 0x7b, 0x15, 0xef, 0x7e, 0x82,
	0x26, 0xae, 0xc6, 0x5d, 0x0d, 0xbf, 0xd7, 0x68, 0x1f, 0x49, 0xb8, 0x0f, 0x1e, 0xe8, 0xcc, 0xa2,
	0x83, 0x4e, 0xf0, 0x63, 0x9a, 0x50, 0xd5, 0xac, 0x64, 0x69, 0xf7, 0x12, 0x34, 0x29, 0xda, 0xf4,
	0x91, 0x3c, 0xd1, 0x10, 0xf4, 0xc0, 0xed, 0x84, 0xb2, 0xec, 0x6c, 0x2a, 0x28, 0x26, 0xcd, 0x2d,
	0x3d, 0x97, 0x6b, 0x9f, 0x5d, 0xb4, 0x8d, 0x5f, 0x17, 0xed, 0xe7, 0x11, 0x55, 0xc3, 0x51, 0x60,
	0x63, 0x9e, 0x38, 0x98, 0xcb, 0x84, 0xcb, 0xe5, 0x67, 0x57, 0x86, 0xa7, 0x8e, 0x9a, 0xa6, 0x44,
	0xda, 0x47, 0x4c, 0x79, 0xf5, 0x84, 0xb2, 0x3e, 0x92, 0x03, 0x5d, 0xe2, 0xa0, 0x72, 0x39, 0x6b,
	0x9b, 0xdd, 0xb9, 0x09, 0x9e, 0x15, 0xed, 0xbc, 0x9c, 0x25, 0xd2, 0xaa, 0x78, 0xe4, 0xd3, 0x88,
	0x48, 0x35, 0x10, 0x3c, 0xe5, 0x12, 0xc5, 0xb0, 0x01, 0xb6, 0x14, 0x55, 0x31, 0xc9, 0x04, 0xac,
	0x79, 0xf9, 0x06, 0x76, 0x40, 0x3d, 0x24, 0x12, 0x0b, 0x9a, 0xea, 0x9c, 0xa5, 0x5a, 0xeb, 0x21,
	0x38, 0x05, 0x4f, 0x56, 0x54, 0xc5, 0x5a, 0x7d, 0x5f, 0xe4, 0x0d, 0x32, 0xb1, 0xea, 0xaf, 0x1d,
	0xfb, 0xdf, 0x9f, 0x6c, 0x6f, 0x98, 0xcb, 0xad, 0x68, 0xea, 0x5e, 0x0b, 0xff, 0xff, 0xc8, 0x41,
	0xf5, 0xeb, 0xac, 0x6d, 0x5c, 0xce, 0xda, 0x46, 0xf7, 0x8f, 0x09, 0x7a, 0x2e, 0x52, 0x78, 0x78,
	0x93, 0x4c, 0xbf, 0x00, 0x6b, 0x23, 0x53, 0xed, 0x8b, 0xf2, 0xf5, 0xa9, 0x3e, 0xde, 0x40, 0x55,
	0xae, 0x71, 0xfd, 0x61, 0x82, 0xd6, 0x86, 0x6a, 0xf0, 0x05, 0xd8, 0x59, 0x8d, 0x89, 0xc2, 0x50,
	0x10, 0x29, 0x97, 0x4c, 0xef, 0x14, 0xf1, 0xb7, 0x79, 0x18, 0xb6, 0x40, 0xed, 0xca, 0x9d, 0xa5,
	0xcc, 0x9d, 0xd5, 0xa8, 0xb0, 0xe4, 0x71, 0x0e, 0xe6, 0x76, 0x2c, 0x5f, 0xcb, 0x8e, 0xba, 0x58,
	0xe6, 0x45, 0xf8, 0x14, 0xdc, 0x4a, 0x29, 0xbb, 0xba, 0x76, 0x95, 0xec, 0x96, 0xd6, 0x53, 0xca,
	0x0a, 0x2a, 0x2e, 0x39, 0x9b, 0x5b, 0xe6, 0xf9, 0xdc, 0x32, 0x7f, 0xcf, 0x2d, 0xf3, 0xdb, 0xc2,
	0x32, 0xce, 0x17, 0x96, 0xf1, 0x73, 0x61, 0x19, 0x1f, 0x8e, 0xd7, 0xda, 0x1d, 0x15, 0xd2, 0x9e,
	0xa0, 0x40, 0x3a, 0x2b, 0xa1, 0x77, 0x31, 0x17, 0x64, 0x7d, 0x3b, 0x44, 0x94, 0x39, 0x09, 0x0f,
	0x47, 0x31, 0x91, 0xcb, 0x57, 0x27, 0x9b, 0x2b, 0xd8, 0xce, 0x5e, 0x92, 0xfd, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x59, 0x1c, 0x63, 0x2d, 0x95, 0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsExecutionEnabled != that1.IsExecutionEnabled {
		return false
	}
	if this.RegistryContract != that1.RegistryContract {
		return false
	}
	if this.MaxBeginBlockTotalGas != that1.MaxBeginBlockTotalGas {
		return false
	}
	if this.MaxContractGasLimit != that1.MaxContractGasLimit {
		return false
	}
	if !this.MinGasPrice.Equal(that1.MinGasPrice) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinGasPrice.Size()
		i -= size
		if _, err := m.MinGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWasmx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MaxContractGasLimit != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxContractGasLimit))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxBeginBlockTotalGas != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.MaxBeginBlockTotalGas))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RegistryContract) > 0 {
		i -= len(m.RegistryContract)
		copy(dAtA[i:], m.RegistryContract)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.RegistryContract)))
		i--
		dAtA[i] = 0x12
	}
	if m.IsExecutionEnabled {
		i--
		if m.IsExecutionEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractRegistrationRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractRegistrationRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractRegistrationRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContractRegistrationRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintWasmx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchContractRegistrationRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchContractRegistrationRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchContractRegistrationRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractRegistrationRequests) > 0 {
		for iNdEx := len(m.ContractRegistrationRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractRegistrationRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWasmx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PinContract {
		i--
		if m.PinContract {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.GasPrice.Size()
		i -= size
		if _, err := m.GasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintWasmx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.GasLimit != 0 {
		i = encodeVarintWasmx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintWasmx(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWasmx(dAtA []byte, offset int, v uint64) int {
	offset -= sovWasmx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsExecutionEnabled {
		n += 2
	}
	l = len(m.RegistryContract)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	if m.MaxBeginBlockTotalGas != 0 {
		n += 1 + sovWasmx(uint64(m.MaxBeginBlockTotalGas))
	}
	if m.MaxContractGasLimit != 0 {
		n += 1 + sovWasmx(uint64(m.MaxContractGasLimit))
	}
	l = m.MinGasPrice.Size()
	n += 1 + l + sovWasmx(uint64(l))
	return n
}

func (m *ContractRegistrationRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	l = m.ContractRegistrationRequest.Size()
	n += 1 + l + sovWasmx(uint64(l))
	return n
}

func (m *BatchContractRegistrationRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	if len(m.ContractRegistrationRequests) > 0 {
		for _, e := range m.ContractRegistrationRequests {
			l = e.Size()
			n += 1 + l + sovWasmx(uint64(l))
		}
	}
	return n
}

func (m *ContractRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovWasmx(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovWasmx(uint64(m.GasLimit))
	}
	l = m.GasPrice.Size()
	n += 1 + l + sovWasmx(uint64(l))
	if m.PinContract {
		n += 2
	}
	return n
}

func sovWasmx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWasmx(x uint64) (n int) {
	return sovWasmx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsExecutionEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsExecutionEnabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryContract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryContract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBeginBlockTotalGas", wireType)
			}
			m.MaxBeginBlockTotalGas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBeginBlockTotalGas |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxContractGasLimit", wireType)
			}
			m.MaxContractGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxContractGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractRegistrationRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractRegistrationRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractRegistrationRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRegistrationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractRegistrationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchContractRegistrationRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchContractRegistrationRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchContractRegistrationRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRegistrationRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRegistrationRequests = append(m.ContractRegistrationRequests, ContractRegistrationRequest{})
			if err := m.ContractRegistrationRequests[len(m.ContractRegistrationRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWasmx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWasmx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PinContract", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PinContract = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWasmx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWasmx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWasmx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWasmx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWasmx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWasmx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWasmx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWasmx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWasmx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWasmx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWasmx = fmt.Errorf("proto: unexpected end of group")
)
