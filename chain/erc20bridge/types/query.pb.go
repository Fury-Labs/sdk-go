// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kaiju/erc20bridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryBridgesRequest is the request type for the Query/Storage RPC method.
type QueryBridgesRequest struct {
}

func (m *QueryBridgesRequest) Reset()         { *m = QueryBridgesRequest{} }
func (m *QueryBridgesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgesRequest) ProtoMessage()    {}
func (*QueryBridgesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a294784115eb11, []int{0}
}
func (m *QueryBridgesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgesRequest.Merge(m, src)
}
func (m *QueryBridgesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgesRequest proto.InternalMessageInfo

// QueryBridgesResponse is the response type for the Query/Storage RPC
// method.
type QueryBridgesResponse struct {
	Data []TokenMapping `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (m *QueryBridgesResponse) Reset()         { *m = QueryBridgesResponse{} }
func (m *QueryBridgesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgesResponse) ProtoMessage()    {}
func (*QueryBridgesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a294784115eb11, []int{1}
}
func (m *QueryBridgesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgesResponse.Merge(m, src)
}
func (m *QueryBridgesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgesResponse proto.InternalMessageInfo

func (m *QueryBridgesResponse) GetData() []TokenMapping {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryHubParamsRequest is the request type for the Query/Storage RPC method.
type QueryHubParamsRequest struct {
}

func (m *QueryHubParamsRequest) Reset()         { *m = QueryHubParamsRequest{} }
func (m *QueryHubParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHubParamsRequest) ProtoMessage()    {}
func (*QueryHubParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a294784115eb11, []int{2}
}
func (m *QueryHubParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHubParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHubParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHubParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHubParamsRequest.Merge(m, src)
}
func (m *QueryHubParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHubParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHubParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHubParamsRequest proto.InternalMessageInfo

// QueryHubParamsResponse is the response type for the Query/Storage RPC
// method.
type QueryHubParamsResponse struct {
	Data HubParams `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
}

func (m *QueryHubParamsResponse) Reset()         { *m = QueryHubParamsResponse{} }
func (m *QueryHubParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHubParamsResponse) ProtoMessage()    {}
func (*QueryHubParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_53a294784115eb11, []int{3}
}
func (m *QueryHubParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHubParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHubParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHubParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHubParamsResponse.Merge(m, src)
}
func (m *QueryHubParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHubParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHubParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHubParamsResponse proto.InternalMessageInfo

func (m *QueryHubParamsResponse) GetData() HubParams {
	if m != nil {
		return m.Data
	}
	return HubParams{}
}

func init() {
	proto.RegisterType((*QueryBridgesRequest)(nil), "kaiju.erc20bridge.v1beta1.QueryBridgesRequest")
	proto.RegisterType((*QueryBridgesResponse)(nil), "kaiju.erc20bridge.v1beta1.QueryBridgesResponse")
	proto.RegisterType((*QueryHubParamsRequest)(nil), "kaiju.erc20bridge.v1beta1.QueryHubParamsRequest")
	proto.RegisterType((*QueryHubParamsResponse)(nil), "kaiju.erc20bridge.v1beta1.QueryHubParamsResponse")
}

func init() { proto.RegisterFile("kaiju/erc20bridge/query.proto", fileDescriptor_53a294784115eb11) }

var fileDescriptor_53a294784115eb11 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0xcc, 0xcb, 0x4a,
	0x4d, 0x2e, 0xc9, 0x2c, 0x4b, 0xd5, 0x4f, 0x2d, 0x4a, 0x36, 0x32, 0x48, 0x2a, 0xca, 0x4c, 0x49,
	0x4f, 0xd5, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x85,
	0x2b, 0xd1, 0x43, 0x52, 0xa2, 0x57, 0x66, 0x98, 0x94, 0x5a, 0x92, 0x68, 0x28, 0xa5, 0x82, 0xdd,
	0x84, 0x82, 0xa2, 0xfc, 0x82, 0xfc, 0xe2, 0xc4, 0x1c, 0x88, 0x21, 0x52, 0x4a, 0x38, 0x54, 0x25,
	0x16, 0x25, 0xe6, 0x16, 0x43, 0xd5, 0xc8, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x27, 0x16,
	0x64, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0xc1, 0x64, 0x45, 0xd2,
	0xf3, 0xd3, 0xf3, 0xc1, 0x4c, 0x7d, 0x10, 0x0b, 0x22, 0xaa, 0x24, 0xca, 0x25, 0x1c, 0x08, 0x72,
	0xab, 0x13, 0xd8, 0xbc, 0xe2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0xa5, 0x58, 0x2e, 0x11,
	0x54, 0xe1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x57, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44,
	0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x6d, 0x3d, 0xbc, 0x5e, 0xd3, 0x0b, 0xc9, 0xcf, 0x4e,
	0xcd, 0xf3, 0x4d, 0x2c, 0x28, 0xc8, 0xcc, 0x4b, 0x77, 0x62, 0x39, 0x71, 0x4f, 0x9e, 0x21, 0x08,
	0xac, 0x5d, 0x49, 0x9c, 0x4b, 0x14, 0x6c, 0xbc, 0x47, 0x69, 0x52, 0x00, 0xd8, 0x07, 0x30, 0x7b,
	0x63, 0xb8, 0xc4, 0xd0, 0x25, 0xa0, 0x36, 0x3b, 0xc1, 0x6d, 0x66, 0xd4, 0xe0, 0x36, 0xd2, 0x20,
	0x60, 0x33, 0x5c, 0x3f, 0xb2, 0xb5, 0x46, 0x37, 0x99, 0xb8, 0x58, 0xc1, 0xc6, 0x0b, 0x2d, 0x62,
	0xe4, 0x62, 0x87, 0xfa, 0x4d, 0xc8, 0x88, 0x80, 0x59, 0x58, 0xc2, 0x47, 0xca, 0x98, 0x24, 0x3d,
	0x10, 0x2f, 0x28, 0xe9, 0x35, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x43, 0x48, 0x4d, 0x1f, 0x7b, 0x64,
	0x42, 0x35, 0xeb, 0x27, 0x41, 0x1d, 0xb6, 0x8a, 0x91, 0x8b, 0x13, 0xee, 0x11, 0x21, 0x13, 0x62,
	0xac, 0x44, 0x0f, 0x50, 0x29, 0x53, 0x12, 0x75, 0x41, 0x9d, 0x6a, 0x00, 0x76, 0xaa, 0x96, 0x90,
	0x06, 0x01, 0xa7, 0x66, 0x94, 0x26, 0x41, 0x92, 0xa0, 0x53, 0xf6, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c,
	0x37, 0x1e, 0xcb, 0x31, 0x44, 0x05, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7,
	0xea, 0x7b, 0xc2, 0x4c, 0xf3, 0x49, 0x4c, 0x2a, 0x46, 0x98, 0xad, 0x9b, 0x9c, 0x5f, 0x94, 0x8a,
	0xcc, 0xcd, 0x48, 0xcc, 0xcc, 0xd3, 0xcf, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0x2d, 0x46, 0xb1, 0xb8,
	0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0x9c, 0x78, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x84, 0x33, 0xc5, 0x03, 0x7e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves registered bridges
	Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error)
	// Retrieves hub params
	HubParams(ctx context.Context, in *QueryHubParamsRequest, opts ...grpc.CallOption) (*QueryHubParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error) {
	out := new(QueryBridgesResponse)
	err := c.cc.Invoke(ctx, "/kaiju.erc20bridge.v1beta1.Query/Bridges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HubParams(ctx context.Context, in *QueryHubParamsRequest, opts ...grpc.CallOption) (*QueryHubParamsResponse, error) {
	out := new(QueryHubParamsResponse)
	err := c.cc.Invoke(ctx, "/kaiju.erc20bridge.v1beta1.Query/HubParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves registered bridges
	Bridges(context.Context, *QueryBridgesRequest) (*QueryBridgesResponse, error)
	// Retrieves hub params
	HubParams(context.Context, *QueryHubParamsRequest) (*QueryHubParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Bridges(ctx context.Context, req *QueryBridgesRequest) (*QueryBridgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridges not implemented")
}
func (*UnimplementedQueryServer) HubParams(ctx context.Context, req *QueryHubParamsRequest) (*QueryHubParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Bridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.erc20bridge.v1beta1.Query/Bridges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bridges(ctx, req.(*QueryBridgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HubParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHubParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HubParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kaiju.erc20bridge.v1beta1.Query/HubParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HubParams(ctx, req.(*QueryHubParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kaiju.erc20bridge.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bridges",
			Handler:    _Query_Bridges_Handler,
		},
		{
			MethodName: "HubParams",
			Handler:    _Query_HubParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kaiju/erc20bridge/query.proto",
}

func (m *QueryBridgesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBridgesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryHubParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHubParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHubParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHubParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHubParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHubParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBridgesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBridgesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryHubParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHubParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBridgesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, TokenMapping{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHubParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHubParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHubParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHubParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHubParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHubParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
