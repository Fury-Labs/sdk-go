// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: injective/exchange/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/InjectiveLabs/injective-core/injective-chain/modules/oracle/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Subaccount struct {
	Trader          string `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	SubaccountNonce uint32 `protobuf:"varint,2,opt,name=subaccount_nonce,json=subaccountNonce,proto3" json:"subaccount_nonce,omitempty"`
}

func (m *Subaccount) Reset()         { *m = Subaccount{} }
func (m *Subaccount) String() string { return proto.CompactTextString(m) }
func (*Subaccount) ProtoMessage()    {}
func (*Subaccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{0}
}
func (m *Subaccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Subaccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Subaccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Subaccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subaccount.Merge(m, src)
}
func (m *Subaccount) XXX_Size() int {
	return m.Size()
}
func (m *Subaccount) XXX_DiscardUnknown() {
	xxx_messageInfo_Subaccount.DiscardUnknown(m)
}

var xxx_messageInfo_Subaccount proto.InternalMessageInfo

func (m *Subaccount) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *Subaccount) GetSubaccountNonce() uint32 {
	if m != nil {
		return m.SubaccountNonce
	}
	return 0
}

type SubaccountOrderbookMetadataWithMarket struct {
	Metadata *SubaccountOrderbookMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	MarketId string                       `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuy    bool                         `protobuf:"varint,3,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
}

func (m *SubaccountOrderbookMetadataWithMarket) Reset()         { *m = SubaccountOrderbookMetadataWithMarket{} }
func (m *SubaccountOrderbookMetadataWithMarket) String() string { return proto.CompactTextString(m) }
func (*SubaccountOrderbookMetadataWithMarket) ProtoMessage()    {}
func (*SubaccountOrderbookMetadataWithMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{1}
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.Merge(m, src)
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_Size() int {
	return m.Size()
}
func (m *SubaccountOrderbookMetadataWithMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_SubaccountOrderbookMetadataWithMarket.DiscardUnknown(m)
}

var xxx_messageInfo_SubaccountOrderbookMetadataWithMarket proto.InternalMessageInfo

func (m *SubaccountOrderbookMetadataWithMarket) GetMetadata() *SubaccountOrderbookMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *SubaccountOrderbookMetadataWithMarket) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *SubaccountOrderbookMetadataWithMarket) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

// QueryExchangeParamsRequest is the request type for the Query/ExchangeParams RPC method.
type QueryExchangeParamsRequest struct {
}

func (m *QueryExchangeParamsRequest) Reset()         { *m = QueryExchangeParamsRequest{} }
func (m *QueryExchangeParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeParamsRequest) ProtoMessage()    {}
func (*QueryExchangeParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{2}
}
func (m *QueryExchangeParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeParamsRequest.Merge(m, src)
}
func (m *QueryExchangeParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeParamsRequest proto.InternalMessageInfo

// QueryExchangeParamsRequest is the response type for the Query/ExchangeParams RPC method.
type QueryExchangeParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryExchangeParamsResponse) Reset()         { *m = QueryExchangeParamsResponse{} }
func (m *QueryExchangeParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeParamsResponse) ProtoMessage()    {}
func (*QueryExchangeParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{3}
}
func (m *QueryExchangeParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeParamsResponse.Merge(m, src)
}
func (m *QueryExchangeParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeParamsResponse proto.InternalMessageInfo

func (m *QueryExchangeParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QuerySubaccountDepositsRequest is the request type for the Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositsRequest struct {
	SubaccountId string      `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Subaccount   *Subaccount `protobuf:"bytes,2,opt,name=subaccount,proto3" json:"subaccount,omitempty"`
}

func (m *QuerySubaccountDepositsRequest) Reset()         { *m = QuerySubaccountDepositsRequest{} }
func (m *QuerySubaccountDepositsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositsRequest) ProtoMessage()    {}
func (*QuerySubaccountDepositsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{4}
}
func (m *QuerySubaccountDepositsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositsRequest.Merge(m, src)
}
func (m *QuerySubaccountDepositsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositsRequest proto.InternalMessageInfo

func (m *QuerySubaccountDepositsRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountDepositsRequest) GetSubaccount() *Subaccount {
	if m != nil {
		return m.Subaccount
	}
	return nil
}

// QuerySubaccountDepositsResponse is the response type for the Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositsResponse struct {
	Deposits map[string]*Deposit `protobuf:"bytes,1,rep,name=deposits,proto3" json:"deposits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QuerySubaccountDepositsResponse) Reset()         { *m = QuerySubaccountDepositsResponse{} }
func (m *QuerySubaccountDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositsResponse) ProtoMessage()    {}
func (*QuerySubaccountDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{5}
}
func (m *QuerySubaccountDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositsResponse.Merge(m, src)
}
func (m *QuerySubaccountDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositsResponse proto.InternalMessageInfo

func (m *QuerySubaccountDepositsResponse) GetDeposits() map[string]*Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// QueryExchangeBalancesRequest is the request type for the Query/ExchangeBalances RPC method.
type QueryExchangeBalancesRequest struct {
}

func (m *QueryExchangeBalancesRequest) Reset()         { *m = QueryExchangeBalancesRequest{} }
func (m *QueryExchangeBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeBalancesRequest) ProtoMessage()    {}
func (*QueryExchangeBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{6}
}
func (m *QueryExchangeBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeBalancesRequest.Merge(m, src)
}
func (m *QueryExchangeBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeBalancesRequest proto.InternalMessageInfo

// QuerySubaccountDepositsResponse is the response type for the Query/SubaccountDeposits RPC method.
type QueryExchangeBalancesResponse struct {
	Balances []Balance `protobuf:"bytes,1,rep,name=balances,proto3" json:"balances"`
}

func (m *QueryExchangeBalancesResponse) Reset()         { *m = QueryExchangeBalancesResponse{} }
func (m *QueryExchangeBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExchangeBalancesResponse) ProtoMessage()    {}
func (*QueryExchangeBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{7}
}
func (m *QueryExchangeBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExchangeBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExchangeBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExchangeBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExchangeBalancesResponse.Merge(m, src)
}
func (m *QueryExchangeBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExchangeBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExchangeBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExchangeBalancesResponse proto.InternalMessageInfo

func (m *QueryExchangeBalancesResponse) GetBalances() []Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

// QuerySubaccountDepositsRequest is the request type for the Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	Denom        string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QuerySubaccountDepositRequest) Reset()         { *m = QuerySubaccountDepositRequest{} }
func (m *QuerySubaccountDepositRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositRequest) ProtoMessage()    {}
func (*QuerySubaccountDepositRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{8}
}
func (m *QuerySubaccountDepositRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositRequest.Merge(m, src)
}
func (m *QuerySubaccountDepositRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositRequest proto.InternalMessageInfo

func (m *QuerySubaccountDepositRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountDepositRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QuerySubaccountDepositsResponse is the response type for the Query/SubaccountDeposits RPC method.
type QuerySubaccountDepositResponse struct {
	Deposits *Deposit `protobuf:"bytes,1,opt,name=deposits,proto3" json:"deposits,omitempty"`
}

func (m *QuerySubaccountDepositResponse) Reset()         { *m = QuerySubaccountDepositResponse{} }
func (m *QuerySubaccountDepositResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountDepositResponse) ProtoMessage()    {}
func (*QuerySubaccountDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{9}
}
func (m *QuerySubaccountDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountDepositResponse.Merge(m, src)
}
func (m *QuerySubaccountDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountDepositResponse proto.InternalMessageInfo

func (m *QuerySubaccountDepositResponse) GetDeposits() *Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

// QuerySpotMarketsRequest is the request type for the Query/SpotMarkets RPC method.
type QuerySpotMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QuerySpotMarketsRequest) Reset()         { *m = QuerySpotMarketsRequest{} }
func (m *QuerySpotMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketsRequest) ProtoMessage()    {}
func (*QuerySpotMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{10}
}
func (m *QuerySpotMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketsRequest.Merge(m, src)
}
func (m *QuerySpotMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketsRequest proto.InternalMessageInfo

func (m *QuerySpotMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// QuerySpotMarketsResponse is the response type for the Query/SpotMarkets RPC method.
type QuerySpotMarketsResponse struct {
	Markets []*SpotMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QuerySpotMarketsResponse) Reset()         { *m = QuerySpotMarketsResponse{} }
func (m *QuerySpotMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketsResponse) ProtoMessage()    {}
func (*QuerySpotMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{11}
}
func (m *QuerySpotMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketsResponse.Merge(m, src)
}
func (m *QuerySpotMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketsResponse proto.InternalMessageInfo

func (m *QuerySpotMarketsResponse) GetMarkets() []*SpotMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QuerySpotMarketRequest is the request type for the Query/SpotMarket RPC method.
type QuerySpotMarketRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySpotMarketRequest) Reset()         { *m = QuerySpotMarketRequest{} }
func (m *QuerySpotMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketRequest) ProtoMessage()    {}
func (*QuerySpotMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{12}
}
func (m *QuerySpotMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketRequest.Merge(m, src)
}
func (m *QuerySpotMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketRequest proto.InternalMessageInfo

func (m *QuerySpotMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySpotMarketResponse is the response type for the Query/SpotMarket RPC method.
type QuerySpotMarketResponse struct {
	Market *SpotMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QuerySpotMarketResponse) Reset()         { *m = QuerySpotMarketResponse{} }
func (m *QuerySpotMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMarketResponse) ProtoMessage()    {}
func (*QuerySpotMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{13}
}
func (m *QuerySpotMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMarketResponse.Merge(m, src)
}
func (m *QuerySpotMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMarketResponse proto.InternalMessageInfo

func (m *QuerySpotMarketResponse) GetMarket() *SpotMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

// QuerySpotOrderbookRequest is the request type for the Query/SpotOrderbook RPC method.
type QuerySpotOrderbookRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Limit    uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QuerySpotOrderbookRequest) Reset()         { *m = QuerySpotOrderbookRequest{} }
func (m *QuerySpotOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderbookRequest) ProtoMessage()    {}
func (*QuerySpotOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{14}
}
func (m *QuerySpotOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderbookRequest.Merge(m, src)
}
func (m *QuerySpotOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderbookRequest proto.InternalMessageInfo

func (m *QuerySpotOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QuerySpotOrderbookRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QuerySpotOrderbookResponse is the response type for the Query/SpotOrderbook RPC method.
type QuerySpotOrderbookResponse struct {
	BuysPriceLevel  []*PriceLevel `protobuf:"bytes,1,rep,name=buys_price_level,json=buysPriceLevel,proto3" json:"buys_price_level,omitempty"`
	SellsPriceLevel []*PriceLevel `protobuf:"bytes,2,rep,name=sells_price_level,json=sellsPriceLevel,proto3" json:"sells_price_level,omitempty"`
}

func (m *QuerySpotOrderbookResponse) Reset()         { *m = QuerySpotOrderbookResponse{} }
func (m *QuerySpotOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotOrderbookResponse) ProtoMessage()    {}
func (*QuerySpotOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{15}
}
func (m *QuerySpotOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotOrderbookResponse.Merge(m, src)
}
func (m *QuerySpotOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotOrderbookResponse proto.InternalMessageInfo

func (m *QuerySpotOrderbookResponse) GetBuysPriceLevel() []*PriceLevel {
	if m != nil {
		return m.BuysPriceLevel
	}
	return nil
}

func (m *QuerySpotOrderbookResponse) GetSellsPriceLevel() []*PriceLevel {
	if m != nil {
		return m.SellsPriceLevel
	}
	return nil
}

// QueryTraderSpotOrdersRequest is the request type for the Query/TraderSpotOrders RPC method.
type QueryTraderSpotOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryTraderSpotOrdersRequest) Reset()         { *m = QueryTraderSpotOrdersRequest{} }
func (m *QueryTraderSpotOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderSpotOrdersRequest) ProtoMessage()    {}
func (*QueryTraderSpotOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{16}
}
func (m *QueryTraderSpotOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderSpotOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderSpotOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderSpotOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderSpotOrdersRequest.Merge(m, src)
}
func (m *QueryTraderSpotOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderSpotOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderSpotOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderSpotOrdersRequest proto.InternalMessageInfo

func (m *QueryTraderSpotOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderSpotOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

type TrimmedSpotLimitOrder struct {
	// price of the order
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// quantity of the order
	Quantity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity"`
	// the amount of the quantity remaining fillable
	Fillable github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=fillable,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fillable"`
	// true if the order is a buy
	IsBuy     bool   `protobuf:"varint,4,opt,name=isBuy,proto3" json:"isBuy,omitempty"`
	OrderHash string `protobuf:"bytes,5,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *TrimmedSpotLimitOrder) Reset()         { *m = TrimmedSpotLimitOrder{} }
func (m *TrimmedSpotLimitOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedSpotLimitOrder) ProtoMessage()    {}
func (*TrimmedSpotLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{17}
}
func (m *TrimmedSpotLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedSpotLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedSpotLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedSpotLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedSpotLimitOrder.Merge(m, src)
}
func (m *TrimmedSpotLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedSpotLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedSpotLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedSpotLimitOrder proto.InternalMessageInfo

func (m *TrimmedSpotLimitOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TrimmedSpotLimitOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

// QueryTraderSpotOrdersResponse is the response type for the Query/TraderSpotOrders RPC method.
type QueryTraderSpotOrdersResponse struct {
	Orders []*TrimmedSpotLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryTraderSpotOrdersResponse) Reset()         { *m = QueryTraderSpotOrdersResponse{} }
func (m *QueryTraderSpotOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderSpotOrdersResponse) ProtoMessage()    {}
func (*QueryTraderSpotOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{18}
}
func (m *QueryTraderSpotOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderSpotOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderSpotOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderSpotOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderSpotOrdersResponse.Merge(m, src)
}
func (m *QueryTraderSpotOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderSpotOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderSpotOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderSpotOrdersResponse proto.InternalMessageInfo

func (m *QueryTraderSpotOrdersResponse) GetOrders() []*TrimmedSpotLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QuerySpotMidPriceRequest is the request type for the Query/SpotMidPrice RPC method.
type QuerySpotMidPriceRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySpotMidPriceRequest) Reset()         { *m = QuerySpotMidPriceRequest{} }
func (m *QuerySpotMidPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMidPriceRequest) ProtoMessage()    {}
func (*QuerySpotMidPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{19}
}
func (m *QuerySpotMidPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMidPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMidPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMidPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMidPriceRequest.Merge(m, src)
}
func (m *QuerySpotMidPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMidPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMidPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMidPriceRequest proto.InternalMessageInfo

func (m *QuerySpotMidPriceRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySpotMidPriceResponse is the response type for the Query/SpotMidPrice RPC method.
type QuerySpotMidPriceResponse struct {
	// mid price of the market
	Price *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price,omitempty"`
}

func (m *QuerySpotMidPriceResponse) Reset()         { *m = QuerySpotMidPriceResponse{} }
func (m *QuerySpotMidPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpotMidPriceResponse) ProtoMessage()    {}
func (*QuerySpotMidPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{20}
}
func (m *QuerySpotMidPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpotMidPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpotMidPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpotMidPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpotMidPriceResponse.Merge(m, src)
}
func (m *QuerySpotMidPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpotMidPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpotMidPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpotMidPriceResponse proto.InternalMessageInfo

// QueryDerivativeMidPriceRequest is the request type for the Query/DerivativeMidPrice RPC method.
type QueryDerivativeMidPriceRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMidPriceRequest) Reset()         { *m = QueryDerivativeMidPriceRequest{} }
func (m *QueryDerivativeMidPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMidPriceRequest) ProtoMessage()    {}
func (*QueryDerivativeMidPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{21}
}
func (m *QueryDerivativeMidPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMidPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMidPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMidPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMidPriceRequest.Merge(m, src)
}
func (m *QueryDerivativeMidPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMidPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMidPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMidPriceRequest proto.InternalMessageInfo

func (m *QueryDerivativeMidPriceRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMidPriceResponse is the response type for the Query/DerivativeMidPrice RPC method.
type QueryDerivativeMidPriceResponse struct {
	// mid price of the market
	Price *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price,omitempty"`
}

func (m *QueryDerivativeMidPriceResponse) Reset()         { *m = QueryDerivativeMidPriceResponse{} }
func (m *QueryDerivativeMidPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMidPriceResponse) ProtoMessage()    {}
func (*QueryDerivativeMidPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{22}
}
func (m *QueryDerivativeMidPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMidPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMidPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMidPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMidPriceResponse.Merge(m, src)
}
func (m *QueryDerivativeMidPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMidPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMidPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMidPriceResponse proto.InternalMessageInfo

// QueryDerivativeOrderbookRequest is the request type for the Query/DerivativeOrderbook RPC method.
type QueryDerivativeOrderbookRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Limit    uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryDerivativeOrderbookRequest) Reset()         { *m = QueryDerivativeOrderbookRequest{} }
func (m *QueryDerivativeOrderbookRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrderbookRequest) ProtoMessage()    {}
func (*QueryDerivativeOrderbookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{23}
}
func (m *QueryDerivativeOrderbookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrderbookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrderbookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrderbookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrderbookRequest.Merge(m, src)
}
func (m *QueryDerivativeOrderbookRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrderbookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrderbookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrderbookRequest proto.InternalMessageInfo

func (m *QueryDerivativeOrderbookRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryDerivativeOrderbookRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryDerivativeOrderbookResponse is the response type for the Query/DerivativeOrderbook RPC method.
type QueryDerivativeOrderbookResponse struct {
	BuysPriceLevel  []*PriceLevel `protobuf:"bytes,1,rep,name=buys_price_level,json=buysPriceLevel,proto3" json:"buys_price_level,omitempty"`
	SellsPriceLevel []*PriceLevel `protobuf:"bytes,2,rep,name=sells_price_level,json=sellsPriceLevel,proto3" json:"sells_price_level,omitempty"`
}

func (m *QueryDerivativeOrderbookResponse) Reset()         { *m = QueryDerivativeOrderbookResponse{} }
func (m *QueryDerivativeOrderbookResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeOrderbookResponse) ProtoMessage()    {}
func (*QueryDerivativeOrderbookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{24}
}
func (m *QueryDerivativeOrderbookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeOrderbookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeOrderbookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeOrderbookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeOrderbookResponse.Merge(m, src)
}
func (m *QueryDerivativeOrderbookResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeOrderbookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeOrderbookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeOrderbookResponse proto.InternalMessageInfo

func (m *QueryDerivativeOrderbookResponse) GetBuysPriceLevel() []*PriceLevel {
	if m != nil {
		return m.BuysPriceLevel
	}
	return nil
}

func (m *QueryDerivativeOrderbookResponse) GetSellsPriceLevel() []*PriceLevel {
	if m != nil {
		return m.SellsPriceLevel
	}
	return nil
}

// QueryTraderDerivativeOrdersRequest is the request type for the Query/TraderDerivativeOrders RPC method.
type QueryTraderDerivativeOrdersRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// SubaccountID of the trader
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryTraderDerivativeOrdersRequest) Reset()         { *m = QueryTraderDerivativeOrdersRequest{} }
func (m *QueryTraderDerivativeOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTraderDerivativeOrdersRequest) ProtoMessage()    {}
func (*QueryTraderDerivativeOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{25}
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeOrdersRequest.Merge(m, src)
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeOrdersRequest proto.InternalMessageInfo

func (m *QueryTraderDerivativeOrdersRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryTraderDerivativeOrdersRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

type TrimmedDerivativeLimitOrder struct {
	// price of the order
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// quantity of the order
	Quantity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity"`
	// margin of the order
	Margin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=margin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"margin"`
	// the amount of the quantity remaining fillable
	Fillable github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=fillable,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"fillable"`
	// true if the order is a buy
	IsBuy     bool   `protobuf:"varint,5,opt,name=isBuy,proto3" json:"isBuy"`
	OrderHash string `protobuf:"bytes,6,opt,name=order_hash,json=orderHash,proto3" json:"order_hash,omitempty"`
}

func (m *TrimmedDerivativeLimitOrder) Reset()         { *m = TrimmedDerivativeLimitOrder{} }
func (m *TrimmedDerivativeLimitOrder) String() string { return proto.CompactTextString(m) }
func (*TrimmedDerivativeLimitOrder) ProtoMessage()    {}
func (*TrimmedDerivativeLimitOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{26}
}
func (m *TrimmedDerivativeLimitOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrimmedDerivativeLimitOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrimmedDerivativeLimitOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrimmedDerivativeLimitOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrimmedDerivativeLimitOrder.Merge(m, src)
}
func (m *TrimmedDerivativeLimitOrder) XXX_Size() int {
	return m.Size()
}
func (m *TrimmedDerivativeLimitOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TrimmedDerivativeLimitOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TrimmedDerivativeLimitOrder proto.InternalMessageInfo

func (m *TrimmedDerivativeLimitOrder) GetIsBuy() bool {
	if m != nil {
		return m.IsBuy
	}
	return false
}

func (m *TrimmedDerivativeLimitOrder) GetOrderHash() string {
	if m != nil {
		return m.OrderHash
	}
	return ""
}

// QueryTraderDerivativeOrdersResponse is the response type for the Query/TraderDerivativeOrders RPC method.
type QueryTraderDerivativeOrdersResponse struct {
	Orders []*TrimmedDerivativeLimitOrder `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (m *QueryTraderDerivativeOrdersResponse) Reset()         { *m = QueryTraderDerivativeOrdersResponse{} }
func (m *QueryTraderDerivativeOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTraderDerivativeOrdersResponse) ProtoMessage()    {}
func (*QueryTraderDerivativeOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{27}
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTraderDerivativeOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTraderDerivativeOrdersResponse.Merge(m, src)
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTraderDerivativeOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTraderDerivativeOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTraderDerivativeOrdersResponse proto.InternalMessageInfo

func (m *QueryTraderDerivativeOrdersResponse) GetOrders() []*TrimmedDerivativeLimitOrder {
	if m != nil {
		return m.Orders
	}
	return nil
}

// QueryDerivativeMarketsRequest is the request type for the Query/DerivativeMarkets RPC method.
type QueryDerivativeMarketsRequest struct {
	// Status of the market, for convenience it is set to string - not enum
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryDerivativeMarketsRequest) Reset()         { *m = QueryDerivativeMarketsRequest{} }
func (m *QueryDerivativeMarketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{28}
}
func (m *QueryDerivativeMarketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketsRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type PriceLevel struct {
	Price github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=price,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"price"`
	// quantity
	Quantity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity"`
}

func (m *PriceLevel) Reset()         { *m = PriceLevel{} }
func (m *PriceLevel) String() string { return proto.CompactTextString(m) }
func (*PriceLevel) ProtoMessage()    {}
func (*PriceLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{29}
}
func (m *PriceLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PriceLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PriceLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PriceLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PriceLevel.Merge(m, src)
}
func (m *PriceLevel) XXX_Size() int {
	return m.Size()
}
func (m *PriceLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_PriceLevel.DiscardUnknown(m)
}

var xxx_messageInfo_PriceLevel proto.InternalMessageInfo

type PerpetualMarketState struct {
	MarketInfo  *PerpetualMarketInfo    `protobuf:"bytes,1,opt,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty"`
	FundingInfo *PerpetualMarketFunding `protobuf:"bytes,2,opt,name=funding_info,json=fundingInfo,proto3" json:"funding_info,omitempty"`
}

func (m *PerpetualMarketState) Reset()         { *m = PerpetualMarketState{} }
func (m *PerpetualMarketState) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarketState) ProtoMessage()    {}
func (*PerpetualMarketState) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{30}
}
func (m *PerpetualMarketState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarketState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarketState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarketState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarketState.Merge(m, src)
}
func (m *PerpetualMarketState) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarketState) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarketState.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarketState proto.InternalMessageInfo

func (m *PerpetualMarketState) GetMarketInfo() *PerpetualMarketInfo {
	if m != nil {
		return m.MarketInfo
	}
	return nil
}

func (m *PerpetualMarketState) GetFundingInfo() *PerpetualMarketFunding {
	if m != nil {
		return m.FundingInfo
	}
	return nil
}

type FullDerivativeMarket struct {
	Market *DerivativeMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	// Types that are valid to be assigned to Info:
	//	*FullDerivativeMarket_PerpetualInfo
	//	*FullDerivativeMarket_FuturesInfo
	Info      isFullDerivativeMarket_Info            `protobuf_oneof:"info"`
	MarkPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=mark_price,json=markPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mark_price"`
}

func (m *FullDerivativeMarket) Reset()         { *m = FullDerivativeMarket{} }
func (m *FullDerivativeMarket) String() string { return proto.CompactTextString(m) }
func (*FullDerivativeMarket) ProtoMessage()    {}
func (*FullDerivativeMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{31}
}
func (m *FullDerivativeMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullDerivativeMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullDerivativeMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullDerivativeMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullDerivativeMarket.Merge(m, src)
}
func (m *FullDerivativeMarket) XXX_Size() int {
	return m.Size()
}
func (m *FullDerivativeMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_FullDerivativeMarket.DiscardUnknown(m)
}

var xxx_messageInfo_FullDerivativeMarket proto.InternalMessageInfo

type isFullDerivativeMarket_Info interface {
	isFullDerivativeMarket_Info()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FullDerivativeMarket_PerpetualInfo struct {
	PerpetualInfo *PerpetualMarketState `protobuf:"bytes,2,opt,name=perpetual_info,json=perpetualInfo,proto3,oneof" json:"perpetual_info,omitempty"`
}
type FullDerivativeMarket_FuturesInfo struct {
	FuturesInfo *ExpiryFuturesMarketInfo `protobuf:"bytes,3,opt,name=futures_info,json=futuresInfo,proto3,oneof" json:"futures_info,omitempty"`
}

func (*FullDerivativeMarket_PerpetualInfo) isFullDerivativeMarket_Info() {}
func (*FullDerivativeMarket_FuturesInfo) isFullDerivativeMarket_Info()   {}

func (m *FullDerivativeMarket) GetInfo() isFullDerivativeMarket_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *FullDerivativeMarket) GetMarket() *DerivativeMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

func (m *FullDerivativeMarket) GetPerpetualInfo() *PerpetualMarketState {
	if x, ok := m.GetInfo().(*FullDerivativeMarket_PerpetualInfo); ok {
		return x.PerpetualInfo
	}
	return nil
}

func (m *FullDerivativeMarket) GetFuturesInfo() *ExpiryFuturesMarketInfo {
	if x, ok := m.GetInfo().(*FullDerivativeMarket_FuturesInfo); ok {
		return x.FuturesInfo
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FullDerivativeMarket) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FullDerivativeMarket_PerpetualInfo)(nil),
		(*FullDerivativeMarket_FuturesInfo)(nil),
	}
}

// QueryDerivativeMarketsResponse is the response type for the Query/DerivativeMarkets RPC method.
type QueryDerivativeMarketsResponse struct {
	Markets []*FullDerivativeMarket `protobuf:"bytes,1,rep,name=markets,proto3" json:"markets,omitempty"`
}

func (m *QueryDerivativeMarketsResponse) Reset()         { *m = QueryDerivativeMarketsResponse{} }
func (m *QueryDerivativeMarketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketsResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{32}
}
func (m *QueryDerivativeMarketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketsResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketsResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketsResponse) GetMarkets() []*FullDerivativeMarket {
	if m != nil {
		return m.Markets
	}
	return nil
}

// QueryDerivativeMarketRequest is the request type for the Query/DerivativeMarket RPC method.
type QueryDerivativeMarketRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMarketRequest) Reset()         { *m = QueryDerivativeMarketRequest{} }
func (m *QueryDerivativeMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{33}
}
func (m *QueryDerivativeMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMarketResponse is the response type for the Query/DerivativeMarket RPC method.
type QueryDerivativeMarketResponse struct {
	Market *FullDerivativeMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (m *QueryDerivativeMarketResponse) Reset()         { *m = QueryDerivativeMarketResponse{} }
func (m *QueryDerivativeMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{34}
}
func (m *QueryDerivativeMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketResponse) GetMarket() *FullDerivativeMarket {
	if m != nil {
		return m.Market
	}
	return nil
}

// QueryDerivativeMarketAddressRequest is the request type for the Query/DerivativeMarketAddress RPC method.
type QueryDerivativeMarketAddressRequest struct {
	// Market ID for the market
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryDerivativeMarketAddressRequest) Reset()         { *m = QueryDerivativeMarketAddressRequest{} }
func (m *QueryDerivativeMarketAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketAddressRequest) ProtoMessage()    {}
func (*QueryDerivativeMarketAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{35}
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketAddressRequest.Merge(m, src)
}
func (m *QueryDerivativeMarketAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketAddressRequest proto.InternalMessageInfo

func (m *QueryDerivativeMarketAddressRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryDerivativeMarketAddressResponse is the response type for the Query/DerivativeMarketAddress RPC method.
type QueryDerivativeMarketAddressResponse struct {
	// address for the market
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// subaccountID for the market
	SubaccountId string `protobuf:"bytes,2,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QueryDerivativeMarketAddressResponse) Reset()         { *m = QueryDerivativeMarketAddressResponse{} }
func (m *QueryDerivativeMarketAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDerivativeMarketAddressResponse) ProtoMessage()    {}
func (*QueryDerivativeMarketAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{36}
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDerivativeMarketAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDerivativeMarketAddressResponse.Merge(m, src)
}
func (m *QueryDerivativeMarketAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDerivativeMarketAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDerivativeMarketAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDerivativeMarketAddressResponse proto.InternalMessageInfo

func (m *QueryDerivativeMarketAddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryDerivativeMarketAddressResponse) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountTradeNonceRequest is the request type for the Query/SubaccountTradeNonce RPC method.
type QuerySubaccountTradeNonceRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountTradeNonceRequest) Reset()         { *m = QuerySubaccountTradeNonceRequest{} }
func (m *QuerySubaccountTradeNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountTradeNonceRequest) ProtoMessage()    {}
func (*QuerySubaccountTradeNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{37}
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountTradeNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountTradeNonceRequest.Merge(m, src)
}
func (m *QuerySubaccountTradeNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountTradeNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountTradeNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountTradeNonceRequest proto.InternalMessageInfo

func (m *QuerySubaccountTradeNonceRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionsRequest is the request type for the Query/SubaccountPositions RPC method.
type QuerySubaccountPositionsRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountPositionsRequest) Reset()         { *m = QuerySubaccountPositionsRequest{} }
func (m *QuerySubaccountPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionsRequest) ProtoMessage()    {}
func (*QuerySubaccountPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{38}
}
func (m *QuerySubaccountPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionsRequest.Merge(m, src)
}
func (m *QuerySubaccountPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionsRequest proto.InternalMessageInfo

func (m *QuerySubaccountPositionsRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionInMarketRequest is the request type for the Query/SubaccountPositionInMarket RPC method.
type QuerySubaccountPositionInMarketRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySubaccountPositionInMarketRequest) Reset() {
	*m = QuerySubaccountPositionInMarketRequest{}
}
func (m *QuerySubaccountPositionInMarketRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionInMarketRequest) ProtoMessage()    {}
func (*QuerySubaccountPositionInMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{39}
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionInMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionInMarketRequest.Merge(m, src)
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionInMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionInMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionInMarketRequest proto.InternalMessageInfo

func (m *QuerySubaccountPositionInMarketRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountPositionInMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySubaccountEffectivePositionInMarketRequest is the request type for the Query/SubaccountEffectivePositionInMarket RPC method.
type QuerySubaccountEffectivePositionInMarketRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketId     string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Reset() {
	*m = QuerySubaccountEffectivePositionInMarketRequest{}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubaccountEffectivePositionInMarketRequest) ProtoMessage() {}
func (*QuerySubaccountEffectivePositionInMarketRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{40}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.Merge(m, src)
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountEffectivePositionInMarketRequest proto.InternalMessageInfo

func (m *QuerySubaccountEffectivePositionInMarketRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QuerySubaccountOrderMetadataRequest is the request type for the Query/SubaccountOrderMetadata RPC method.
type QuerySubaccountOrderMetadataRequest struct {
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
}

func (m *QuerySubaccountOrderMetadataRequest) Reset()         { *m = QuerySubaccountOrderMetadataRequest{} }
func (m *QuerySubaccountOrderMetadataRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrderMetadataRequest) ProtoMessage()    {}
func (*QuerySubaccountOrderMetadataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{41}
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrderMetadataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrderMetadataRequest.Merge(m, src)
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrderMetadataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrderMetadataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrderMetadataRequest proto.InternalMessageInfo

func (m *QuerySubaccountOrderMetadataRequest) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

// QuerySubaccountPositionsResponse is the response type for the Query/SubaccountPositions RPC method.
type QuerySubaccountPositionsResponse struct {
	State []DerivativePosition `protobuf:"bytes,1,rep,name=state,proto3" json:"state"`
}

func (m *QuerySubaccountPositionsResponse) Reset()         { *m = QuerySubaccountPositionsResponse{} }
func (m *QuerySubaccountPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionsResponse) ProtoMessage()    {}
func (*QuerySubaccountPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{42}
}
func (m *QuerySubaccountPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionsResponse.Merge(m, src)
}
func (m *QuerySubaccountPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionsResponse proto.InternalMessageInfo

func (m *QuerySubaccountPositionsResponse) GetState() []DerivativePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QuerySubaccountPositionInMarketResponse is the response type for the Query/SubaccountPositionInMarket RPC method.
type QuerySubaccountPositionInMarketResponse struct {
	State *Position `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QuerySubaccountPositionInMarketResponse) Reset() {
	*m = QuerySubaccountPositionInMarketResponse{}
}
func (m *QuerySubaccountPositionInMarketResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountPositionInMarketResponse) ProtoMessage()    {}
func (*QuerySubaccountPositionInMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{43}
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountPositionInMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountPositionInMarketResponse.Merge(m, src)
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountPositionInMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountPositionInMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountPositionInMarketResponse proto.InternalMessageInfo

func (m *QuerySubaccountPositionInMarketResponse) GetState() *Position {
	if m != nil {
		return m.State
	}
	return nil
}

type EffectivePosition struct {
	IsLong          bool                                   `protobuf:"varint,1,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	Quantity        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"quantity"`
	EntryPrice      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=entry_price,json=entryPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"entry_price"`
	EffectiveMargin github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=effective_margin,json=effectiveMargin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"effective_margin"`
}

func (m *EffectivePosition) Reset()         { *m = EffectivePosition{} }
func (m *EffectivePosition) String() string { return proto.CompactTextString(m) }
func (*EffectivePosition) ProtoMessage()    {}
func (*EffectivePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{44}
}
func (m *EffectivePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EffectivePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EffectivePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EffectivePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EffectivePosition.Merge(m, src)
}
func (m *EffectivePosition) XXX_Size() int {
	return m.Size()
}
func (m *EffectivePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_EffectivePosition.DiscardUnknown(m)
}

var xxx_messageInfo_EffectivePosition proto.InternalMessageInfo

func (m *EffectivePosition) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

// QuerySubaccountEffectivePositionInMarketResponse is the response type for the Query/SubaccountEffectivePositionInMarket RPC method.
type QuerySubaccountEffectivePositionInMarketResponse struct {
	State *EffectivePosition `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Reset() {
	*m = QuerySubaccountEffectivePositionInMarketResponse{}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QuerySubaccountEffectivePositionInMarketResponse) ProtoMessage() {}
func (*QuerySubaccountEffectivePositionInMarketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{45}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.Merge(m, src)
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountEffectivePositionInMarketResponse proto.InternalMessageInfo

func (m *QuerySubaccountEffectivePositionInMarketResponse) GetState() *EffectivePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryPerpetualMarketInfoRequest is the request type for the Query/PerpetualMarketInfo RPC method.
type QueryPerpetualMarketInfoRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryPerpetualMarketInfoRequest) Reset()         { *m = QueryPerpetualMarketInfoRequest{} }
func (m *QueryPerpetualMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketInfoRequest) ProtoMessage()    {}
func (*QueryPerpetualMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{46}
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketInfoRequest.Merge(m, src)
}
func (m *QueryPerpetualMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketInfoRequest proto.InternalMessageInfo

func (m *QueryPerpetualMarketInfoRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryPerpetualMarketInfoResponse is the response type for the Query/PerpetualMarketInfo RPC method.
type QueryPerpetualMarketInfoResponse struct {
	Info PerpetualMarketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryPerpetualMarketInfoResponse) Reset()         { *m = QueryPerpetualMarketInfoResponse{} }
func (m *QueryPerpetualMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketInfoResponse) ProtoMessage()    {}
func (*QueryPerpetualMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{47}
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketInfoResponse.Merge(m, src)
}
func (m *QueryPerpetualMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketInfoResponse proto.InternalMessageInfo

func (m *QueryPerpetualMarketInfoResponse) GetInfo() PerpetualMarketInfo {
	if m != nil {
		return m.Info
	}
	return PerpetualMarketInfo{}
}

// QueryExpiryFuturesMarketInfoRequest is the request type for the Query/ ExpiryFuturesMarketInfo RPC method.
type QueryExpiryFuturesMarketInfoRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryExpiryFuturesMarketInfoRequest) Reset()         { *m = QueryExpiryFuturesMarketInfoRequest{} }
func (m *QueryExpiryFuturesMarketInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExpiryFuturesMarketInfoRequest) ProtoMessage()    {}
func (*QueryExpiryFuturesMarketInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{48}
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.Merge(m, src)
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiryFuturesMarketInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiryFuturesMarketInfoRequest proto.InternalMessageInfo

func (m *QueryExpiryFuturesMarketInfoRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryExpiryFuturesMarketInfoResponse is the response type for the Query/ ExpiryFuturesMarketInfo RPC method.
type QueryExpiryFuturesMarketInfoResponse struct {
	Info ExpiryFuturesMarketInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info"`
}

func (m *QueryExpiryFuturesMarketInfoResponse) Reset()         { *m = QueryExpiryFuturesMarketInfoResponse{} }
func (m *QueryExpiryFuturesMarketInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExpiryFuturesMarketInfoResponse) ProtoMessage()    {}
func (*QueryExpiryFuturesMarketInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{49}
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.Merge(m, src)
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExpiryFuturesMarketInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExpiryFuturesMarketInfoResponse proto.InternalMessageInfo

func (m *QueryExpiryFuturesMarketInfoResponse) GetInfo() ExpiryFuturesMarketInfo {
	if m != nil {
		return m.Info
	}
	return ExpiryFuturesMarketInfo{}
}

// QueryPerpetualMarketFundingRequest is the request type for the Query/PerpetualMarketFunding RPC method.
type QueryPerpetualMarketFundingRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryPerpetualMarketFundingRequest) Reset()         { *m = QueryPerpetualMarketFundingRequest{} }
func (m *QueryPerpetualMarketFundingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketFundingRequest) ProtoMessage()    {}
func (*QueryPerpetualMarketFundingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{50}
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketFundingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketFundingRequest.Merge(m, src)
}
func (m *QueryPerpetualMarketFundingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketFundingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketFundingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketFundingRequest proto.InternalMessageInfo

func (m *QueryPerpetualMarketFundingRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// QueryPerpetualMarketFundingResponse is the response type for the Query/PerpetualMarketFunding RPC method.
type QueryPerpetualMarketFundingResponse struct {
	State PerpetualMarketFunding `protobuf:"bytes,1,opt,name=state,proto3" json:"state"`
}

func (m *QueryPerpetualMarketFundingResponse) Reset()         { *m = QueryPerpetualMarketFundingResponse{} }
func (m *QueryPerpetualMarketFundingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualMarketFundingResponse) ProtoMessage()    {}
func (*QueryPerpetualMarketFundingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{51}
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualMarketFundingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualMarketFundingResponse.Merge(m, src)
}
func (m *QueryPerpetualMarketFundingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualMarketFundingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualMarketFundingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualMarketFundingResponse proto.InternalMessageInfo

func (m *QueryPerpetualMarketFundingResponse) GetState() PerpetualMarketFunding {
	if m != nil {
		return m.State
	}
	return PerpetualMarketFunding{}
}

// QuerySubaccountOrderMetadataResponse is the response type for the Query/SubaccountOrderMetadata RPC method.
type QuerySubaccountOrderMetadataResponse struct {
	Metadata []SubaccountOrderbookMetadataWithMarket `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata"`
}

func (m *QuerySubaccountOrderMetadataResponse) Reset()         { *m = QuerySubaccountOrderMetadataResponse{} }
func (m *QuerySubaccountOrderMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountOrderMetadataResponse) ProtoMessage()    {}
func (*QuerySubaccountOrderMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{52}
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountOrderMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountOrderMetadataResponse.Merge(m, src)
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountOrderMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountOrderMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountOrderMetadataResponse proto.InternalMessageInfo

func (m *QuerySubaccountOrderMetadataResponse) GetMetadata() []SubaccountOrderbookMetadataWithMarket {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// QuerySubaccountTradeNonceResponse is the response type for the Query/SubaccountTradeNonce RPC method.
type QuerySubaccountTradeNonceResponse struct {
	Nonce uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QuerySubaccountTradeNonceResponse) Reset()         { *m = QuerySubaccountTradeNonceResponse{} }
func (m *QuerySubaccountTradeNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySubaccountTradeNonceResponse) ProtoMessage()    {}
func (*QuerySubaccountTradeNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{53}
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySubaccountTradeNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySubaccountTradeNonceResponse.Merge(m, src)
}
func (m *QuerySubaccountTradeNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySubaccountTradeNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySubaccountTradeNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySubaccountTradeNonceResponse proto.InternalMessageInfo

func (m *QuerySubaccountTradeNonceResponse) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryModuleStateRequest is the request type for the Query/ExchangeModuleState RPC method.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{54}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateResponse is the response type for the Query/ExchangeModuleState RPC method.
type QueryModuleStateResponse struct {
	State *GenesisState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{55}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetState() *GenesisState {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryPositionsRequest is the request type for the Query/Positions RPC method.
type QueryPositionsRequest struct {
}

func (m *QueryPositionsRequest) Reset()         { *m = QueryPositionsRequest{} }
func (m *QueryPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsRequest) ProtoMessage()    {}
func (*QueryPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{56}
}
func (m *QueryPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsRequest.Merge(m, src)
}
func (m *QueryPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsRequest proto.InternalMessageInfo

// QueryPositionsResponse is the response type for the Query/Positions RPC method.
type QueryPositionsResponse struct {
	State []DerivativePosition `protobuf:"bytes,1,rep,name=state,proto3" json:"state"`
}

func (m *QueryPositionsResponse) Reset()         { *m = QueryPositionsResponse{} }
func (m *QueryPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPositionsResponse) ProtoMessage()    {}
func (*QueryPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{57}
}
func (m *QueryPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPositionsResponse.Merge(m, src)
}
func (m *QueryPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPositionsResponse proto.InternalMessageInfo

func (m *QueryPositionsResponse) GetState() []DerivativePosition {
	if m != nil {
		return m.State
	}
	return nil
}

// QueryTradeRewardPointsRequest is the request type for the Query/TradeRewardPoints RPC method.
type QueryTradeRewardPointsRequest struct {
	Accounts             []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	PendingPoolTimestamp int64    `protobuf:"varint,2,opt,name=pending_pool_timestamp,json=pendingPoolTimestamp,proto3" json:"pending_pool_timestamp,omitempty"`
}

func (m *QueryTradeRewardPointsRequest) Reset()         { *m = QueryTradeRewardPointsRequest{} }
func (m *QueryTradeRewardPointsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardPointsRequest) ProtoMessage()    {}
func (*QueryTradeRewardPointsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{58}
}
func (m *QueryTradeRewardPointsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardPointsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardPointsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardPointsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardPointsRequest.Merge(m, src)
}
func (m *QueryTradeRewardPointsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardPointsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardPointsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardPointsRequest proto.InternalMessageInfo

func (m *QueryTradeRewardPointsRequest) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *QueryTradeRewardPointsRequest) GetPendingPoolTimestamp() int64 {
	if m != nil {
		return m.PendingPoolTimestamp
	}
	return 0
}

// QueryTradeRewardPointsResponse is the response type for the Query/TradeRewardPoints RPC method.
type QueryTradeRewardPointsResponse struct {
	AccountTradeRewardPoints []github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,rep,name=account_trade_reward_points,json=accountTradeRewardPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"account_trade_reward_points"`
}

func (m *QueryTradeRewardPointsResponse) Reset()         { *m = QueryTradeRewardPointsResponse{} }
func (m *QueryTradeRewardPointsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardPointsResponse) ProtoMessage()    {}
func (*QueryTradeRewardPointsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{59}
}
func (m *QueryTradeRewardPointsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardPointsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardPointsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardPointsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardPointsResponse.Merge(m, src)
}
func (m *QueryTradeRewardPointsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardPointsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardPointsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardPointsResponse proto.InternalMessageInfo

// QueryTradeRewardCampaignRequest is the request type for the Query/TradeRewardCampaign RPC method.
type QueryTradeRewardCampaignRequest struct {
}

func (m *QueryTradeRewardCampaignRequest) Reset()         { *m = QueryTradeRewardCampaignRequest{} }
func (m *QueryTradeRewardCampaignRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardCampaignRequest) ProtoMessage()    {}
func (*QueryTradeRewardCampaignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{60}
}
func (m *QueryTradeRewardCampaignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardCampaignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardCampaignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardCampaignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardCampaignRequest.Merge(m, src)
}
func (m *QueryTradeRewardCampaignRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardCampaignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardCampaignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardCampaignRequest proto.InternalMessageInfo

// QueryTradeRewardCampaignResponse is the response type for the Query/TradeRewardCampaign RPC method.
type QueryTradeRewardCampaignResponse struct {
	TradingRewardCampaignInfo                *TradingRewardCampaignInfo               `protobuf:"bytes,1,opt,name=trading_reward_campaign_info,json=tradingRewardCampaignInfo,proto3" json:"trading_reward_campaign_info,omitempty"`
	TradingRewardPoolCampaignSchedule        []*CampaignRewardPool                    `protobuf:"bytes,2,rep,name=trading_reward_pool_campaign_schedule,json=tradingRewardPoolCampaignSchedule,proto3" json:"trading_reward_pool_campaign_schedule,omitempty"`
	TotalTradeRewardPoints                   github_com_cosmos_cosmos_sdk_types.Dec   `protobuf:"bytes,3,opt,name=total_trade_reward_points,json=totalTradeRewardPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_trade_reward_points"`
	PendingTradingRewardPoolCampaignSchedule []*CampaignRewardPool                    `protobuf:"bytes,4,rep,name=pending_trading_reward_pool_campaign_schedule,json=pendingTradingRewardPoolCampaignSchedule,proto3" json:"pending_trading_reward_pool_campaign_schedule,omitempty"`
	PendingTotalTradeRewardPoints            []github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,rep,name=pending_total_trade_reward_points,json=pendingTotalTradeRewardPoints,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pending_total_trade_reward_points"`
}

func (m *QueryTradeRewardCampaignResponse) Reset()         { *m = QueryTradeRewardCampaignResponse{} }
func (m *QueryTradeRewardCampaignResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTradeRewardCampaignResponse) ProtoMessage()    {}
func (*QueryTradeRewardCampaignResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{61}
}
func (m *QueryTradeRewardCampaignResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTradeRewardCampaignResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTradeRewardCampaignResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTradeRewardCampaignResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTradeRewardCampaignResponse.Merge(m, src)
}
func (m *QueryTradeRewardCampaignResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTradeRewardCampaignResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTradeRewardCampaignResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTradeRewardCampaignResponse proto.InternalMessageInfo

func (m *QueryTradeRewardCampaignResponse) GetTradingRewardCampaignInfo() *TradingRewardCampaignInfo {
	if m != nil {
		return m.TradingRewardCampaignInfo
	}
	return nil
}

func (m *QueryTradeRewardCampaignResponse) GetTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if m != nil {
		return m.TradingRewardPoolCampaignSchedule
	}
	return nil
}

func (m *QueryTradeRewardCampaignResponse) GetPendingTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if m != nil {
		return m.PendingTradingRewardPoolCampaignSchedule
	}
	return nil
}

// QueryIsRegisteredDMMRequest is the request type for the Query/IsRegisteredDMM RPC method.
type QueryIsRegisteredDMMRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryIsRegisteredDMMRequest) Reset()         { *m = QueryIsRegisteredDMMRequest{} }
func (m *QueryIsRegisteredDMMRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsRegisteredDMMRequest) ProtoMessage()    {}
func (*QueryIsRegisteredDMMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{62}
}
func (m *QueryIsRegisteredDMMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsRegisteredDMMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsRegisteredDMMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsRegisteredDMMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsRegisteredDMMRequest.Merge(m, src)
}
func (m *QueryIsRegisteredDMMRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsRegisteredDMMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsRegisteredDMMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsRegisteredDMMRequest proto.InternalMessageInfo

func (m *QueryIsRegisteredDMMRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryIsRegisteredDMMResponse is the response type for the Query/IsRegisteredDMM RPC method.
type QueryIsRegisteredDMMResponse struct {
	IsRegisteredDmm bool `protobuf:"varint,1,opt,name=is_registered_dmm,json=isRegisteredDmm,proto3" json:"is_registered_dmm,omitempty"`
}

func (m *QueryIsRegisteredDMMResponse) Reset()         { *m = QueryIsRegisteredDMMResponse{} }
func (m *QueryIsRegisteredDMMResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsRegisteredDMMResponse) ProtoMessage()    {}
func (*QueryIsRegisteredDMMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{63}
}
func (m *QueryIsRegisteredDMMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsRegisteredDMMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsRegisteredDMMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsRegisteredDMMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsRegisteredDMMResponse.Merge(m, src)
}
func (m *QueryIsRegisteredDMMResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsRegisteredDMMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsRegisteredDMMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsRegisteredDMMResponse proto.InternalMessageInfo

func (m *QueryIsRegisteredDMMResponse) GetIsRegisteredDmm() bool {
	if m != nil {
		return m.IsRegisteredDmm
	}
	return false
}

// QueryRegisteredDMMsRequest is the request type for the Query/RegisteredDMMs RPC method.
type QueryRegisteredDMMsRequest struct {
}

func (m *QueryRegisteredDMMsRequest) Reset()         { *m = QueryRegisteredDMMsRequest{} }
func (m *QueryRegisteredDMMsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredDMMsRequest) ProtoMessage()    {}
func (*QueryRegisteredDMMsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{64}
}
func (m *QueryRegisteredDMMsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredDMMsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredDMMsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredDMMsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredDMMsRequest.Merge(m, src)
}
func (m *QueryRegisteredDMMsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredDMMsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredDMMsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredDMMsRequest proto.InternalMessageInfo

// QueryRegisteredDMMsResponse is the response type for the Query/RegisteredDMMs RPC method.
type QueryRegisteredDMMsResponse struct {
	RegisteredDmms []string `protobuf:"bytes,1,rep,name=registered_dmms,json=registeredDmms,proto3" json:"registered_dmms,omitempty"`
}

func (m *QueryRegisteredDMMsResponse) Reset()         { *m = QueryRegisteredDMMsResponse{} }
func (m *QueryRegisteredDMMsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRegisteredDMMsResponse) ProtoMessage()    {}
func (*QueryRegisteredDMMsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{65}
}
func (m *QueryRegisteredDMMsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRegisteredDMMsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRegisteredDMMsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRegisteredDMMsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRegisteredDMMsResponse.Merge(m, src)
}
func (m *QueryRegisteredDMMsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRegisteredDMMsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRegisteredDMMsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRegisteredDMMsResponse proto.InternalMessageInfo

func (m *QueryRegisteredDMMsResponse) GetRegisteredDmms() []string {
	if m != nil {
		return m.RegisteredDmms
	}
	return nil
}

// QueryFeeDiscountAccountInfoRequest is the request type for the Query/FeeDiscountAccountInfo RPC method.
type QueryFeeDiscountAccountInfoRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryFeeDiscountAccountInfoRequest) Reset()         { *m = QueryFeeDiscountAccountInfoRequest{} }
func (m *QueryFeeDiscountAccountInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountAccountInfoRequest) ProtoMessage()    {}
func (*QueryFeeDiscountAccountInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{66}
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.Merge(m, src)
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountAccountInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountAccountInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountAccountInfoRequest proto.InternalMessageInfo

func (m *QueryFeeDiscountAccountInfoRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// QueryFeeDiscountAccountInfoResponse is the response type for the Query/FeeDiscountAccountInfo RPC method.
type QueryFeeDiscountAccountInfoResponse struct {
	TierLevel   uint64               `protobuf:"varint,1,opt,name=tier_level,json=tierLevel,proto3" json:"tier_level,omitempty"`
	AccountInfo *FeeDiscountTierInfo `protobuf:"bytes,2,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	AccountTtl  *FeeDiscountTierTTL  `protobuf:"bytes,3,opt,name=account_ttl,json=accountTtl,proto3" json:"account_ttl,omitempty"`
}

func (m *QueryFeeDiscountAccountInfoResponse) Reset()         { *m = QueryFeeDiscountAccountInfoResponse{} }
func (m *QueryFeeDiscountAccountInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountAccountInfoResponse) ProtoMessage()    {}
func (*QueryFeeDiscountAccountInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{67}
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.Merge(m, src)
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountAccountInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountAccountInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountAccountInfoResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountAccountInfoResponse) GetTierLevel() uint64 {
	if m != nil {
		return m.TierLevel
	}
	return 0
}

func (m *QueryFeeDiscountAccountInfoResponse) GetAccountInfo() *FeeDiscountTierInfo {
	if m != nil {
		return m.AccountInfo
	}
	return nil
}

func (m *QueryFeeDiscountAccountInfoResponse) GetAccountTtl() *FeeDiscountTierTTL {
	if m != nil {
		return m.AccountTtl
	}
	return nil
}

// QueryFeeDiscountScheduleRequest is the request type for the Query/FeeDiscountSchedule RPC method.
type QueryFeeDiscountScheduleRequest struct {
}

func (m *QueryFeeDiscountScheduleRequest) Reset()         { *m = QueryFeeDiscountScheduleRequest{} }
func (m *QueryFeeDiscountScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountScheduleRequest) ProtoMessage()    {}
func (*QueryFeeDiscountScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{68}
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountScheduleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountScheduleRequest.Merge(m, src)
}
func (m *QueryFeeDiscountScheduleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountScheduleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountScheduleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountScheduleRequest proto.InternalMessageInfo

// QueryFeeDiscountScheduleResponse is the response type for the Query/FeeDiscountSchedule RPC method.
type QueryFeeDiscountScheduleResponse struct {
	FeeDiscountSchedule *FeeDiscountSchedule `protobuf:"bytes,1,opt,name=fee_discount_schedule,json=feeDiscountSchedule,proto3" json:"fee_discount_schedule,omitempty"`
}

func (m *QueryFeeDiscountScheduleResponse) Reset()         { *m = QueryFeeDiscountScheduleResponse{} }
func (m *QueryFeeDiscountScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountScheduleResponse) ProtoMessage()    {}
func (*QueryFeeDiscountScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{69}
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountScheduleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountScheduleResponse.Merge(m, src)
}
func (m *QueryFeeDiscountScheduleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountScheduleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountScheduleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountScheduleResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountScheduleResponse) GetFeeDiscountSchedule() *FeeDiscountSchedule {
	if m != nil {
		return m.FeeDiscountSchedule
	}
	return nil
}

// QueryBalanceMismatchesRequest is the request type for the Query/QueryBalanceMismatches RPC method.
type QueryBalanceMismatchesRequest struct {
	DustFactor int64 `protobuf:"varint,1,opt,name=dust_factor,json=dustFactor,proto3" json:"dust_factor,omitempty"`
}

func (m *QueryBalanceMismatchesRequest) Reset()         { *m = QueryBalanceMismatchesRequest{} }
func (m *QueryBalanceMismatchesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceMismatchesRequest) ProtoMessage()    {}
func (*QueryBalanceMismatchesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{70}
}
func (m *QueryBalanceMismatchesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceMismatchesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceMismatchesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceMismatchesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceMismatchesRequest.Merge(m, src)
}
func (m *QueryBalanceMismatchesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceMismatchesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceMismatchesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceMismatchesRequest proto.InternalMessageInfo

func (m *QueryBalanceMismatchesRequest) GetDustFactor() int64 {
	if m != nil {
		return m.DustFactor
	}
	return 0
}

type BalanceMismatch struct {
	SubaccountId  string                                 `protobuf:"bytes,1,opt,name=subaccountId,proto3" json:"subaccountId,omitempty"`
	Denom         string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Available     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=available,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"available"`
	Total         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total"`
	BalanceHold   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=balance_hold,json=balanceHold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"balance_hold"`
	ExpectedTotal github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=expected_total,json=expectedTotal,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"expected_total"`
	Difference    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=difference,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"difference"`
}

func (m *BalanceMismatch) Reset()         { *m = BalanceMismatch{} }
func (m *BalanceMismatch) String() string { return proto.CompactTextString(m) }
func (*BalanceMismatch) ProtoMessage()    {}
func (*BalanceMismatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{71}
}
func (m *BalanceMismatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceMismatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceMismatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceMismatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceMismatch.Merge(m, src)
}
func (m *BalanceMismatch) XXX_Size() int {
	return m.Size()
}
func (m *BalanceMismatch) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceMismatch.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceMismatch proto.InternalMessageInfo

func (m *BalanceMismatch) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BalanceMismatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryBalanceMismatchesResponse is the response type for the Query/QueryBalanceMismatches RPC method.
type QueryBalanceMismatchesResponse struct {
	BalanceMismatches []*BalanceMismatch `protobuf:"bytes,1,rep,name=balance_mismatches,json=balanceMismatches,proto3" json:"balance_mismatches,omitempty"`
}

func (m *QueryBalanceMismatchesResponse) Reset()         { *m = QueryBalanceMismatchesResponse{} }
func (m *QueryBalanceMismatchesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceMismatchesResponse) ProtoMessage()    {}
func (*QueryBalanceMismatchesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{72}
}
func (m *QueryBalanceMismatchesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceMismatchesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceMismatchesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceMismatchesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceMismatchesResponse.Merge(m, src)
}
func (m *QueryBalanceMismatchesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceMismatchesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceMismatchesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceMismatchesResponse proto.InternalMessageInfo

func (m *QueryBalanceMismatchesResponse) GetBalanceMismatches() []*BalanceMismatch {
	if m != nil {
		return m.BalanceMismatches
	}
	return nil
}

// QueryBalanceWithBalanceHoldsRequest is the request type for the Query/QueryBalanceWithBalanceHolds RPC method.
type QueryBalanceWithBalanceHoldsRequest struct {
}

func (m *QueryBalanceWithBalanceHoldsRequest) Reset()         { *m = QueryBalanceWithBalanceHoldsRequest{} }
func (m *QueryBalanceWithBalanceHoldsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceWithBalanceHoldsRequest) ProtoMessage()    {}
func (*QueryBalanceWithBalanceHoldsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{73}
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.Merge(m, src)
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceWithBalanceHoldsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceWithBalanceHoldsRequest proto.InternalMessageInfo

type BalanceWithMarginHold struct {
	SubaccountId string                                 `protobuf:"bytes,1,opt,name=subaccountId,proto3" json:"subaccountId,omitempty"`
	Denom        string                                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Available    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=available,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"available"`
	Total        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total"`
	BalanceHold  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=balance_hold,json=balanceHold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"balance_hold"`
}

func (m *BalanceWithMarginHold) Reset()         { *m = BalanceWithMarginHold{} }
func (m *BalanceWithMarginHold) String() string { return proto.CompactTextString(m) }
func (*BalanceWithMarginHold) ProtoMessage()    {}
func (*BalanceWithMarginHold) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{74}
}
func (m *BalanceWithMarginHold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceWithMarginHold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceWithMarginHold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceWithMarginHold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceWithMarginHold.Merge(m, src)
}
func (m *BalanceWithMarginHold) XXX_Size() int {
	return m.Size()
}
func (m *BalanceWithMarginHold) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceWithMarginHold.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceWithMarginHold proto.InternalMessageInfo

func (m *BalanceWithMarginHold) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BalanceWithMarginHold) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryBalanceWithBalanceHoldsResponse is the response type for the Query/QueryBalanceWithBalanceHolds RPC method.
type QueryBalanceWithBalanceHoldsResponse struct {
	BalanceWithBalanceHolds []*BalanceWithMarginHold `protobuf:"bytes,1,rep,name=balance_with_balance_holds,json=balanceWithBalanceHolds,proto3" json:"balance_with_balance_holds,omitempty"`
}

func (m *QueryBalanceWithBalanceHoldsResponse) Reset()         { *m = QueryBalanceWithBalanceHoldsResponse{} }
func (m *QueryBalanceWithBalanceHoldsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceWithBalanceHoldsResponse) ProtoMessage()    {}
func (*QueryBalanceWithBalanceHoldsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{75}
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.Merge(m, src)
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceWithBalanceHoldsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceWithBalanceHoldsResponse proto.InternalMessageInfo

func (m *QueryBalanceWithBalanceHoldsResponse) GetBalanceWithBalanceHolds() []*BalanceWithMarginHold {
	if m != nil {
		return m.BalanceWithBalanceHolds
	}
	return nil
}

// QueryFeeDiscountTierStatisticsRequest is the request type for the Query/QueryFeeDiscountTierStatistics RPC method.
type QueryFeeDiscountTierStatisticsRequest struct {
}

func (m *QueryFeeDiscountTierStatisticsRequest) Reset()         { *m = QueryFeeDiscountTierStatisticsRequest{} }
func (m *QueryFeeDiscountTierStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountTierStatisticsRequest) ProtoMessage()    {}
func (*QueryFeeDiscountTierStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{76}
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.Merge(m, src)
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountTierStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountTierStatisticsRequest proto.InternalMessageInfo

type TierStatistic struct {
	Tier  uint64 `protobuf:"varint,1,opt,name=tier,proto3" json:"tier,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TierStatistic) Reset()         { *m = TierStatistic{} }
func (m *TierStatistic) String() string { return proto.CompactTextString(m) }
func (*TierStatistic) ProtoMessage()    {}
func (*TierStatistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{77}
}
func (m *TierStatistic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TierStatistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TierStatistic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TierStatistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierStatistic.Merge(m, src)
}
func (m *TierStatistic) XXX_Size() int {
	return m.Size()
}
func (m *TierStatistic) XXX_DiscardUnknown() {
	xxx_messageInfo_TierStatistic.DiscardUnknown(m)
}

var xxx_messageInfo_TierStatistic proto.InternalMessageInfo

func (m *TierStatistic) GetTier() uint64 {
	if m != nil {
		return m.Tier
	}
	return 0
}

func (m *TierStatistic) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// QueryFeeDiscountTierStatisticsResponse is the response type for the Query/QueryFeeDiscountTierStatistics RPC method.
type QueryFeeDiscountTierStatisticsResponse struct {
	Statistics []*TierStatistic `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *QueryFeeDiscountTierStatisticsResponse) Reset() {
	*m = QueryFeeDiscountTierStatisticsResponse{}
}
func (m *QueryFeeDiscountTierStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeDiscountTierStatisticsResponse) ProtoMessage()    {}
func (*QueryFeeDiscountTierStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{78}
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.Merge(m, src)
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeDiscountTierStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeDiscountTierStatisticsResponse proto.InternalMessageInfo

func (m *QueryFeeDiscountTierStatisticsResponse) GetStatistics() []*TierStatistic {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// MarketMakingPoolInfoRequest is the request type for the Query/MarketMakingPoolInfo RPC method.
type MarketMakingPoolInfoRequest struct {
	MarketId             string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	PoolSubaccountId     string `protobuf:"bytes,2,opt,name=pool_subaccount_id,json=poolSubaccountId,proto3" json:"pool_subaccount_id,omitempty"`
	ContractAddressMaker string `protobuf:"bytes,3,opt,name=contract_address_maker,json=contractAddressMaker,proto3" json:"contract_address_maker,omitempty"`
}

func (m *MarketMakingPoolInfoRequest) Reset()         { *m = MarketMakingPoolInfoRequest{} }
func (m *MarketMakingPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*MarketMakingPoolInfoRequest) ProtoMessage()    {}
func (*MarketMakingPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{79}
}
func (m *MarketMakingPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketMakingPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketMakingPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketMakingPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketMakingPoolInfoRequest.Merge(m, src)
}
func (m *MarketMakingPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarketMakingPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketMakingPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarketMakingPoolInfoRequest proto.InternalMessageInfo

func (m *MarketMakingPoolInfoRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *MarketMakingPoolInfoRequest) GetPoolSubaccountId() string {
	if m != nil {
		return m.PoolSubaccountId
	}
	return ""
}

func (m *MarketMakingPoolInfoRequest) GetContractAddressMaker() string {
	if m != nil {
		return m.ContractAddressMaker
	}
	return ""
}

// MarketMakingPoolInfoResponse is the response type for the Query/MarketMakingPoolInfo RPC method.
type MarketMakingPoolInfoResponse struct {
	PoolPosition       *Position                              `protobuf:"bytes,1,opt,name=pool_position,json=poolPosition,proto3" json:"pool_position,omitempty"`
	LpTokenTotalSupply github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=lp_token_total_supply,json=lpTokenTotalSupply,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"lp_token_total_supply"`
	LpTokenQuoteValue  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=lp_token_quote_value,json=lpTokenQuoteValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lp_token_quote_value"`
	LpTokenBaseValue   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=lp_token_base_value,json=lpTokenBaseValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"lp_token_base_value"`
	PoolQuoteDeposits  Deposit                                `protobuf:"bytes,5,opt,name=pool_quote_deposits,json=poolQuoteDeposits,proto3" json:"pool_quote_deposits"`
	PoolBaseDeposits   *Deposit                               `protobuf:"bytes,6,opt,name=pool_base_deposits,json=poolBaseDeposits,proto3" json:"pool_base_deposits,omitempty"`
}

func (m *MarketMakingPoolInfoResponse) Reset()         { *m = MarketMakingPoolInfoResponse{} }
func (m *MarketMakingPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MarketMakingPoolInfoResponse) ProtoMessage()    {}
func (*MarketMakingPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{80}
}
func (m *MarketMakingPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketMakingPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketMakingPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketMakingPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketMakingPoolInfoResponse.Merge(m, src)
}
func (m *MarketMakingPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarketMakingPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketMakingPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarketMakingPoolInfoResponse proto.InternalMessageInfo

func (m *MarketMakingPoolInfoResponse) GetPoolPosition() *Position {
	if m != nil {
		return m.PoolPosition
	}
	return nil
}

func (m *MarketMakingPoolInfoResponse) GetPoolQuoteDeposits() Deposit {
	if m != nil {
		return m.PoolQuoteDeposits
	}
	return Deposit{}
}

func (m *MarketMakingPoolInfoResponse) GetPoolBaseDeposits() *Deposit {
	if m != nil {
		return m.PoolBaseDeposits
	}
	return nil
}

// QueryMarketIDFromVaultRequest is the request type for the Query/QueryMarketIDFromVault RPC method.
type QueryMarketIDFromVaultRequest struct {
	VaultSubaccountId string `protobuf:"bytes,1,opt,name=vault_subaccount_id,json=vaultSubaccountId,proto3" json:"vault_subaccount_id,omitempty"`
}

func (m *QueryMarketIDFromVaultRequest) Reset()         { *m = QueryMarketIDFromVaultRequest{} }
func (m *QueryMarketIDFromVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketIDFromVaultRequest) ProtoMessage()    {}
func (*QueryMarketIDFromVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{81}
}
func (m *QueryMarketIDFromVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketIDFromVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketIDFromVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketIDFromVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketIDFromVaultRequest.Merge(m, src)
}
func (m *QueryMarketIDFromVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketIDFromVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketIDFromVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketIDFromVaultRequest proto.InternalMessageInfo

func (m *QueryMarketIDFromVaultRequest) GetVaultSubaccountId() string {
	if m != nil {
		return m.VaultSubaccountId
	}
	return ""
}

// QueryMarketIDFromVaultResponse is the response type for the Query/QueryMarketIDFromVault RPC method.
type QueryMarketIDFromVaultResponse struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryMarketIDFromVaultResponse) Reset()         { *m = QueryMarketIDFromVaultResponse{} }
func (m *QueryMarketIDFromVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketIDFromVaultResponse) ProtoMessage()    {}
func (*QueryMarketIDFromVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{82}
}
func (m *QueryMarketIDFromVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketIDFromVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketIDFromVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketIDFromVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketIDFromVaultResponse.Merge(m, src)
}
func (m *QueryMarketIDFromVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketIDFromVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketIDFromVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketIDFromVaultResponse proto.InternalMessageInfo

func (m *QueryMarketIDFromVaultResponse) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryHistoricalTradeRecordsRequest struct {
	MarketId string `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
}

func (m *QueryHistoricalTradeRecordsRequest) Reset()         { *m = QueryHistoricalTradeRecordsRequest{} }
func (m *QueryHistoricalTradeRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalTradeRecordsRequest) ProtoMessage()    {}
func (*QueryHistoricalTradeRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{83}
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalTradeRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalTradeRecordsRequest.Merge(m, src)
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalTradeRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalTradeRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalTradeRecordsRequest proto.InternalMessageInfo

func (m *QueryHistoricalTradeRecordsRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

type QueryHistoricalTradeRecordsResponse struct {
	TradeRecords []*TradeRecords `protobuf:"bytes,1,rep,name=trade_records,json=tradeRecords,proto3" json:"trade_records,omitempty"`
}

func (m *QueryHistoricalTradeRecordsResponse) Reset()         { *m = QueryHistoricalTradeRecordsResponse{} }
func (m *QueryHistoricalTradeRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHistoricalTradeRecordsResponse) ProtoMessage()    {}
func (*QueryHistoricalTradeRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{84}
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHistoricalTradeRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHistoricalTradeRecordsResponse.Merge(m, src)
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHistoricalTradeRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHistoricalTradeRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHistoricalTradeRecordsResponse proto.InternalMessageInfo

func (m *QueryHistoricalTradeRecordsResponse) GetTradeRecords() []*TradeRecords {
	if m != nil {
		return m.TradeRecords
	}
	return nil
}

// TradeHistoryOptions are the optional params for Query/MarketVolatility RPC method.
type TradeHistoryOptions struct {
	// TradeGroupingSec of 0 means use the chain's default grouping
	TradeGroupingSec uint64 `protobuf:"varint,1,opt,name=trade_grouping_sec,json=tradeGroupingSec,proto3" json:"trade_grouping_sec,omitempty"`
	// MaxAge restricts the trade records oldest age in seconds from the current block time to consider.
	// A value of 0 means use all the records present on the chain.
	MaxAge uint64 `protobuf:"varint,2,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// If IncludeRawHistory is true, the raw underlying data used for the computation is included in the response
	IncludeRawHistory bool `protobuf:"varint,4,opt,name=include_raw_history,json=includeRawHistory,proto3" json:"include_raw_history,omitempty"`
	// If IncludeMetadata is true, metadata on the computation is included in the response
	IncludeMetadata bool `protobuf:"varint,5,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
}

func (m *TradeHistoryOptions) Reset()         { *m = TradeHistoryOptions{} }
func (m *TradeHistoryOptions) String() string { return proto.CompactTextString(m) }
func (*TradeHistoryOptions) ProtoMessage()    {}
func (*TradeHistoryOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{85}
}
func (m *TradeHistoryOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradeHistoryOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradeHistoryOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradeHistoryOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeHistoryOptions.Merge(m, src)
}
func (m *TradeHistoryOptions) XXX_Size() int {
	return m.Size()
}
func (m *TradeHistoryOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeHistoryOptions.DiscardUnknown(m)
}

var xxx_messageInfo_TradeHistoryOptions proto.InternalMessageInfo

func (m *TradeHistoryOptions) GetTradeGroupingSec() uint64 {
	if m != nil {
		return m.TradeGroupingSec
	}
	return 0
}

func (m *TradeHistoryOptions) GetMaxAge() uint64 {
	if m != nil {
		return m.MaxAge
	}
	return 0
}

func (m *TradeHistoryOptions) GetIncludeRawHistory() bool {
	if m != nil {
		return m.IncludeRawHistory
	}
	return false
}

func (m *TradeHistoryOptions) GetIncludeMetadata() bool {
	if m != nil {
		return m.IncludeMetadata
	}
	return false
}

// QueryMarketVolatilityRequest are the request params for the Query/MarketVolatility RPC method.
type QueryMarketVolatilityRequest struct {
	MarketId            string               `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	TradeHistoryOptions *TradeHistoryOptions `protobuf:"bytes,2,opt,name=trade_history_options,json=tradeHistoryOptions,proto3" json:"trade_history_options,omitempty"`
}

func (m *QueryMarketVolatilityRequest) Reset()         { *m = QueryMarketVolatilityRequest{} }
func (m *QueryMarketVolatilityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMarketVolatilityRequest) ProtoMessage()    {}
func (*QueryMarketVolatilityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{86}
}
func (m *QueryMarketVolatilityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketVolatilityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketVolatilityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketVolatilityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketVolatilityRequest.Merge(m, src)
}
func (m *QueryMarketVolatilityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketVolatilityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketVolatilityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketVolatilityRequest proto.InternalMessageInfo

func (m *QueryMarketVolatilityRequest) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

func (m *QueryMarketVolatilityRequest) GetTradeHistoryOptions() *TradeHistoryOptions {
	if m != nil {
		return m.TradeHistoryOptions
	}
	return nil
}

// QueryMarketVolatilityResponse is the response type for the Query/MarketVolatility RPC method.
type QueryMarketVolatilityResponse struct {
	Volatility      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=volatility,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"volatility,omitempty"`
	HistoryMetadata *types.MetadataStatistics               `protobuf:"bytes,2,opt,name=history_metadata,json=historyMetadata,proto3" json:"history_metadata,omitempty"`
	RawHistory      []*TradeRecord                          `protobuf:"bytes,3,rep,name=raw_history,json=rawHistory,proto3" json:"raw_history,omitempty"`
}

func (m *QueryMarketVolatilityResponse) Reset()         { *m = QueryMarketVolatilityResponse{} }
func (m *QueryMarketVolatilityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMarketVolatilityResponse) ProtoMessage()    {}
func (*QueryMarketVolatilityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_523db28b8af54781, []int{87}
}
func (m *QueryMarketVolatilityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMarketVolatilityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMarketVolatilityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMarketVolatilityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMarketVolatilityResponse.Merge(m, src)
}
func (m *QueryMarketVolatilityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMarketVolatilityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMarketVolatilityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMarketVolatilityResponse proto.InternalMessageInfo

func (m *QueryMarketVolatilityResponse) GetHistoryMetadata() *types.MetadataStatistics {
	if m != nil {
		return m.HistoryMetadata
	}
	return nil
}

func (m *QueryMarketVolatilityResponse) GetRawHistory() []*TradeRecord {
	if m != nil {
		return m.RawHistory
	}
	return nil
}

func init() {
	proto.RegisterType((*Subaccount)(nil), "injective.exchange.v1beta1.Subaccount")
	proto.RegisterType((*SubaccountOrderbookMetadataWithMarket)(nil), "injective.exchange.v1beta1.SubaccountOrderbookMetadataWithMarket")
	proto.RegisterType((*QueryExchangeParamsRequest)(nil), "injective.exchange.v1beta1.QueryExchangeParamsRequest")
	proto.RegisterType((*QueryExchangeParamsResponse)(nil), "injective.exchange.v1beta1.QueryExchangeParamsResponse")
	proto.RegisterType((*QuerySubaccountDepositsRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsRequest")
	proto.RegisterType((*QuerySubaccountDepositsResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsResponse")
	proto.RegisterMapType((map[string]*Deposit)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositsResponse.DepositsEntry")
	proto.RegisterType((*QueryExchangeBalancesRequest)(nil), "injective.exchange.v1beta1.QueryExchangeBalancesRequest")
	proto.RegisterType((*QueryExchangeBalancesResponse)(nil), "injective.exchange.v1beta1.QueryExchangeBalancesResponse")
	proto.RegisterType((*QuerySubaccountDepositRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositRequest")
	proto.RegisterType((*QuerySubaccountDepositResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountDepositResponse")
	proto.RegisterType((*QuerySpotMarketsRequest)(nil), "injective.exchange.v1beta1.QuerySpotMarketsRequest")
	proto.RegisterType((*QuerySpotMarketsResponse)(nil), "injective.exchange.v1beta1.QuerySpotMarketsResponse")
	proto.RegisterType((*QuerySpotMarketRequest)(nil), "injective.exchange.v1beta1.QuerySpotMarketRequest")
	proto.RegisterType((*QuerySpotMarketResponse)(nil), "injective.exchange.v1beta1.QuerySpotMarketResponse")
	proto.RegisterType((*QuerySpotOrderbookRequest)(nil), "injective.exchange.v1beta1.QuerySpotOrderbookRequest")
	proto.RegisterType((*QuerySpotOrderbookResponse)(nil), "injective.exchange.v1beta1.QuerySpotOrderbookResponse")
	proto.RegisterType((*QueryTraderSpotOrdersRequest)(nil), "injective.exchange.v1beta1.QueryTraderSpotOrdersRequest")
	proto.RegisterType((*TrimmedSpotLimitOrder)(nil), "injective.exchange.v1beta1.TrimmedSpotLimitOrder")
	proto.RegisterType((*QueryTraderSpotOrdersResponse)(nil), "injective.exchange.v1beta1.QueryTraderSpotOrdersResponse")
	proto.RegisterType((*QuerySpotMidPriceRequest)(nil), "injective.exchange.v1beta1.QuerySpotMidPriceRequest")
	proto.RegisterType((*QuerySpotMidPriceResponse)(nil), "injective.exchange.v1beta1.QuerySpotMidPriceResponse")
	proto.RegisterType((*QueryDerivativeMidPriceRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMidPriceRequest")
	proto.RegisterType((*QueryDerivativeMidPriceResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMidPriceResponse")
	proto.RegisterType((*QueryDerivativeOrderbookRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeOrderbookRequest")
	proto.RegisterType((*QueryDerivativeOrderbookResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeOrderbookResponse")
	proto.RegisterType((*QueryTraderDerivativeOrdersRequest)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeOrdersRequest")
	proto.RegisterType((*TrimmedDerivativeLimitOrder)(nil), "injective.exchange.v1beta1.TrimmedDerivativeLimitOrder")
	proto.RegisterType((*QueryTraderDerivativeOrdersResponse)(nil), "injective.exchange.v1beta1.QueryTraderDerivativeOrdersResponse")
	proto.RegisterType((*QueryDerivativeMarketsRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketsRequest")
	proto.RegisterType((*PriceLevel)(nil), "injective.exchange.v1beta1.PriceLevel")
	proto.RegisterType((*PerpetualMarketState)(nil), "injective.exchange.v1beta1.PerpetualMarketState")
	proto.RegisterType((*FullDerivativeMarket)(nil), "injective.exchange.v1beta1.FullDerivativeMarket")
	proto.RegisterType((*QueryDerivativeMarketsResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketsResponse")
	proto.RegisterType((*QueryDerivativeMarketRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketRequest")
	proto.RegisterType((*QueryDerivativeMarketResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketResponse")
	proto.RegisterType((*QueryDerivativeMarketAddressRequest)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketAddressRequest")
	proto.RegisterType((*QueryDerivativeMarketAddressResponse)(nil), "injective.exchange.v1beta1.QueryDerivativeMarketAddressResponse")
	proto.RegisterType((*QuerySubaccountTradeNonceRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountTradeNonceRequest")
	proto.RegisterType((*QuerySubaccountPositionsRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionsRequest")
	proto.RegisterType((*QuerySubaccountPositionInMarketRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionInMarketRequest")
	proto.RegisterType((*QuerySubaccountEffectivePositionInMarketRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketRequest")
	proto.RegisterType((*QuerySubaccountOrderMetadataRequest)(nil), "injective.exchange.v1beta1.QuerySubaccountOrderMetadataRequest")
	proto.RegisterType((*QuerySubaccountPositionsResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionsResponse")
	proto.RegisterType((*QuerySubaccountPositionInMarketResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountPositionInMarketResponse")
	proto.RegisterType((*EffectivePosition)(nil), "injective.exchange.v1beta1.EffectivePosition")
	proto.RegisterType((*QuerySubaccountEffectivePositionInMarketResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountEffectivePositionInMarketResponse")
	proto.RegisterType((*QueryPerpetualMarketInfoRequest)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketInfoRequest")
	proto.RegisterType((*QueryPerpetualMarketInfoResponse)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketInfoResponse")
	proto.RegisterType((*QueryExpiryFuturesMarketInfoRequest)(nil), "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoRequest")
	proto.RegisterType((*QueryExpiryFuturesMarketInfoResponse)(nil), "injective.exchange.v1beta1.QueryExpiryFuturesMarketInfoResponse")
	proto.RegisterType((*QueryPerpetualMarketFundingRequest)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketFundingRequest")
	proto.RegisterType((*QueryPerpetualMarketFundingResponse)(nil), "injective.exchange.v1beta1.QueryPerpetualMarketFundingResponse")
	proto.RegisterType((*QuerySubaccountOrderMetadataResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountOrderMetadataResponse")
	proto.RegisterType((*QuerySubaccountTradeNonceResponse)(nil), "injective.exchange.v1beta1.QuerySubaccountTradeNonceResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "injective.exchange.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "injective.exchange.v1beta1.QueryModuleStateResponse")
	proto.RegisterType((*QueryPositionsRequest)(nil), "injective.exchange.v1beta1.QueryPositionsRequest")
	proto.RegisterType((*QueryPositionsResponse)(nil), "injective.exchange.v1beta1.QueryPositionsResponse")
	proto.RegisterType((*QueryTradeRewardPointsRequest)(nil), "injective.exchange.v1beta1.QueryTradeRewardPointsRequest")
	proto.RegisterType((*QueryTradeRewardPointsResponse)(nil), "injective.exchange.v1beta1.QueryTradeRewardPointsResponse")
	proto.RegisterType((*QueryTradeRewardCampaignRequest)(nil), "injective.exchange.v1beta1.QueryTradeRewardCampaignRequest")
	proto.RegisterType((*QueryTradeRewardCampaignResponse)(nil), "injective.exchange.v1beta1.QueryTradeRewardCampaignResponse")
	proto.RegisterType((*QueryIsRegisteredDMMRequest)(nil), "injective.exchange.v1beta1.QueryIsRegisteredDMMRequest")
	proto.RegisterType((*QueryIsRegisteredDMMResponse)(nil), "injective.exchange.v1beta1.QueryIsRegisteredDMMResponse")
	proto.RegisterType((*QueryRegisteredDMMsRequest)(nil), "injective.exchange.v1beta1.QueryRegisteredDMMsRequest")
	proto.RegisterType((*QueryRegisteredDMMsResponse)(nil), "injective.exchange.v1beta1.QueryRegisteredDMMsResponse")
	proto.RegisterType((*QueryFeeDiscountAccountInfoRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoRequest")
	proto.RegisterType((*QueryFeeDiscountAccountInfoResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountAccountInfoResponse")
	proto.RegisterType((*QueryFeeDiscountScheduleRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountScheduleRequest")
	proto.RegisterType((*QueryFeeDiscountScheduleResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountScheduleResponse")
	proto.RegisterType((*QueryBalanceMismatchesRequest)(nil), "injective.exchange.v1beta1.QueryBalanceMismatchesRequest")
	proto.RegisterType((*BalanceMismatch)(nil), "injective.exchange.v1beta1.BalanceMismatch")
	proto.RegisterType((*QueryBalanceMismatchesResponse)(nil), "injective.exchange.v1beta1.QueryBalanceMismatchesResponse")
	proto.RegisterType((*QueryBalanceWithBalanceHoldsRequest)(nil), "injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsRequest")
	proto.RegisterType((*BalanceWithMarginHold)(nil), "injective.exchange.v1beta1.BalanceWithMarginHold")
	proto.RegisterType((*QueryBalanceWithBalanceHoldsResponse)(nil), "injective.exchange.v1beta1.QueryBalanceWithBalanceHoldsResponse")
	proto.RegisterType((*QueryFeeDiscountTierStatisticsRequest)(nil), "injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsRequest")
	proto.RegisterType((*TierStatistic)(nil), "injective.exchange.v1beta1.TierStatistic")
	proto.RegisterType((*QueryFeeDiscountTierStatisticsResponse)(nil), "injective.exchange.v1beta1.QueryFeeDiscountTierStatisticsResponse")
	proto.RegisterType((*MarketMakingPoolInfoRequest)(nil), "injective.exchange.v1beta1.MarketMakingPoolInfoRequest")
	proto.RegisterType((*MarketMakingPoolInfoResponse)(nil), "injective.exchange.v1beta1.MarketMakingPoolInfoResponse")
	proto.RegisterType((*QueryMarketIDFromVaultRequest)(nil), "injective.exchange.v1beta1.QueryMarketIDFromVaultRequest")
	proto.RegisterType((*QueryMarketIDFromVaultResponse)(nil), "injective.exchange.v1beta1.QueryMarketIDFromVaultResponse")
	proto.RegisterType((*QueryHistoricalTradeRecordsRequest)(nil), "injective.exchange.v1beta1.QueryHistoricalTradeRecordsRequest")
	proto.RegisterType((*QueryHistoricalTradeRecordsResponse)(nil), "injective.exchange.v1beta1.QueryHistoricalTradeRecordsResponse")
	proto.RegisterType((*TradeHistoryOptions)(nil), "injective.exchange.v1beta1.TradeHistoryOptions")
	proto.RegisterType((*QueryMarketVolatilityRequest)(nil), "injective.exchange.v1beta1.QueryMarketVolatilityRequest")
	proto.RegisterType((*QueryMarketVolatilityResponse)(nil), "injective.exchange.v1beta1.QueryMarketVolatilityResponse")
}

func init() {
	proto.RegisterFile("injective/exchange/v1beta1/query.proto", fileDescriptor_523db28b8af54781)
}

var fileDescriptor_523db28b8af54781 = []byte{
	// 4117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5c, 0xdd, 0x6f, 0x1c, 0x47,
	0x72, 0xd7, 0xf0, 0x4b, 0x64, 0x51, 0x94, 0xc8, 0x26, 0x45, 0x51, 0xab, 0x4f, 0x8f, 0x4e, 0x16,
	0xed, 0xb3, 0xb8, 0x96, 0x64, 0x7d, 0x50, 0x96, 0x25, 0x93, 0xa6, 0x68, 0xd1, 0x16, 0x25, 0x79,
	0x48, 0xdb, 0xb1, 0x93, 0x60, 0x6f, 0xb8, 0xdb, 0x5c, 0x8e, 0x39, 0x3b, 0xb3, 0x9a, 0x99, 0xa5,
	0x45, 0x28, 0x02, 0x0e, 0xc9, 0x43, 0x1e, 0x02, 0xe4, 0x02, 0x5c, 0x92, 0xc7, 0x43, 0x02, 0xe4,
	0xe9, 0x5e, 0x02, 0x24, 0x40, 0x12, 0x24, 0x40, 0x02, 0x5c, 0x90, 0x83, 0xe1, 0x03, 0x12, 0x27,
	0x17, 0xe4, 0xe3, 0x80, 0x38, 0x07, 0x3b, 0x40, 0x92, 0x43, 0x1e, 0xf2, 0x1f, 0x24, 0x98, 0xee,
	0xea, 0xde, 0xf9, 0x66, 0xcf, 0x4a, 0x06, 0x1c, 0x20, 0x4f, 0xe2, 0x74, 0x77, 0x55, 0x57, 0x75,
	0x55, 0x57, 0x57, 0x57, 0xff, 0x56, 0xf0, 0xbc, 0xe5, 0x7c, 0x44, 0xeb, 0x81, 0xb5, 0x43, 0xab,
	0xf4, 0x51, 0x7d, 0xcb, 0x74, 0x9a, 0xb4, 0xba, 0x73, 0x61, 0x83, 0x06, 0xe6, 0x85, 0xea, 0xc3,
	0x0e, 0xf5, 0x76, 0xe7, 0xda, 0x9e, 0x1b, 0xb8, 0xa4, 0x22, 0xc7, 0xcd, 0x89, 0x71, 0x73, 0x38,
	0xae, 0x72, 0xbc, 0xe9, 0xba, 0x4d, 0x9b, 0x56, 0xcd, 0xb6, 0x55, 0x35, 0x1d, 0xc7, 0x0d, 0xcc,
	0xc0, 0x72, 0x1d, 0x9f, 0x53, 0x56, 0x5e, 0x28, 0x98, 0x41, 0xb2, 0xe2, 0x43, 0x67, 0x0b, 0x86,
	0x36, 0xa9, 0x43, 0x7d, 0x4b, 0x30, 0x3d, 0xdb, 0x1d, 0xe9, 0x7a, 0x66, 0xdd, 0xee, 0x8e, 0xe3,
	0x9f, 0x38, 0x6c, 0xaa, 0xe9, 0x36, 0x5d, 0xf6, 0x67, 0x35, 0xfc, 0x8b, 0xb7, 0xea, 0xf7, 0x01,
	0xd6, 0x3a, 0x1b, 0x66, 0xbd, 0xee, 0x76, 0x9c, 0x80, 0x4c, 0xc3, 0x50, 0xe0, 0x99, 0x0d, 0xea,
	0xcd, 0x68, 0xa7, 0xb5, 0xd9, 0x11, 0x03, 0xbf, 0xc8, 0x0b, 0x30, 0xee, 0xcb, 0x51, 0x35, 0xc7,
	0x75, 0xea, 0x74, 0xa6, 0xef, 0xb4, 0x36, 0x3b, 0x66, 0x1c, 0xea, 0xb6, 0xdf, 0x0b, 0x9b, 0xf5,
	0xdf, 0xd7, 0xe0, 0x6c, 0x97, 0xe3, 0x7d, 0xaf, 0x41, 0xbd, 0x0d, 0xd7, 0xdd, 0x5e, 0xa5, 0x81,
	0xd9, 0x30, 0x03, 0xf3, 0x7d, 0x2b, 0xd8, 0x5a, 0x35, 0xbd, 0x6d, 0x1a, 0x90, 0x35, 0x18, 0x6e,
	0x61, 0x2b, 0x9b, 0x6e, 0xf4, 0xe2, 0xd5, 0xb9, 0xfc, 0x95, 0x9d, 0x2b, 0x60, 0x6a, 0x48, 0x46,
	0xe4, 0x18, 0x8c, 0xb4, 0x18, 0xfb, 0x9a, 0xd5, 0x60, 0x22, 0x8e, 0x18, 0xc3, 0xbc, 0x61, 0xa5,
	0x41, 0xa6, 0x60, 0xd0, 0xf2, 0x17, 0x3b, 0xbb, 0x33, 0xfd, 0xa7, 0xb5, 0xd9, 0x61, 0x83, 0x7f,
	0xe8, 0xc7, 0xa1, 0xf2, 0x4e, 0x68, 0xdd, 0xdb, 0x38, 0xe3, 0x03, 0xd3, 0x33, 0x5b, 0xbe, 0x41,
	0x1f, 0x76, 0xa8, 0x1f, 0xe8, 0x35, 0x38, 0x96, 0xd9, 0xeb, 0xb7, 0x5d, 0xc7, 0xa7, 0xe4, 0x75,
	0x18, 0x6a, 0xb3, 0x16, 0x54, 0x41, 0x2f, 0x52, 0x81, 0xd3, 0x2e, 0x0e, 0x7c, 0xf2, 0xf9, 0xa9,
	0x7d, 0x06, 0xd2, 0xe9, 0xdf, 0xd5, 0xe0, 0x24, 0x9b, 0xa1, 0xab, 0xe0, 0x12, 0x6d, 0xbb, 0xbe,
	0x15, 0x08, 0x19, 0xc8, 0x19, 0x18, 0x8b, 0x2c, 0xbf, 0xd5, 0x40, 0xeb, 0x1c, 0xe8, 0x36, 0xae,
	0x34, 0xc8, 0x5d, 0x80, 0xee, 0x37, 0x53, 0x7d, 0xf4, 0xe2, 0xf3, 0x6a, 0x0b, 0xca, 0x24, 0xd2,
	0x8c, 0x08, 0xbd, 0xfe, 0x33, 0x0d, 0x4e, 0xe5, 0x4a, 0x85, 0xba, 0x53, 0x18, 0x6e, 0x60, 0xdb,
	0x8c, 0x76, 0xba, 0x7f, 0x76, 0xf4, 0xe2, 0x4a, 0xd1, 0x7c, 0x7b, 0xb0, 0x9b, 0x13, 0x0d, 0xb7,
	0x9d, 0xc0, 0xdb, 0x35, 0x24, 0xeb, 0xca, 0xb7, 0x60, 0x2c, 0xd6, 0x45, 0xc6, 0xa1, 0x7f, 0x9b,
	0xee, 0xe2, 0x22, 0x84, 0x7f, 0x92, 0x79, 0x18, 0xdc, 0x31, 0xed, 0x0e, 0x45, 0xb5, 0xcf, 0x14,
	0x89, 0x81, 0xbc, 0x0c, 0x4e, 0x71, 0xbd, 0xef, 0x9a, 0xa6, 0x9f, 0x84, 0xe3, 0x31, 0x1b, 0x2f,
	0x9a, 0xb6, 0xe9, 0xd4, 0xa9, 0xf4, 0x81, 0x4d, 0x38, 0x91, 0xd3, 0x8f, 0x2b, 0x71, 0x1b, 0x86,
	0x37, 0xb0, 0x0d, 0x57, 0xa2, 0x50, 0x04, 0xa4, 0x47, 0x47, 0x90, 0xa4, 0xfa, 0x87, 0x38, 0x4f,
	0x6a, 0x91, 0x4a, 0x39, 0xc2, 0x14, 0x0c, 0x36, 0xa8, 0xe3, 0xb6, 0xd0, 0xfd, 0xf9, 0x87, 0x6e,
	0xe6, 0x79, 0x99, 0x54, 0xe2, 0x56, 0xcc, 0x9c, 0xca, 0xeb, 0x28, 0x89, 0xf4, 0x0b, 0x70, 0x84,
	0x4f, 0xd1, 0x76, 0x03, 0xbe, 0xc7, 0xa5, 0x07, 0x4f, 0xc3, 0x90, 0x1f, 0x98, 0x41, 0xc7, 0x17,
	0x81, 0x85, 0x7f, 0xe9, 0xbf, 0x00, 0x33, 0x69, 0x12, 0xb9, 0xb5, 0xf6, 0xf3, 0x9d, 0x2b, 0xd6,
	0xb4, 0xd8, 0x9b, 0x25, 0x07, 0x43, 0x90, 0xe9, 0x97, 0x61, 0x3a, 0xc1, 0x5d, 0xc8, 0x13, 0x0b,
	0x13, 0x5a, 0x3c, 0x4c, 0xe8, 0x1f, 0xa4, 0xf4, 0x90, 0x32, 0xdd, 0x84, 0x21, 0x3e, 0x0c, 0x57,
	0x48, 0x55, 0x24, 0xa4, 0xd2, 0xef, 0xc1, 0x51, 0xc9, 0x5a, 0x86, 0x31, 0x15, 0xa1, 0x42, 0xab,
	0xda, 0x56, 0xcb, 0xe2, 0x3b, 0x7b, 0xc0, 0xe0, 0x1f, 0xfa, 0x0f, 0x34, 0x0c, 0x5e, 0x09, 0x86,
	0x28, 0xee, 0x03, 0x18, 0xdf, 0xe8, 0xec, 0xfa, 0xb5, 0xb6, 0x67, 0xd5, 0x69, 0xcd, 0xa6, 0x3b,
	0xd4, 0x56, 0x59, 0xcb, 0x07, 0xe1, 0xf0, 0xbb, 0xe1, 0x68, 0xe3, 0x60, 0x48, 0xdf, 0xfd, 0x26,
	0x06, 0x4c, 0xf8, 0xd4, 0xb6, 0xe3, 0x2c, 0xfb, 0x4a, 0xb1, 0x3c, 0xc4, 0x18, 0x74, 0x1b, 0xf4,
	0x6f, 0xe1, 0xf6, 0x5b, 0x67, 0x87, 0x8d, 0xd4, 0xc4, 0x57, 0x5a, 0x97, 0xd4, 0x96, 0xe8, 0x4b,
	0x6f, 0x09, 0xfd, 0xfb, 0x7d, 0x70, 0x78, 0xdd, 0xb3, 0x5a, 0x2d, 0xda, 0x08, 0xd9, 0xdf, 0x0d,
	0xd7, 0x8e, 0xcd, 0x41, 0x96, 0x60, 0x90, 0x69, 0xc2, 0xf9, 0x2e, 0xce, 0x85, 0x3b, 0xf2, 0x27,
	0x9f, 0x9f, 0x7a, 0xbe, 0x69, 0x05, 0x5b, 0x9d, 0x8d, 0xb9, 0xba, 0xdb, 0xaa, 0xd6, 0x5d, 0xbf,
	0xe5, 0xfa, 0xf8, 0xcf, 0x79, 0xbf, 0xb1, 0x5d, 0x0d, 0x76, 0xdb, 0xd4, 0x9f, 0x5b, 0xa2, 0x75,
	0x83, 0x13, 0x93, 0xb7, 0x60, 0xf8, 0x61, 0xc7, 0x74, 0x02, 0x2b, 0xd8, 0xe5, 0xf3, 0x97, 0x66,
	0x24, 0xe9, 0x43, 0x5e, 0x9b, 0x96, 0x6d, 0x9b, 0x1b, 0x36, 0x65, 0xe7, 0x54, 0x0f, 0xbc, 0x04,
	0x7d, 0xf7, 0xc0, 0x1b, 0x88, 0x1c, 0x78, 0xe4, 0x04, 0x80, 0x1b, 0x2a, 0x5f, 0xdb, 0x32, 0xfd,
	0xad, 0x99, 0x41, 0xb6, 0x5e, 0x23, 0xac, 0xe5, 0x8e, 0xe9, 0x6f, 0xe9, 0x1f, 0x61, 0x14, 0x4a,
	0x9b, 0x03, 0xbd, 0x6a, 0x05, 0x86, 0xd8, 0x68, 0xb1, 0x2f, 0x2f, 0x14, 0x19, 0x3e, 0x73, 0xd9,
	0x0d, 0x64, 0xa0, 0x5f, 0x8d, 0xee, 0x7f, 0xab, 0xc1, 0x9c, 0x42, 0x69, 0x8f, 0x9a, 0x91, 0x8d,
	0xd4, 0x25, 0x44, 0x01, 0x33, 0x8c, 0xaa, 0x95, 0x36, 0xaa, 0xfe, 0x1a, 0x46, 0xcc, 0x25, 0xea,
	0x59, 0x3b, 0x66, 0xa8, 0x5d, 0x29, 0x09, 0x9b, 0x78, 0x80, 0x66, 0x91, 0x3f, 0x53, 0x39, 0xd7,
	0x53, 0x13, 0x3d, 0x8b, 0xc8, 0xf2, 0x89, 0x06, 0xa7, 0xf3, 0xd9, 0xfe, 0x9f, 0x8a, 0x2f, 0x9b,
	0xa0, 0x47, 0x1c, 0x3a, 0xa1, 0xcf, 0x33, 0x8c, 0x32, 0xbf, 0xd2, 0x0f, 0xc7, 0xd0, 0xdd, 0xbb,
	0x93, 0x7c, 0xad, 0x63, 0xcd, 0x32, 0x3b, 0xce, 0x9a, 0x96, 0xd3, 0x63, 0xa4, 0x41, 0xea, 0x58,
	0xcc, 0x1a, 0x78, 0xca, 0x98, 0x75, 0x4a, 0xc4, 0xac, 0x30, 0x30, 0x0d, 0x2f, 0x8e, 0xfc, 0xec,
	0xf3, 0x53, 0xbc, 0x21, 0x3b, 0x7c, 0x0d, 0x25, 0xc3, 0xd7, 0x0e, 0x9c, 0x29, 0xb4, 0x36, 0xba,
	0xee, 0xfd, 0x44, 0x10, 0xbb, 0xaa, 0x10, 0xc4, 0xb2, 0xac, 0x1a, 0x09, 0x65, 0x27, 0x92, 0xfb,
	0x5d, 0x2d, 0x07, 0xfa, 0x9e, 0x06, 0x10, 0xd9, 0x01, 0x5f, 0x3b, 0x2f, 0xd1, 0xff, 0x42, 0x83,
	0xa9, 0x07, 0xd4, 0x6b, 0xd3, 0xa0, 0x63, 0xda, 0x5c, 0xa9, 0xb5, 0xc0, 0x0c, 0xc2, 0xed, 0x3f,
	0x2a, 0xb6, 0x8c, 0xb3, 0xe9, 0x62, 0x4a, 0x54, 0x2d, 0xdc, 0xa6, 0x71, 0x36, 0x2b, 0xce, 0xa6,
	0x6b, 0x40, 0x4b, 0xfe, 0x4d, 0xde, 0x85, 0x03, 0x9b, 0x1d, 0xa7, 0x61, 0x39, 0x4d, 0xce, 0x92,
	0xe7, 0xf3, 0x17, 0x4b, 0xb0, 0x5c, 0xe6, 0xe4, 0xc6, 0x28, 0xf2, 0x09, 0xd9, 0xea, 0xff, 0xd1,
	0x07, 0x53, 0xcb, 0x1d, 0xdb, 0x4e, 0xda, 0x86, 0x2c, 0x25, 0xf2, 0xb9, 0x97, 0x8a, 0x33, 0xde,
	0x38, 0xb5, 0xc8, 0xea, 0xc8, 0x07, 0x70, 0xb0, 0x2d, 0xa4, 0x88, 0xca, 0xfd, 0x72, 0x09, 0xb9,
	0xd9, 0x8a, 0xde, 0xd9, 0x67, 0x8c, 0x49, 0x4e, 0x6c, 0x41, 0x7e, 0x2e, 0x5c, 0x90, 0xa0, 0xe3,
	0x51, 0x9f, 0x33, 0xee, 0x67, 0x8c, 0x2f, 0x15, 0x31, 0xbe, 0xfd, 0xa8, 0x6d, 0x79, 0xbb, 0xcb,
	0x9c, 0xaa, 0xbb, 0xce, 0x77, 0xf6, 0x85, 0x6b, 0xc2, 0x1a, 0x19, 0xe7, 0x55, 0x60, 0x0b, 0xcf,
	0x03, 0x6d, 0x8f, 0xbb, 0x96, 0x45, 0x4c, 0xe6, 0xbb, 0x8b, 0x43, 0x30, 0x10, 0x0a, 0xa8, 0xdb,
	0xe9, 0x53, 0x33, 0x91, 0xd7, 0xbf, 0x95, 0xcc, 0xeb, 0x0b, 0x97, 0x29, 0xcb, 0x6c, 0xdd, 0x0c,
	0xff, 0x55, 0x4c, 0x1d, 0x53, 0x23, 0x54, 0x4e, 0x68, 0x2b, 0x67, 0xc7, 0x4a, 0x49, 0xef, 0x24,
	0xbc, 0xa3, 0xbc, 0xa0, 0x22, 0xef, 0x5f, 0xc4, 0xa0, 0x94, 0x1c, 0xb0, 0xd0, 0x68, 0x78, 0xd4,
	0x57, 0x3a, 0x83, 0x74, 0x0a, 0xdf, 0x28, 0xe6, 0x81, 0x52, 0xcf, 0xc0, 0x7e, 0x93, 0x37, 0x21,
	0x0b, 0xf1, 0xa9, 0x76, 0x8a, 0xbd, 0x89, 0xe7, 0x7e, 0xf7, 0xa2, 0xc8, 0x22, 0x29, 0xab, 0xee,
	0x94, 0xb9, 0x87, 0xea, 0xcb, 0xa9, 0x0a, 0xc2, 0x83, 0xf0, 0x9e, 0x68, 0xb9, 0x4e, 0xa9, 0xc2,
	0x86, 0xfe, 0x11, 0x3c, 0x9f, 0xc3, 0x67, 0xc5, 0x89, 0x5b, 0x5b, 0xe9, 0x7a, 0x5c, 0x54, 0x21,
	0xd2, 0x7d, 0xa8, 0x26, 0xe6, 0xba, 0xbd, 0xb9, 0xc9, 0x2d, 0xfe, 0xd5, 0x4d, 0xfa, 0x16, 0x3a,
	0x47, 0xa2, 0xc2, 0x25, 0xab, 0x5b, 0x65, 0x16, 0xcb, 0x49, 0x59, 0x2f, 0xb2, 0xe8, 0x72, 0x03,
	0x0e, 0x86, 0x47, 0x0f, 0xc5, 0xed, 0x37, 0xa7, 0x16, 0xf3, 0x04, 0x1f, 0xac, 0x5a, 0x70, 0x16,
	0xfa, 0x36, 0x9c, 0xdb, 0xd3, 0x38, 0xf2, 0x3e, 0x2f, 0xa7, 0x0d, 0x37, 0xd3, 0x37, 0x0a, 0x83,
	0x63, 0x74, 0x32, 0x4d, 0x4c, 0xf6, 0x7b, 0x7d, 0x30, 0x91, 0xb2, 0x07, 0x39, 0x02, 0xfb, 0x2d,
	0xbf, 0x66, 0xbb, 0x4e, 0x93, 0x71, 0x1e, 0x36, 0x86, 0x2c, 0xff, 0xae, 0xeb, 0x34, 0x9f, 0x69,
	0xa6, 0x74, 0x1f, 0x46, 0xa9, 0x13, 0x78, 0xbb, 0x18, 0x2e, 0x7b, 0x4b, 0x97, 0x80, 0xb1, 0x60,
	0xf1, 0x92, 0x7c, 0x00, 0xe3, 0x54, 0xa8, 0x52, 0xc3, 0x24, 0xac, 0xb7, 0x20, 0x7c, 0x48, 0xf2,
	0x59, 0x65, 0x6c, 0xf4, 0x27, 0xf0, 0xb2, 0xba, 0x13, 0xcb, 0x3b, 0x5d, 0xcc, 0x38, 0xe7, 0x0b,
	0x0f, 0x98, 0x24, 0xb7, 0xb8, 0x95, 0x6e, 0xe2, 0xbe, 0xcf, 0x3a, 0xeb, 0x55, 0xe2, 0x5c, 0x0b,
	0x5d, 0x38, 0x93, 0x5e, 0x8a, 0x3b, 0xf0, 0x14, 0x29, 0x07, 0xba, 0x30, 0x3f, 0xb0, 0x44, 0x68,
	0xce, 0x39, 0x36, 0x95, 0x44, 0xee, 0x60, 0x68, 0xce, 0xe5, 0x81, 0x62, 0xaf, 0xc6, 0xc4, 0xee,
	0xe5, 0x14, 0x8f, 0x89, 0xbe, 0x80, 0x17, 0x9b, 0x9c, 0x14, 0x48, 0x4d, 0xf2, 0x33, 0x85, 0x2c,
	0x50, 0xf0, 0x7b, 0x71, 0xf7, 0xe8, 0x21, 0x21, 0x8b, 0x87, 0x8d, 0x5f, 0xd3, 0x70, 0xc5, 0x72,
	0x63, 0x1e, 0x4e, 0x5c, 0x8f, 0x3d, 0x12, 0x84, 0xe1, 0x6a, 0xa1, 0xc7, 0x47, 0x82, 0xee, 0xcb,
	0x83, 0xa8, 0xbb, 0x0a, 0xc6, 0xfa, 0x3c, 0x3c, 0x57, 0x70, 0xe4, 0xa1, 0x24, 0x53, 0x30, 0xc8,
	0x1f, 0x3e, 0x34, 0xf6, 0xf0, 0xc1, 0x3f, 0xf4, 0xa3, 0x58, 0x2b, 0x5c, 0x75, 0x1b, 0x1d, 0x9b,
	0xb2, 0x24, 0x4e, 0x54, 0x8d, 0x3f, 0xc4, 0xda, 0x46, 0xac, 0x4b, 0xd6, 0x11, 0x63, 0xeb, 0x39,
	0x5b, 0xa4, 0xd3, 0x9b, 0xfc, 0xb5, 0x87, 0x33, 0xc0, 0xf5, 0x3b, 0x02, 0x87, 0xb9, 0xd9, 0x12,
	0x27, 0xaa, 0xde, 0xc0, 0x92, 0xe7, 0x57, 0x1b, 0xf5, 0x1f, 0x46, 0x4b, 0x44, 0x06, 0xfd, 0xd8,
	0xf4, 0x1a, 0x0f, 0x5c, 0xcb, 0xe9, 0xde, 0x75, 0x2a, 0x30, 0x8c, 0x2b, 0xc9, 0x93, 0xbc, 0x11,
	0x43, 0x7e, 0x93, 0x57, 0x60, 0xba, 0x4d, 0x79, 0x8e, 0xdf, 0x76, 0x5d, 0xbb, 0x16, 0x58, 0x2d,
	0xea, 0x07, 0x66, 0xab, 0xcd, 0x82, 0x74, 0xbf, 0x31, 0x85, 0xbd, 0x0f, 0x5c, 0xd7, 0x5e, 0x17,
	0x7d, 0xfa, 0x77, 0xc4, 0x33, 0x49, 0xc6, 0x9c, 0xa8, 0x61, 0x0b, 0x8e, 0x89, 0xd3, 0x91, 0xbd,
	0x5b, 0xd5, 0x3c, 0x36, 0xaa, 0xd6, 0x66, 0xc3, 0xb8, 0x1c, 0xa5, 0xa3, 0xeb, 0x4c, 0xd4, 0x23,
	0xa2, 0xd3, 0xea, 0xcf, 0x61, 0x9c, 0x8b, 0xf4, 0xbc, 0x61, 0xb6, 0xda, 0xa6, 0xd5, 0x74, 0x84,
	0x35, 0x7e, 0x73, 0x10, 0x63, 0x59, 0xe6, 0x18, 0x14, 0x7b, 0x07, 0x8e, 0x87, 0xe2, 0x86, 0xeb,
	0x81, 0x02, 0xd7, 0x71, 0x48, 0xf4, 0x5a, 0x75, 0xb9, 0xf8, 0x7e, 0x6a, 0xf2, 0xed, 0x1a, 0x9d,
	0x80, 0x45, 0x9e, 0xa3, 0x41, 0x5e, 0x17, 0xf9, 0xb6, 0x06, 0x67, 0x13, 0x13, 0x33, 0x7b, 0xc8,
	0xd9, 0xfd, 0xfa, 0x16, 0x0d, 0x5d, 0x17, 0xeb, 0x2f, 0x85, 0x1e, 0xd3, 0xd5, 0x8a, 0xaf, 0x90,
	0x6b, 0x1b, 0xcf, 0xc5, 0xa6, 0x0e, 0x9b, 0xc4, 0xa0, 0x35, 0x64, 0x4c, 0x2c, 0x38, 0x1a, 0xb8,
	0x81, 0x69, 0x67, 0xda, 0xab, 0xb7, 0x33, 0x76, 0x9a, 0x31, 0x4c, 0x59, 0x8b, 0x7c, 0x47, 0x83,
	0xf3, 0xc2, 0xed, 0xd4, 0xb4, 0x1e, 0xe8, 0x49, 0xeb, 0x59, 0x9c, 0x64, 0x7d, 0x4f, 0xe5, 0x1f,
	0xc1, 0x73, 0x52, 0xa0, 0xdc, 0x45, 0x18, 0xec, 0xc9, 0x69, 0x4f, 0x08, 0x21, 0x32, 0xd7, 0x42,
	0xbf, 0x8a, 0x6f, 0x9a, 0x2b, 0xbe, 0x41, 0x9b, 0x96, 0x1f, 0x50, 0x8f, 0x36, 0x96, 0x56, 0x57,
	0xc5, 0xe6, 0x0d, 0x2f, 0x10, 0xf8, 0x8c, 0x28, 0x2e, 0x10, 0xf8, 0x2a, 0xf8, 0x16, 0x5e, 0xb7,
	0x52, 0x84, 0xe8, 0xca, 0x2f, 0xc2, 0x84, 0xe5, 0xd7, 0x3c, 0xd9, 0x57, 0x6b, 0xb4, 0x5a, 0x98,
	0x94, 0x1d, 0xb2, 0xa2, 0x34, 0xad, 0x96, 0x7c, 0x76, 0x8d, 0x71, 0x92, 0x71, 0x6c, 0x19, 0x45,
	0x4c, 0xf6, 0xe2, 0x44, 0xe7, 0xe0, 0x50, 0x7c, 0x16, 0x11, 0x66, 0x0e, 0x7a, 0xd1, 0x49, 0x7c,
	0xfd, 0x26, 0x1e, 0x91, 0xcb, 0x94, 0x2e, 0x59, 0x3e, 0xd3, 0x62, 0x01, 0x93, 0xe5, 0xc8, 0xe1,
	0x9e, 0xaf, 0xf1, 0x7f, 0x6a, 0x78, 0x40, 0xe6, 0x31, 0x40, 0x81, 0x4e, 0x00, 0x04, 0x16, 0xf5,
	0x64, 0x0d, 0x54, 0x9b, 0x1d, 0x30, 0x46, 0xc2, 0x16, 0x51, 0xd6, 0x3c, 0x20, 0x13, 0xf7, 0x6e,
	0x7d, 0xa0, 0x30, 0x6f, 0x89, 0x4c, 0xb8, 0x6e, 0x51, 0x8f, 0xcd, 0x36, 0x6a, 0x76, 0xa7, 0x0e,
	0x53, 0x52, 0x19, 0xee, 0x02, 0x1b, 0x2b, 0x03, 0x73, 0x25, 0x58, 0xae, 0xaf, 0xdf, 0x35, 0x40,
	0x84, 0xb7, 0xc0, 0x96, 0x01, 0x2d, 0x32, 0x4c, 0x38, 0xab, 0x30, 0xcb, 0xaf, 0x8a, 0xaa, 0x70,
	0xe6, 0x18, 0x79, 0x66, 0x1f, 0xde, 0xa4, 0xb4, 0xd6, 0xc0, 0xfe, 0xee, 0x8e, 0xd2, 0x4a, 0x69,
	0x2d, 0xf9, 0x4e, 0x6e, 0xa6, 0x1b, 0xf5, 0xd7, 0xf1, 0x08, 0xc2, 0xb7, 0xd4, 0x55, 0xcb, 0x6f,
	0x99, 0x41, 0x7d, 0x4b, 0x3e, 0xda, 0x92, 0x53, 0x30, 0xda, 0xe8, 0xf8, 0x41, 0x6d, 0xd3, 0xac,
	0x07, 0x2e, 0x07, 0x34, 0xf4, 0x1b, 0x10, 0x36, 0x2d, 0xb3, 0x16, 0xfd, 0x9f, 0xfb, 0xe1, 0x50,
	0x82, 0x9a, 0xe8, 0x10, 0xbb, 0x4e, 0xa9, 0xbf, 0xaf, 0x92, 0xbb, 0x30, 0x62, 0xee, 0x98, 0xd6,
	0xd3, 0xbc, 0xdb, 0x74, 0x19, 0x90, 0x25, 0x18, 0x64, 0x31, 0xa1, 0xc7, 0x2b, 0x01, 0x27, 0x26,
	0xef, 0xc0, 0x01, 0x7c, 0x5b, 0xae, 0x6d, 0xb9, 0x76, 0x83, 0x3f, 0xf5, 0x94, 0x66, 0x36, 0x8a,
	0x3c, 0xee, 0xb8, 0x76, 0x83, 0xbc, 0x0b, 0x07, 0xe9, 0xa3, 0x36, 0xad, 0x07, 0xb4, 0xc1, 0xa3,
	0x16, 0x2f, 0xc0, 0x96, 0x66, 0x3a, 0x26, 0xb8, 0xb0, 0x10, 0x45, 0xee, 0x01, 0x34, 0xac, 0xcd,
	0x4d, 0xea, 0xd1, 0x30, 0xc3, 0xda, 0xdf, 0xdb, 0xed, 0xaa, 0xcb, 0x41, 0xff, 0x25, 0x4c, 0x16,
	0x32, 0xbc, 0x03, 0x9d, 0xf4, 0x43, 0x20, 0x62, 0x6d, 0x5a, 0xb2, 0x17, 0x73, 0xa3, 0x6f, 0x2a,
	0x3c, 0xde, 0x0b, 0x96, 0xc6, 0xc4, 0x46, 0x72, 0x0e, 0xfd, 0x2c, 0xc6, 0x0c, 0x1c, 0x1a, 0x66,
	0x9e, 0x8b, 0xdd, 0x35, 0x94, 0x31, 0xee, 0x4f, 0xfa, 0xe0, 0x70, 0x64, 0x08, 0xbf, 0xbd, 0xb1,
	0x55, 0xfe, 0x7f, 0x37, 0x2c, 0x76, 0x43, 0xfd, 0xb7, 0xc5, 0xfd, 0x21, 0x77, 0x89, 0xd1, 0xcc,
	0x0e, 0x54, 0xc4, 0xdc, 0x1f, 0x5b, 0xc1, 0x56, 0x2d, 0x2a, 0x88, 0xd2, 0xfb, 0x65, 0xa6, 0x81,
	0x8c, 0x23, 0x1b, 0xd9, 0xf3, 0xea, 0xe7, 0xe0, 0x6c, 0x32, 0x3e, 0x86, 0xa1, 0x36, 0x4c, 0xde,
	0x2d, 0x3f, 0xb0, 0xea, 0xd2, 0xf8, 0xf3, 0x30, 0x16, 0xeb, 0x20, 0x04, 0x06, 0xc2, 0xf3, 0x02,
	0xcf, 0x0e, 0xf6, 0x77, 0x68, 0xe3, 0x2e, 0x9c, 0x67, 0xc0, 0xe0, 0x1f, 0xba, 0x8f, 0x05, 0xb1,
	0x82, 0x39, 0xe4, 0x35, 0x19, 0x7c, 0xd9, 0x8a, 0xda, 0xbe, 0x50, 0x98, 0x48, 0x46, 0xf9, 0x18,
	0x11, 0x62, 0xfd, 0x7b, 0x1a, 0x1c, 0xe3, 0xd7, 0xa7, 0x55, 0x73, 0x1b, 0xb3, 0x73, 0xd5, 0xfb,
	0x31, 0x79, 0x09, 0x08, 0x4b, 0xb2, 0xb2, 0xaa, 0x8f, 0xe3, 0x61, 0xcf, 0x5a, 0xd4, 0xb3, 0x5f,
	0x81, 0xe9, 0xba, 0xeb, 0x04, 0x9e, 0x59, 0x0f, 0x6a, 0x58, 0xba, 0xac, 0xb5, 0xcc, 0x6d, 0xea,
	0x71, 0x87, 0x36, 0xa6, 0x44, 0x2f, 0x56, 0x3e, 0x57, 0xc3, 0x3e, 0xfd, 0x87, 0x03, 0x70, 0x3c,
	0x5b, 0x40, 0xf9, 0xe2, 0x33, 0xc6, 0x84, 0x68, 0xe3, 0x95, 0xa6, 0x87, 0x3a, 0xd4, 0x81, 0x90,
	0x81, 0x2c, 0x3c, 0x99, 0x70, 0xd8, 0x6e, 0xd7, 0x02, 0x77, 0x9b, 0x3a, 0x98, 0xc1, 0xf9, 0x9d,
	0x76, 0xdb, 0xee, 0xa5, 0xd8, 0xb4, 0xe2, 0x04, 0x06, 0xb1, 0xdb, 0xeb, 0x21, 0x2f, 0x16, 0x11,
	0xd7, 0x18, 0x27, 0x52, 0x83, 0x29, 0x39, 0xc5, 0xc3, 0x8e, 0x1b, 0xd0, 0x1a, 0xc7, 0x39, 0xf5,
	0xb6, 0xb3, 0x27, 0x70, 0x86, 0x77, 0x42, 0x4e, 0xef, 0x85, 0x8c, 0xc8, 0x2f, 0xc2, 0xa4, 0x9c,
	0x60, 0xc3, 0xf4, 0x05, 0xff, 0xde, 0xf6, 0xfb, 0x38, 0xf2, 0x5f, 0x34, 0x7d, 0x64, 0xff, 0x01,
	0x4c, 0xb2, 0x35, 0xe7, 0xb2, 0x4b, 0x78, 0xd1, 0xa0, 0x32, 0xbc, 0x08, 0xef, 0x9d, 0x13, 0x21,
	0x17, 0x26, 0xb6, 0x80, 0x82, 0x91, 0xf7, 0xd1, 0xa7, 0x98, 0xd4, 0x92, 0xf3, 0x50, 0x39, 0xce,
	0x1a, 0x77, 0xbf, 0x50, 0x60, 0xc1, 0x58, 0xbf, 0x8f, 0x99, 0x05, 0x16, 0x5d, 0x96, 0x96, 0x3d,
	0xb7, 0xf5, 0x9e, 0xd9, 0xb1, 0x65, 0xc5, 0x77, 0x0e, 0x26, 0x77, 0xc2, 0xef, 0x5a, 0x56, 0x39,
	0x76, 0x82, 0x75, 0x45, 0xfd, 0x59, 0x02, 0x09, 0x32, 0x18, 0xa2, 0x6b, 0x16, 0x96, 0x68, 0x44,
	0x95, 0xe7, 0x8e, 0xe5, 0x07, 0xae, 0x67, 0xd5, 0x65, 0x46, 0x5f, 0x77, 0xbd, 0x86, 0xda, 0xd3,
	0x41, 0x80, 0x07, 0x52, 0x1e, 0x0b, 0x59, 0x9e, 0x1a, 0x13, 0x77, 0x10, 0xd6, 0x81, 0x11, 0x63,
	0x76, 0xaf, 0xab, 0xa7, 0x64, 0x74, 0x20, 0x88, 0x7c, 0xe9, 0x7f, 0xac, 0xc1, 0x24, 0xeb, 0xe6,
	0xd3, 0xee, 0xde, 0x6f, 0xb3, 0x8a, 0x44, 0x18, 0x0d, 0xf8, 0x34, 0x4d, 0xcf, 0xed, 0xb4, 0xc3,
	0xfb, 0x8f, 0x4f, 0xeb, 0x18, 0xf7, 0xc6, 0x59, 0xcf, 0x9b, 0xd8, 0xb1, 0x46, 0xeb, 0xe4, 0x08,
	0xec, 0x6f, 0x99, 0x8f, 0x6a, 0x66, 0x93, 0x62, 0x14, 0x1c, 0x6a, 0x99, 0x8f, 0x16, 0x9a, 0x34,
	0x34, 0x83, 0xe5, 0xd4, 0xed, 0x4e, 0x28, 0xaf, 0xf9, 0x71, 0x6d, 0x8b, 0x4f, 0x82, 0x50, 0x97,
	0x09, 0xec, 0x32, 0xcc, 0x8f, 0x71, 0x76, 0xf2, 0x02, 0x8c, 0x8b, 0xf1, 0xb2, 0xa4, 0x34, 0x88,
	0x77, 0x13, 0xde, 0x2e, 0x4a, 0x45, 0xfa, 0xef, 0x68, 0x78, 0xd1, 0xe1, 0x26, 0x7b, 0xcf, 0xb5,
	0xcd, 0xc0, 0xb2, 0xad, 0x60, 0x57, 0x29, 0xda, 0xd5, 0xe1, 0x30, 0xd7, 0x0f, 0x45, 0xaa, 0xb9,
	0x5c, 0x71, 0x95, 0xac, 0x3f, 0x63, 0xbd, 0x8c, 0xc9, 0x20, 0xdd, 0xa8, 0xff, 0x7a, 0x5f, 0xcc,
	0x4d, 0xa3, 0x22, 0xca, 0x82, 0x0f, 0xec, 0xc8, 0x56, 0x7c, 0x4d, 0x7e, 0xb1, 0x4c, 0x3e, 0xd5,
	0xa5, 0x26, 0xef, 0xc3, 0xb8, 0x50, 0x46, 0xae, 0x5d, 0x5f, 0xea, 0xc5, 0x14, 0xf1, 0xc6, 0x42,
	0x17, 0xb1, 0x9c, 0x91, 0x83, 0xe9, 0x10, 0x72, 0x11, 0x5d, 0xe4, 0x0e, 0x8c, 0x46, 0x8d, 0xd7,
	0xcf, 0x1c, 0xee, 0x9c, 0xa2, 0xc3, 0x19, 0xe0, 0x49, 0xf3, 0x5e, 0xfc, 0x74, 0x11, 0x06, 0xd9,
	0x82, 0x90, 0x3f, 0xd5, 0x60, 0x32, 0x03, 0xb3, 0x4b, 0xae, 0xec, 0x89, 0x4e, 0xcd, 0x84, 0x00,
	0x57, 0xae, 0x96, 0xa6, 0xe3, 0x16, 0xd0, 0x2f, 0xfe, 0xf2, 0x8f, 0xff, 0xed, 0xbb, 0x7d, 0x2f,
	0x91, 0x17, 0xab, 0x0a, 0xb8, 0x6f, 0x14, 0xf2, 0xaf, 0x35, 0x20, 0x69, 0x90, 0x2c, 0xb9, 0xde,
	0x13, 0xb2, 0x96, 0xcb, 0xff, 0xea, 0x53, 0xa0, 0x72, 0xf5, 0x5b, 0x4c, 0x87, 0x79, 0x72, 0x55,
	0x45, 0x87, 0xaa, 0x9f, 0x96, 0xfc, 0x53, 0x0d, 0x26, 0x52, 0xfc, 0xc9, 0x7c, 0x79, 0x99, 0x84,
	0x3a, 0xd7, 0x7b, 0x21, 0x45, 0x6d, 0x6e, 0x32, 0x6d, 0xae, 0x91, 0x2b, 0xbd, 0x69, 0x43, 0x7e,
	0xa8, 0xc1, 0x78, 0x12, 0x05, 0x4c, 0xae, 0x29, 0xfb, 0x47, 0x02, 0x58, 0x5c, 0x99, 0xef, 0x81,
	0x12, 0x35, 0x79, 0x8d, 0x69, 0x72, 0x95, 0x5c, 0x56, 0xd2, 0x84, 0x26, 0x65, 0xfe, 0xbe, 0x06,
	0xa3, 0x11, 0xd0, 0x2d, 0xb9, 0xb4, 0xf7, 0xa2, 0xa6, 0x50, 0xbd, 0x95, 0x57, 0xca, 0x11, 0xa1,
	0xe4, 0x2f, 0x33, 0xc9, 0x5f, 0x24, 0xb3, 0x45, 0x92, 0xfb, 0x6d, 0x37, 0xa8, 0xe2, 0x2b, 0x3f,
	0xf9, 0x43, 0x0d, 0xa0, 0xcb, 0x89, 0x5c, 0x2c, 0x31, 0xad, 0x10, 0xf5, 0x52, 0x29, 0x1a, 0x94,
	0xf4, 0x06, 0x93, 0xf4, 0x0a, 0x79, 0x45, 0x55, 0xd2, 0xea, 0x63, 0x79, 0x2a, 0x3c, 0x21, 0x7f,
	0xae, 0xc1, 0x58, 0x0c, 0x96, 0x4b, 0x2e, 0x2b, 0x09, 0x91, 0x44, 0xef, 0x55, 0xae, 0x94, 0x25,
	0x2b, 0xe3, 0xec, 0x4c, 0x7c, 0x57, 0xd0, 0xc6, 0x14, 0xf8, 0x7b, 0x0d, 0xc6, 0x93, 0x20, 0x50,
	0x05, 0x67, 0xcf, 0x81, 0xf1, 0x2a, 0x38, 0x7b, 0x1e, 0xe2, 0x54, 0x7f, 0x9b, 0x69, 0x72, 0x9b,
	0xbc, 0xa1, 0xa6, 0x49, 0xcc, 0x0e, 0xd5, 0xc7, 0xb1, 0x34, 0xed, 0x09, 0xf9, 0x33, 0x0d, 0x0e,
	0x44, 0x61, 0xa3, 0x44, 0xd1, 0x8d, 0xe3, 0xe0, 0xcf, 0xca, 0xe5, 0x92, 0x54, 0xa5, 0x8d, 0xd2,
	0xb2, 0x1a, 0xfc, 0xb5, 0x39, 0x66, 0x94, 0x1f, 0x6b, 0x40, 0xd2, 0x90, 0x52, 0x85, 0xf3, 0x21,
	0x17, 0xc6, 0xaa, 0x70, 0x3e, 0xe4, 0x63, 0x58, 0xf5, 0x25, 0xa6, 0xcf, 0x4d, 0x72, 0xa3, 0x48,
	0x9f, 0x86, 0xa4, 0xcf, 0xd1, 0xea, 0x1f, 0x34, 0x98, 0xcc, 0x00, 0x9a, 0x92, 0x32, 0xa2, 0xa5,
	0xf6, 0xcd, 0x8d, 0xde, 0x88, 0x7b, 0x54, 0x2c, 0x7b, 0x0f, 0xfd, 0x97, 0x06, 0xd3, 0xd9, 0x48,
	0x44, 0x72, 0x53, 0x71, 0x3f, 0xe4, 0x00, 0x56, 0x2b, 0xb7, 0x7a, 0xa6, 0x47, 0x0d, 0xdf, 0x61,
	0x1a, 0xbe, 0x4d, 0x56, 0xca, 0x68, 0x58, 0xbc, 0xb7, 0xfe, 0x47, 0x83, 0x53, 0xc9, 0x59, 0xd7,
	0x3d, 0xd3, 0xf1, 0x2d, 0xea, 0x04, 0x5f, 0x17, 0xbd, 0x7f, 0x9e, 0xe9, 0xfd, 0x2e, 0x59, 0x53,
	0xd4, 0x3b, 0x10, 0x0a, 0xd4, 0x14, 0x56, 0xe0, 0x07, 0x1a, 0x4c, 0xa4, 0xb0, 0x6f, 0x0a, 0xe9,
	0x4e, 0x1e, 0x6c, 0xb4, 0x72, 0xbd, 0x17, 0x52, 0xd4, 0xf4, 0x0a, 0xd3, 0xf4, 0x65, 0x32, 0xa7,
	0xba, 0x39, 0x51, 0xdc, 0x1f, 0x69, 0x30, 0x9e, 0xc2, 0x4a, 0x5e, 0x2b, 0x2d, 0x88, 0x7a, 0xe4,
	0xcf, 0x83, 0xe0, 0xe9, 0x8b, 0x4c, 0x83, 0x1b, 0xe4, 0x7a, 0x39, 0x0d, 0x62, 0x7b, 0xf0, 0xdf,
	0x35, 0x38, 0x92, 0x03, 0x9a, 0x23, 0xb7, 0x4a, 0x8b, 0x16, 0x87, 0xec, 0x55, 0x5e, 0xef, 0x9d,
	0x01, 0xaa, 0xb8, 0xc2, 0x54, 0x7c, 0x83, 0x2c, 0x94, 0x52, 0x51, 0x54, 0xc6, 0x62, 0x9a, 0xfe,
	0xad, 0x06, 0x53, 0x59, 0x20, 0x06, 0x72, 0xa3, 0x44, 0xce, 0x9c, 0x82, 0xfb, 0x55, 0x5e, 0xeb,
	0x91, 0xba, 0x4c, 0x1a, 0x25, 0x1b, 0x92, 0x1b, 0xea, 0x0f, 0x34, 0x98, 0x14, 0x59, 0x70, 0x04,
	0x4a, 0xa1, 0x90, 0xb1, 0xa6, 0x31, 0x19, 0x0a, 0x19, 0x6b, 0x06, 0x5a, 0x43, 0x2d, 0x63, 0x6d,
	0x31, 0xc2, 0x1a, 0x03, 0x48, 0x90, 0xdf, 0xd5, 0x60, 0x44, 0x42, 0x30, 0xc8, 0x85, 0x3d, 0x67,
	0x4d, 0xe2, 0x38, 0x2a, 0x17, 0xcb, 0x90, 0xa0, 0x98, 0xe7, 0x99, 0x98, 0xe7, 0xc8, 0xd9, 0x22,
	0x31, 0xdb, 0x52, 0xaa, 0xbf, 0xd1, 0x60, 0x32, 0x03, 0x26, 0x48, 0xca, 0x5c, 0x17, 0x53, 0x72,
	0xdf, 0xe8, 0x8d, 0xb8, 0xcc, 0xa5, 0x46, 0x6a, 0x90, 0x72, 0x95, 0xff, 0xd6, 0xa0, 0x92, 0x0f,
	0x44, 0x24, 0x8b, 0x3d, 0xc8, 0x96, 0x40, 0x7b, 0x56, 0xde, 0x78, 0x2a, 0x1e, 0x65, 0x76, 0x7c,
	0xae, 0x9a, 0xb1, 0x1d, 0xff, 0x5b, 0x7d, 0x70, 0x46, 0x01, 0xe7, 0x47, 0xde, 0x2e, 0x21, 0xf7,
	0x5e, 0x90, 0xd7, 0xca, 0xdd, 0x67, 0xc3, 0x0c, 0x57, 0x63, 0x8d, 0xad, 0xc6, 0x2a, 0x79, 0xbb,
	0x30, 0x3c, 0x48, 0xac, 0xa4, 0xda, 0xba, 0xfc, 0xa3, 0x06, 0x93, 0x19, 0xc8, 0x3f, 0x05, 0xe7,
	0xce, 0x87, 0x2d, 0x2a, 0x38, 0x77, 0x01, 0x66, 0x51, 0xbf, 0xcd, 0xf4, 0xbc, 0x45, 0x5e, 0x2b,
	0xb4, 0xba, 0xfc, 0x1d, 0x41, 0xe4, 0x97, 0x15, 0x31, 0xcd, 0x7e, 0xaa, 0xc1, 0x91, 0x1c, 0x70,
	0xa0, 0xc2, 0x69, 0x56, 0x8c, 0x72, 0x54, 0x38, 0xcd, 0xf6, 0x80, 0x38, 0xaa, 0x1d, 0xd8, 0x94,
	0x31, 0xc9, 0x55, 0xf1, 0x4b, 0x0d, 0xa6, 0xb3, 0x51, 0x84, 0x0a, 0xc9, 0x63, 0x21, 0x18, 0x52,
	0x21, 0x79, 0x2c, 0x46, 0x42, 0xea, 0x77, 0x98, 0x7e, 0x8b, 0xe4, 0xf5, 0x52, 0x56, 0xc4, 0x1f,
	0xa3, 0xa4, 0x0c, 0x99, 0x03, 0x7f, 0x54, 0x30, 0x64, 0x31, 0x58, 0x5c, 0xc1, 0x90, 0x7b, 0x20,
	0x2f, 0xd5, 0x0c, 0xc9, 0x7f, 0x88, 0x25, 0x4a, 0xc2, 0xa9, 0x80, 0xfc, 0x97, 0x1a, 0x4c, 0xa4,
	0xa1, 0x58, 0x8a, 0x85, 0x80, 0x0c, 0x5c, 0xa1, 0x42, 0x32, 0x9c, 0x0b, 0x0f, 0xd4, 0xaf, 0x32,
	0x85, 0x2e, 0x90, 0x6a, 0x91, 0x42, 0x19, 0x18, 0x2c, 0xf2, 0x77, 0x1a, 0xcc, 0x3c, 0xe8, 0xa2,
	0xba, 0xbe, 0x16, 0xca, 0x28, 0x95, 0x65, 0xa3, 0x78, 0xb7, 0xa4, 0x52, 0x3f, 0x12, 0x8f, 0x33,
	0x71, 0x64, 0xa0, 0x42, 0x80, 0xcc, 0xc7, 0x3b, 0x2a, 0x04, 0xc8, 0x02, 0x20, 0xa4, 0x3e, 0xcf,
	0x74, 0xba, 0x44, 0x2e, 0x28, 0x1b, 0x48, 0x80, 0xf6, 0xc8, 0x17, 0x1a, 0x4c, 0x67, 0x23, 0xb4,
	0x14, 0x22, 0x46, 0x21, 0x36, 0x4c, 0x21, 0x62, 0x14, 0x43, 0xc3, 0xf4, 0x37, 0x99, 0x5a, 0x0b,
	0xe4, 0x56, 0x91, 0x5a, 0x31, 0xc0, 0x54, 0x14, 0x2a, 0x56, 0x7d, 0x8c, 0x5f, 0x4f, 0x98, 0xc9,
	0x32, 0xf0, 0x51, 0x0a, 0x26, 0xcb, 0x47, 0x74, 0x29, 0x98, 0xac, 0x00, 0xea, 0xa5, 0x66, 0xb2,
	0x4c, 0x30, 0x18, 0xf9, 0x4c, 0x83, 0x89, 0x14, 0x3c, 0x47, 0x61, 0x3b, 0xe5, 0x01, 0xbe, 0x14,
	0xb6, 0x53, 0x2e, 0x1a, 0x48, 0xad, 0xd8, 0x93, 0xc6, 0x0b, 0x55, 0x1f, 0x47, 0x20, 0x66, 0x4f,
	0xc8, 0xbf, 0x68, 0x70, 0x24, 0x07, 0x90, 0xa2, 0x10, 0xd1, 0x8b, 0xd1, 0x42, 0x0a, 0x11, 0x7d,
	0x0f, 0x2c, 0x8c, 0x5a, 0xcc, 0x10, 0xff, 0x19, 0x49, 0x06, 0x5c, 0x86, 0xfc, 0xab, 0x06, 0x47,
	0x73, 0x41, 0x27, 0x64, 0xa1, 0x8c, 0x27, 0x65, 0x82, 0x62, 0x2a, 0x8b, 0x4f, 0xc3, 0x02, 0xb5,
	0x7c, 0x95, 0x69, 0x79, 0x99, 0x5c, 0x52, 0x76, 0x49, 0x06, 0xdc, 0x0c, 0xef, 0x6d, 0x3e, 0xf9,
	0x76, 0x1f, 0x4c, 0x65, 0x81, 0x48, 0x48, 0xe1, 0x1b, 0x60, 0x01, 0x2e, 0xa6, 0x72, 0xad, 0x3c,
	0x21, 0x2a, 0xd2, 0x61, 0x8a, 0xb8, 0xa4, 0x55, 0x78, 0xeb, 0xe4, 0xf9, 0x44, 0x8b, 0xb1, 0xe0,
	0x48, 0xe6, 0x64, 0x3a, 0x55, 0x7d, 0x9c, 0xc6, 0xde, 0x3c, 0xa9, 0x3e, 0xce, 0x86, 0xd8, 0x3c,
	0x21, 0x3f, 0xd1, 0xf0, 0x27, 0x04, 0x29, 0xb8, 0x82, 0xc2, 0xe6, 0xcc, 0xc3, 0x4c, 0x28, 0x6c,
	0xce, 0x5c, 0x74, 0x84, 0xda, 0x75, 0x89, 0x23, 0x32, 0xa4, 0xd6, 0xd5, 0xc7, 0x19, 0x10, 0x0d,
	0x76, 0x2d, 0x98, 0xce, 0x06, 0x41, 0x28, 0x9c, 0x13, 0x85, 0x00, 0x0c, 0x85, 0x73, 0xa2, 0x18,
	0x7d, 0xa1, 0x56, 0x26, 0xd9, 0x92, 0x3c, 0x6a, 0x31, 0xa8, 0x06, 0xf9, 0x2b, 0x0d, 0x0e, 0x25,
	0x60, 0xd9, 0x64, 0xef, 0x87, 0xeb, 0x6c, 0x04, 0x78, 0xe5, 0x5a, 0x79, 0xc2, 0x32, 0x31, 0x26,
	0x85, 0x11, 0x8f, 0x1c, 0x72, 0x7f, 0xa4, 0xc1, 0xc1, 0x38, 0xe8, 0x5b, 0xe1, 0xdd, 0x3e, 0x13,
	0x43, 0xae, 0xf0, 0x6e, 0x9f, 0x8d, 0x2e, 0xd7, 0x2f, 0x31, 0x25, 0xce, 0x93, 0x6f, 0x16, 0x29,
	0x91, 0xc0, 0x9f, 0x93, 0x4f, 0x35, 0x18, 0x4f, 0x62, 0x31, 0x14, 0x6a, 0xa6, 0x39, 0x08, 0x93,
	0xca, 0x7c, 0x0f, 0x94, 0x28, 0xfe, 0x02, 0x13, 0xff, 0x55, 0x32, 0xaf, 0x10, 0x38, 0xba, 0x18,
	0x8f, 0x68, 0xc8, 0x58, 0xdc, 0xfa, 0xe4, 0x8b, 0x93, 0xda, 0x67, 0x5f, 0x9c, 0xd4, 0x7e, 0xfa,
	0xc5, 0x49, 0xed, 0x37, 0xbe, 0x3c, 0xb9, 0xef, 0xb3, 0x2f, 0x4f, 0xee, 0xfb, 0xa7, 0x2f, 0x4f,
	0xee, 0xfb, 0xf0, 0x5e, 0x04, 0x3d, 0xb2, 0x22, 0xd8, 0xdf, 0x35, 0x37, 0xfc, 0xee, 0x64, 0xe7,
	0xeb, 0xae, 0x47, 0xa3, 0x9f, 0x5b, 0xa6, 0xe5, 0x60, 0x7d, 0xcc, 0xef, 0x4a, 0xc2, 0x90, 0x26,
	0x1b, 0x43, 0xec, 0xff, 0xa1, 0xbb, 0xf4, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x92, 0xd1,
	0x74, 0x7d, 0x4f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Retrieves exchange params
	QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPrice(ctx context.Context, in *QuerySpotMidPriceRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPrice(ctx context.Context, in *QueryDerivativeMidPriceRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that contribute to the market's insurance fund
	DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MarketMakingPoolInfo(ctx context.Context, in *MarketMakingPoolInfoRequest, opts ...grpc.CallOption) (*MarketMakingPoolInfoResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
	QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is a registered DMM
	IsRegisteredDMM(ctx context.Context, in *QueryIsRegisteredDMMRequest, opts ...grpc.CallOption) (*QueryIsRegisteredDMMResponse, error)
	// Retrieves all registered DMMs
	RegisteredDMMs(ctx context.Context, in *QueryRegisteredDMMsRequest, opts ...grpc.CallOption) (*QueryRegisteredDMMsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets trading history.
	MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error) {
	out := new(QueryExchangeParamsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/QueryExchangeParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error) {
	out := new(QuerySubaccountDepositsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error) {
	out := new(QuerySubaccountDepositResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error) {
	out := new(QueryExchangeBalancesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExchangeBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error) {
	out := new(QuerySpotMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error) {
	out := new(QuerySpotMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error) {
	out := new(QuerySpotOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error) {
	out := new(QueryTraderSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderSpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMidPrice(ctx context.Context, in *QuerySpotMidPriceRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceResponse, error) {
	out := new(QuerySpotMidPriceResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SpotMidPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMidPrice(ctx context.Context, in *QueryDerivativeMidPriceRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceResponse, error) {
	out := new(QueryDerivativeMidPriceResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMidPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error) {
	out := new(QueryDerivativeOrderbookResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeOrderbook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderDerivativeOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error) {
	out := new(QueryDerivativeMarketsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error) {
	out := new(QueryDerivativeMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error) {
	out := new(QueryDerivativeMarketAddressResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/DerivativeMarketAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error) {
	out := new(QuerySubaccountTradeNonceResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountTradeNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExchangeModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error) {
	out := new(QueryPositionsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/Positions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error) {
	out := new(QuerySubaccountPositionsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error) {
	out := new(QuerySubaccountPositionInMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	out := new(QuerySubaccountEffectivePositionInMarketResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error) {
	out := new(QueryPerpetualMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PerpetualMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error) {
	out := new(QueryExpiryFuturesMarketInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error) {
	out := new(QueryPerpetualMarketFundingResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PerpetualMarketFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error) {
	out := new(QuerySubaccountOrderMetadataResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TradeRewardPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error) {
	out := new(QueryTradeRewardCampaignResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/TradeRewardCampaign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error) {
	out := new(QueryFeeDiscountAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error) {
	out := new(QueryFeeDiscountScheduleResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error) {
	out := new(QueryBalanceMismatchesResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/BalanceMismatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error) {
	out := new(QueryBalanceWithBalanceHoldsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error) {
	out := new(QueryFeeDiscountTierStatisticsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketMakingPoolInfo(ctx context.Context, in *MarketMakingPoolInfoRequest, opts ...grpc.CallOption) (*MarketMakingPoolInfoResponse, error) {
	out := new(MarketMakingPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/MarketMakingPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error) {
	out := new(QueryMarketIDFromVaultResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error) {
	out := new(QueryHistoricalTradeRecordsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/HistoricalTradeRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsRegisteredDMM(ctx context.Context, in *QueryIsRegisteredDMMRequest, opts ...grpc.CallOption) (*QueryIsRegisteredDMMResponse, error) {
	out := new(QueryIsRegisteredDMMResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/IsRegisteredDMM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RegisteredDMMs(ctx context.Context, in *QueryRegisteredDMMsRequest, opts ...grpc.CallOption) (*QueryRegisteredDMMsResponse, error) {
	out := new(QueryRegisteredDMMsResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/RegisteredDMMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error) {
	out := new(QueryMarketVolatilityResponse)
	err := c.cc.Invoke(ctx, "/injective.exchange.v1beta1.Query/MarketVolatility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Retrieves exchange params
	QueryExchangeParams(context.Context, *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(context.Context, *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(context.Context, *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(context.Context, *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(context.Context, *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(context.Context, *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(context.Context, *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPrice(context.Context, *QuerySpotMidPriceRequest) (*QuerySpotMidPriceResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPrice(context.Context, *QueryDerivativeMidPriceRequest) (*QueryDerivativeMidPriceResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(context.Context, *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(context.Context, *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(context.Context, *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that contribute to the market's insurance fund
	DerivativeMarketAddress(context.Context, *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(context.Context, *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(context.Context, *QueryPositionsRequest) (*QueryPositionsResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(context.Context, *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(context.Context, *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(context.Context, *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(context.Context, *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(context.Context, *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(context.Context, *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(context.Context, *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(context.Context, *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(context.Context, *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(context.Context, *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(context.Context, *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(context.Context, *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(context.Context, *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MarketMakingPoolInfo(context.Context, *MarketMakingPoolInfoRequest) (*MarketMakingPoolInfoResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
	QueryMarketIDFromVault(context.Context, *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(context.Context, *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is a registered DMM
	IsRegisteredDMM(context.Context, *QueryIsRegisteredDMMRequest) (*QueryIsRegisteredDMMResponse, error)
	// Retrieves all registered DMMs
	RegisteredDMMs(context.Context, *QueryRegisteredDMMsRequest) (*QueryRegisteredDMMsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets trading history.
	MarketVolatility(context.Context, *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryExchangeParams(ctx context.Context, req *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExchangeParams not implemented")
}
func (*UnimplementedQueryServer) SubaccountDeposits(ctx context.Context, req *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposits not implemented")
}
func (*UnimplementedQueryServer) SubaccountDeposit(ctx context.Context, req *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposit not implemented")
}
func (*UnimplementedQueryServer) ExchangeBalances(ctx context.Context, req *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeBalances not implemented")
}
func (*UnimplementedQueryServer) SpotMarkets(ctx context.Context, req *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarkets not implemented")
}
func (*UnimplementedQueryServer) SpotMarket(ctx context.Context, req *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarket not implemented")
}
func (*UnimplementedQueryServer) SpotOrderbook(ctx context.Context, req *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrderbook not implemented")
}
func (*UnimplementedQueryServer) TraderSpotOrders(ctx context.Context, req *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderSpotOrders not implemented")
}
func (*UnimplementedQueryServer) SpotMidPrice(ctx context.Context, req *QuerySpotMidPriceRequest) (*QuerySpotMidPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMidPrice not implemented")
}
func (*UnimplementedQueryServer) DerivativeMidPrice(ctx context.Context, req *QueryDerivativeMidPriceRequest) (*QueryDerivativeMidPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMidPrice not implemented")
}
func (*UnimplementedQueryServer) DerivativeOrderbook(ctx context.Context, req *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeOrderbook not implemented")
}
func (*UnimplementedQueryServer) TraderDerivativeOrders(ctx context.Context, req *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeOrders not implemented")
}
func (*UnimplementedQueryServer) TraderDerivativeTransientOrders(ctx context.Context, req *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeTransientOrders not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarkets(ctx context.Context, req *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarkets not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarket(ctx context.Context, req *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarket not implemented")
}
func (*UnimplementedQueryServer) DerivativeMarketAddress(ctx context.Context, req *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarketAddress not implemented")
}
func (*UnimplementedQueryServer) SubaccountTradeNonce(ctx context.Context, req *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountTradeNonce not implemented")
}
func (*UnimplementedQueryServer) ExchangeModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeModuleState not implemented")
}
func (*UnimplementedQueryServer) Positions(ctx context.Context, req *QueryPositionsRequest) (*QueryPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Positions not implemented")
}
func (*UnimplementedQueryServer) SubaccountPositions(ctx context.Context, req *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositions not implemented")
}
func (*UnimplementedQueryServer) SubaccountPositionInMarket(ctx context.Context, req *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositionInMarket not implemented")
}
func (*UnimplementedQueryServer) SubaccountEffectivePositionInMarket(ctx context.Context, req *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountEffectivePositionInMarket not implemented")
}
func (*UnimplementedQueryServer) PerpetualMarketInfo(ctx context.Context, req *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketInfo not implemented")
}
func (*UnimplementedQueryServer) ExpiryFuturesMarketInfo(ctx context.Context, req *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiryFuturesMarketInfo not implemented")
}
func (*UnimplementedQueryServer) PerpetualMarketFunding(ctx context.Context, req *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketFunding not implemented")
}
func (*UnimplementedQueryServer) SubaccountOrderMetadata(ctx context.Context, req *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrderMetadata not implemented")
}
func (*UnimplementedQueryServer) TradeRewardPoints(ctx context.Context, req *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardPoints not implemented")
}
func (*UnimplementedQueryServer) PendingTradeRewardPoints(ctx context.Context, req *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTradeRewardPoints not implemented")
}
func (*UnimplementedQueryServer) TradeRewardCampaign(ctx context.Context, req *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardCampaign not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountAccountInfo(ctx context.Context, req *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountAccountInfo not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountSchedule(ctx context.Context, req *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountSchedule not implemented")
}
func (*UnimplementedQueryServer) BalanceMismatches(ctx context.Context, req *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceMismatches not implemented")
}
func (*UnimplementedQueryServer) BalanceWithBalanceHolds(ctx context.Context, req *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceWithBalanceHolds not implemented")
}
func (*UnimplementedQueryServer) FeeDiscountTierStatistics(ctx context.Context, req *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountTierStatistics not implemented")
}
func (*UnimplementedQueryServer) MarketMakingPoolInfo(ctx context.Context, req *MarketMakingPoolInfoRequest) (*MarketMakingPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketMakingPoolInfo not implemented")
}
func (*UnimplementedQueryServer) QueryMarketIDFromVault(ctx context.Context, req *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarketIDFromVault not implemented")
}
func (*UnimplementedQueryServer) HistoricalTradeRecords(ctx context.Context, req *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalTradeRecords not implemented")
}
func (*UnimplementedQueryServer) IsRegisteredDMM(ctx context.Context, req *QueryIsRegisteredDMMRequest) (*QueryIsRegisteredDMMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRegisteredDMM not implemented")
}
func (*UnimplementedQueryServer) RegisteredDMMs(ctx context.Context, req *QueryRegisteredDMMsRequest) (*QueryRegisteredDMMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredDMMs not implemented")
}
func (*UnimplementedQueryServer) MarketVolatility(ctx context.Context, req *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketVolatility not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryExchangeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExchangeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/QueryExchangeParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExchangeParams(ctx, req.(*QueryExchangeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposits(ctx, req.(*QuerySubaccountDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposit(ctx, req.(*QuerySubaccountDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExchangeBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeBalances(ctx, req.(*QueryExchangeBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarkets(ctx, req.(*QuerySpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarket(ctx, req.(*QuerySpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrderbook(ctx, req.(*QuerySpotOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderSpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderSpotOrders(ctx, req.(*QueryTraderSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMidPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMidPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMidPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SpotMidPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMidPrice(ctx, req.(*QuerySpotMidPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMidPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMidPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMidPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMidPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMidPrice(ctx, req.(*QueryDerivativeMidPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeOrderbook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeOrderbook(ctx, req.(*QueryDerivativeOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderDerivativeOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeTransientOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TraderDerivativeTransientOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarkets(ctx, req.(*QueryDerivativeMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarket(ctx, req.(*QueryDerivativeMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarketAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/DerivativeMarketAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, req.(*QueryDerivativeMarketAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountTradeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountTradeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountTradeNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, req.(*QuerySubaccountTradeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExchangeModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Positions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Positions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/Positions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Positions(ctx, req.(*QueryPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositions(ctx, req.(*QuerySubaccountPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountPositionInMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, req.(*QuerySubaccountPositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountEffectivePositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountEffectivePositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountEffectivePositionInMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, req.(*QuerySubaccountEffectivePositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PerpetualMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, req.(*QueryPerpetualMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiryFuturesMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiryFuturesMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/ExpiryFuturesMarketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, req.(*QueryExpiryFuturesMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PerpetualMarketFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, req.(*QueryPerpetualMarketFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountOrderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountOrderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/SubaccountOrderMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, req.(*QuerySubaccountOrderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TradeRewardPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingTradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/PendingTradeRewardPoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/TradeRewardCampaign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardCampaign(ctx, req.(*QueryTradeRewardCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, req.(*QueryFeeDiscountAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, req.(*QueryFeeDiscountScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceMismatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceMismatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceMismatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/BalanceMismatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceMismatches(ctx, req.(*QueryBalanceMismatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceWithBalanceHolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceWithBalanceHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/BalanceWithBalanceHolds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, req.(*QueryBalanceWithBalanceHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountTierStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountTierStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/FeeDiscountTierStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, req.(*QueryFeeDiscountTierStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketMakingPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketMakingPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketMakingPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/MarketMakingPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketMakingPoolInfo(ctx, req.(*MarketMakingPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMarketIDFromVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketIDFromVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/QueryMarketIDFromVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, req.(*QueryMarketIDFromVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalTradeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalTradeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/HistoricalTradeRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, req.(*QueryHistoricalTradeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsRegisteredDMM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsRegisteredDMMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsRegisteredDMM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/IsRegisteredDMM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsRegisteredDMM(ctx, req.(*QueryIsRegisteredDMMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RegisteredDMMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRegisteredDMMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RegisteredDMMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/RegisteredDMMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RegisteredDMMs(ctx, req.(*QueryRegisteredDMMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketVolatility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketVolatilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketVolatility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/injective.exchange.v1beta1.Query/MarketVolatility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketVolatility(ctx, req.(*QueryMarketVolatilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "injective.exchange.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryExchangeParams",
			Handler:    _Query_QueryExchangeParams_Handler,
		},
		{
			MethodName: "SubaccountDeposits",
			Handler:    _Query_SubaccountDeposits_Handler,
		},
		{
			MethodName: "SubaccountDeposit",
			Handler:    _Query_SubaccountDeposit_Handler,
		},
		{
			MethodName: "ExchangeBalances",
			Handler:    _Query_ExchangeBalances_Handler,
		},
		{
			MethodName: "SpotMarkets",
			Handler:    _Query_SpotMarkets_Handler,
		},
		{
			MethodName: "SpotMarket",
			Handler:    _Query_SpotMarket_Handler,
		},
		{
			MethodName: "SpotOrderbook",
			Handler:    _Query_SpotOrderbook_Handler,
		},
		{
			MethodName: "TraderSpotOrders",
			Handler:    _Query_TraderSpotOrders_Handler,
		},
		{
			MethodName: "SpotMidPrice",
			Handler:    _Query_SpotMidPrice_Handler,
		},
		{
			MethodName: "DerivativeMidPrice",
			Handler:    _Query_DerivativeMidPrice_Handler,
		},
		{
			MethodName: "DerivativeOrderbook",
			Handler:    _Query_DerivativeOrderbook_Handler,
		},
		{
			MethodName: "TraderDerivativeOrders",
			Handler:    _Query_TraderDerivativeOrders_Handler,
		},
		{
			MethodName: "TraderDerivativeTransientOrders",
			Handler:    _Query_TraderDerivativeTransientOrders_Handler,
		},
		{
			MethodName: "DerivativeMarkets",
			Handler:    _Query_DerivativeMarkets_Handler,
		},
		{
			MethodName: "DerivativeMarket",
			Handler:    _Query_DerivativeMarket_Handler,
		},
		{
			MethodName: "DerivativeMarketAddress",
			Handler:    _Query_DerivativeMarketAddress_Handler,
		},
		{
			MethodName: "SubaccountTradeNonce",
			Handler:    _Query_SubaccountTradeNonce_Handler,
		},
		{
			MethodName: "ExchangeModuleState",
			Handler:    _Query_ExchangeModuleState_Handler,
		},
		{
			MethodName: "Positions",
			Handler:    _Query_Positions_Handler,
		},
		{
			MethodName: "SubaccountPositions",
			Handler:    _Query_SubaccountPositions_Handler,
		},
		{
			MethodName: "SubaccountPositionInMarket",
			Handler:    _Query_SubaccountPositionInMarket_Handler,
		},
		{
			MethodName: "SubaccountEffectivePositionInMarket",
			Handler:    _Query_SubaccountEffectivePositionInMarket_Handler,
		},
		{
			MethodName: "PerpetualMarketInfo",
			Handler:    _Query_PerpetualMarketInfo_Handler,
		},
		{
			MethodName: "ExpiryFuturesMarketInfo",
			Handler:    _Query_ExpiryFuturesMarketInfo_Handler,
		},
		{
			MethodName: "PerpetualMarketFunding",
			Handler:    _Query_PerpetualMarketFunding_Handler,
		},
		{
			MethodName: "SubaccountOrderMetadata",
			Handler:    _Query_SubaccountOrderMetadata_Handler,
		},
		{
			MethodName: "TradeRewardPoints",
			Handler:    _Query_TradeRewardPoints_Handler,
		},
		{
			MethodName: "PendingTradeRewardPoints",
			Handler:    _Query_PendingTradeRewardPoints_Handler,
		},
		{
			MethodName: "TradeRewardCampaign",
			Handler:    _Query_TradeRewardCampaign_Handler,
		},
		{
			MethodName: "FeeDiscountAccountInfo",
			Handler:    _Query_FeeDiscountAccountInfo_Handler,
		},
		{
			MethodName: "FeeDiscountSchedule",
			Handler:    _Query_FeeDiscountSchedule_Handler,
		},
		{
			MethodName: "BalanceMismatches",
			Handler:    _Query_BalanceMismatches_Handler,
		},
		{
			MethodName: "BalanceWithBalanceHolds",
			Handler:    _Query_BalanceWithBalanceHolds_Handler,
		},
		{
			MethodName: "FeeDiscountTierStatistics",
			Handler:    _Query_FeeDiscountTierStatistics_Handler,
		},
		{
			MethodName: "MarketMakingPoolInfo",
			Handler:    _Query_MarketMakingPoolInfo_Handler,
		},
		{
			MethodName: "QueryMarketIDFromVault",
			Handler:    _Query_QueryMarketIDFromVault_Handler,
		},
		{
			MethodName: "HistoricalTradeRecords",
			Handler:    _Query_HistoricalTradeRecords_Handler,
		},
		{
			MethodName: "IsRegisteredDMM",
			Handler:    _Query_IsRegisteredDMM_Handler,
		},
		{
			MethodName: "RegisteredDMMs",
			Handler:    _Query_RegisteredDMMs_Handler,
		},
		{
			MethodName: "MarketVolatility",
			Handler:    _Query_MarketVolatility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/exchange/v1beta1/query.proto",
}

func (m *Subaccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Subaccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Subaccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubaccountNonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SubaccountNonce))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubaccountOrderbookMetadataWithMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubaccountOrderbookMetadataWithMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubaccountOrderbookMetadataWithMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subaccount != nil {
		{
			size, err := m.Subaccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for k := range m.Deposits {
			v := m.Deposits[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryExchangeBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryExchangeBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExchangeBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExchangeBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposits != nil {
		{
			size, err := m.Deposits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellsPriceLevel) > 0 {
		for iNdEx := len(m.SellsPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellsPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuysPriceLevel) > 0 {
		for iNdEx := len(m.BuysPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuysPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderSpotOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderSpotOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderSpotOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedSpotLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedSpotLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedSpotLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Fillable.Size()
		i -= size
		if _, err := m.Fillable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderSpotOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderSpotOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderSpotOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMidPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMidPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMidPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpotMidPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpotMidPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpotMidPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != nil {
		{
			size := m.Price.Size()
			i -= size
			if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMidPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMidPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMidPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMidPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMidPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMidPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != nil {
		{
			size := m.Price.Size()
			i -= size
			if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrderbookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrderbookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrderbookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeOrderbookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeOrderbookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeOrderbookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SellsPriceLevel) > 0 {
		for iNdEx := len(m.SellsPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SellsPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BuysPriceLevel) > 0 {
		for iNdEx := len(m.BuysPriceLevel) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BuysPriceLevel[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrimmedDerivativeLimitOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrimmedDerivativeLimitOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrimmedDerivativeLimitOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderHash) > 0 {
		i -= len(m.OrderHash)
		copy(dAtA[i:], m.OrderHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OrderHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.IsBuy {
		i--
		if m.IsBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Fillable.Size()
		i -= size
		if _, err := m.Fillable.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Margin.Size()
		i -= size
		if _, err := m.Margin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTraderDerivativeOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTraderDerivativeOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTraderDerivativeOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PriceLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PriceLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PriceLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PerpetualMarketState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarketState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarketState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundingInfo != nil {
		{
			size, err := m.FundingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.MarketInfo != nil {
		{
			size, err := m.MarketInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullDerivativeMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullDerivativeMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MarkPrice.Size()
		i -= size
		if _, err := m.MarkPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Info != nil {
		{
			size := m.Info.Size()
			i -= size
			if _, err := m.Info.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FullDerivativeMarket_PerpetualInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket_PerpetualInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PerpetualInfo != nil {
		{
			size, err := m.PerpetualInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *FullDerivativeMarket_FuturesInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullDerivativeMarket_FuturesInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FuturesInfo != nil {
		{
			size, err := m.FuturesInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *QueryDerivativeMarketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for iNdEx := len(m.Markets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Markets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Market != nil {
		{
			size, err := m.Market.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDerivativeMarketAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDerivativeMarketAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDerivativeMarketAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountTradeNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountTradeNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountTradeNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionInMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionInMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionInMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrderMetadataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrderMetadataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrderMetadataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountPositionInMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountPositionInMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountPositionInMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EffectivePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EffectivePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EffectivePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EffectiveMargin.Size()
		i -= size
		if _, err := m.EffectiveMargin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.EntryPrice.Size()
		i -= size
		if _, err := m.EntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExpiryFuturesMarketInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiryFuturesMarketInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiryFuturesMarketInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExpiryFuturesMarketInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExpiryFuturesMarketInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExpiryFuturesMarketInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketFundingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketFundingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketFundingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualMarketFundingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualMarketFundingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualMarketFundingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountOrderMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountOrderMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountOrderMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for iNdEx := len(m.Metadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySubaccountTradeNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySubaccountTradeNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySubaccountTradeNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for iNdEx := len(m.State) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.State[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardPointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardPointsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardPointsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingPoolTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingPoolTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardPointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardPointsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardPointsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountTradeRewardPoints) > 0 {
		for iNdEx := len(m.AccountTradeRewardPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.AccountTradeRewardPoints[iNdEx].Size()
				i -= size
				if _, err := m.AccountTradeRewardPoints[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardCampaignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardCampaignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardCampaignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTradeRewardCampaignResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTradeRewardCampaignResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTradeRewardCampaignResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingTotalTradeRewardPoints) > 0 {
		for iNdEx := len(m.PendingTotalTradeRewardPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.PendingTotalTradeRewardPoints[iNdEx].Size()
				i -= size
				if _, err := m.PendingTotalTradeRewardPoints[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.PendingTradingRewardPoolCampaignSchedule) > 0 {
		for iNdEx := len(m.PendingTradingRewardPoolCampaignSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingTradingRewardPoolCampaignSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.TotalTradeRewardPoints.Size()
		i -= size
		if _, err := m.TotalTradeRewardPoints.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TradingRewardPoolCampaignSchedule) > 0 {
		for iNdEx := len(m.TradingRewardPoolCampaignSchedule) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradingRewardPoolCampaignSchedule[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TradingRewardCampaignInfo != nil {
		{
			size, err := m.TradingRewardCampaignInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsRegisteredDMMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsRegisteredDMMRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsRegisteredDMMRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsRegisteredDMMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsRegisteredDMMResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsRegisteredDMMResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRegisteredDmm {
		i--
		if m.IsRegisteredDmm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredDMMsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredDMMsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredDMMsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRegisteredDMMsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRegisteredDMMsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRegisteredDMMsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RegisteredDmms) > 0 {
		for iNdEx := len(m.RegisteredDmms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RegisteredDmms[iNdEx])
			copy(dAtA[i:], m.RegisteredDmms[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.RegisteredDmms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountAccountInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountAccountInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountAccountInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountAccountInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountAccountInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountAccountInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountTtl != nil {
		{
			size, err := m.AccountTtl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AccountInfo != nil {
		{
			size, err := m.AccountInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TierLevel != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TierLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountScheduleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountScheduleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountScheduleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountScheduleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountScheduleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountScheduleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeDiscountSchedule != nil {
		{
			size, err := m.FeeDiscountSchedule.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceMismatchesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceMismatchesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceMismatchesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DustFactor != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DustFactor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BalanceMismatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceMismatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceMismatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Difference.Size()
		i -= size
		if _, err := m.Difference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.ExpectedTotal.Size()
		i -= size
		if _, err := m.ExpectedTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BalanceHold.Size()
		i -= size
		if _, err := m.BalanceHold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Available.Size()
		i -= size
		if _, err := m.Available.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceMismatchesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceMismatchesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceMismatchesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceMismatches) > 0 {
		for iNdEx := len(m.BalanceMismatches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceMismatches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceWithBalanceHoldsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceWithBalanceHoldsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceWithBalanceHoldsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *BalanceWithMarginHold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceWithMarginHold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceWithMarginHold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BalanceHold.Size()
		i -= size
		if _, err := m.BalanceHold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Available.Size()
		i -= size
		if _, err := m.Available.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceWithBalanceHoldsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceWithBalanceHoldsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceWithBalanceHoldsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BalanceWithBalanceHolds) > 0 {
		for iNdEx := len(m.BalanceWithBalanceHolds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceWithBalanceHolds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountTierStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountTierStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountTierStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TierStatistic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TierStatistic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TierStatistic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.Tier != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeDiscountTierStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeDiscountTierStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeDiscountTierStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MarketMakingPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketMakingPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketMakingPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddressMaker) > 0 {
		i -= len(m.ContractAddressMaker)
		copy(dAtA[i:], m.ContractAddressMaker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ContractAddressMaker)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PoolSubaccountId) > 0 {
		i -= len(m.PoolSubaccountId)
		copy(dAtA[i:], m.PoolSubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolSubaccountId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarketMakingPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketMakingPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarketMakingPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolBaseDeposits != nil {
		{
			size, err := m.PoolBaseDeposits.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.PoolQuoteDeposits.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.LpTokenBaseValue.Size()
		i -= size
		if _, err := m.LpTokenBaseValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LpTokenQuoteValue.Size()
		i -= size
		if _, err := m.LpTokenQuoteValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.LpTokenTotalSupply.Size()
		i -= size
		if _, err := m.LpTokenTotalSupply.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolPosition != nil {
		{
			size, err := m.PoolPosition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketIDFromVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketIDFromVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketIDFromVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultSubaccountId) > 0 {
		i -= len(m.VaultSubaccountId)
		copy(dAtA[i:], m.VaultSubaccountId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VaultSubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketIDFromVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketIDFromVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketIDFromVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalTradeRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalTradeRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalTradeRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHistoricalTradeRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHistoricalTradeRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHistoricalTradeRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TradeRecords) > 0 {
		for iNdEx := len(m.TradeRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TradeRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TradeHistoryOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradeHistoryOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradeHistoryOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncludeMetadata {
		i--
		if m.IncludeMetadata {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludeRawHistory {
		i--
		if m.IncludeRawHistory {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MaxAge != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxAge))
		i--
		dAtA[i] = 0x10
	}
	if m.TradeGroupingSec != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TradeGroupingSec))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketVolatilityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketVolatilityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketVolatilityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TradeHistoryOptions != nil {
		{
			size, err := m.TradeHistoryOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMarketVolatilityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMarketVolatilityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMarketVolatilityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawHistory) > 0 {
		for iNdEx := len(m.RawHistory) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RawHistory[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.HistoryMetadata != nil {
		{
			size, err := m.HistoryMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Volatility != nil {
		{
			size := m.Volatility.Size()
			i -= size
			if _, err := m.Volatility.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Subaccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.SubaccountNonce != 0 {
		n += 1 + sovQuery(uint64(m.SubaccountNonce))
	}
	return n
}

func (m *SubaccountOrderbookMetadataWithMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsBuy {
		n += 2
	}
	return n
}

func (m *QueryExchangeParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountDepositsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Subaccount != nil {
		l = m.Subaccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for k, v := range m.Deposits {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryExchangeBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryExchangeBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountDepositRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deposits != nil {
		l = m.Deposits.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QuerySpotOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuysPriceLevel) > 0 {
		for _, e := range m.BuysPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellsPriceLevel) > 0 {
		for _, e := range m.SellsPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderSpotOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TrimmedSpotLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Fillable.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsBuy {
		n += 2
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderSpotOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpotMidPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpotMidPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMidPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMidPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeOrderbookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryDerivativeOrderbookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BuysPriceLevel) > 0 {
		for _, e := range m.BuysPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SellsPriceLevel) > 0 {
		for _, e := range m.SellsPriceLevel {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTraderDerivativeOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TrimmedDerivativeLimitOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Margin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Fillable.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.IsBuy {
		n += 2
	}
	l = len(m.OrderHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTraderDerivativeOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeMarketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PriceLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PerpetualMarketState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketInfo != nil {
		l = m.MarketInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FundingInfo != nil {
		l = m.FundingInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *FullDerivativeMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Info != nil {
		n += m.Info.Size()
	}
	l = m.MarkPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *FullDerivativeMarket_PerpetualInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerpetualInfo != nil {
		l = m.PerpetualInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *FullDerivativeMarket_FuturesInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FuturesInfo != nil {
		l = m.FuturesInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}
func (m *QueryDerivativeMarketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Markets) > 0 {
		for _, e := range m.Markets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDerivativeMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Market != nil {
		l = m.Market.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDerivativeMarketAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountTradeNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionInMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountEffectivePositionInMarketRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountOrderMetadataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySubaccountPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountPositionInMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EffectivePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLong {
		n += 2
	}
	l = m.Quantity.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EntryPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.EffectiveMargin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountEffectivePositionInMarketResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExpiryFuturesMarketInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExpiryFuturesMarketInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Info.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPerpetualMarketFundingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualMarketFundingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.State.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySubaccountOrderMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySubaccountTradeNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradeRewardPointsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.PendingPoolTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.PendingPoolTimestamp))
	}
	return n
}

func (m *QueryTradeRewardPointsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccountTradeRewardPoints) > 0 {
		for _, e := range m.AccountTradeRewardPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTradeRewardCampaignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTradeRewardCampaignResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradingRewardCampaignInfo != nil {
		l = m.TradingRewardCampaignInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.TradingRewardPoolCampaignSchedule) > 0 {
		for _, e := range m.TradingRewardPoolCampaignSchedule {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.TotalTradeRewardPoints.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.PendingTradingRewardPoolCampaignSchedule) > 0 {
		for _, e := range m.PendingTradingRewardPoolCampaignSchedule {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.PendingTotalTradeRewardPoints) > 0 {
		for _, e := range m.PendingTotalTradeRewardPoints {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIsRegisteredDMMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsRegisteredDMMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsRegisteredDmm {
		n += 2
	}
	return n
}

func (m *QueryRegisteredDMMsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRegisteredDMMsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RegisteredDmms) > 0 {
		for _, s := range m.RegisteredDmms {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeeDiscountAccountInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeDiscountAccountInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TierLevel != 0 {
		n += 1 + sovQuery(uint64(m.TierLevel))
	}
	if m.AccountInfo != nil {
		l = m.AccountInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AccountTtl != nil {
		l = m.AccountTtl.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFeeDiscountScheduleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeeDiscountScheduleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeeDiscountSchedule != nil {
		l = m.FeeDiscountSchedule.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceMismatchesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DustFactor != 0 {
		n += 1 + sovQuery(uint64(m.DustFactor))
	}
	return n
}

func (m *BalanceMismatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Available.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BalanceHold.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExpectedTotal.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Difference.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBalanceMismatchesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BalanceMismatches) > 0 {
		for _, e := range m.BalanceMismatches {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryBalanceWithBalanceHoldsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BalanceWithMarginHold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Available.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BalanceHold.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBalanceWithBalanceHoldsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BalanceWithBalanceHolds) > 0 {
		for _, e := range m.BalanceWithBalanceHolds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeeDiscountTierStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TierStatistic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovQuery(uint64(m.Tier))
	}
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryFeeDiscountTierStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *MarketMakingPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolSubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ContractAddressMaker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MarketMakingPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolPosition != nil {
		l = m.PoolPosition.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.LpTokenTotalSupply.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LpTokenQuoteValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.LpTokenBaseValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.PoolQuoteDeposits.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.PoolBaseDeposits != nil {
		l = m.PoolBaseDeposits.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketIDFromVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VaultSubaccountId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketIDFromVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalTradeRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHistoricalTradeRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TradeRecords) > 0 {
		for _, e := range m.TradeRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TradeHistoryOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TradeGroupingSec != 0 {
		n += 1 + sovQuery(uint64(m.TradeGroupingSec))
	}
	if m.MaxAge != 0 {
		n += 1 + sovQuery(uint64(m.MaxAge))
	}
	if m.IncludeRawHistory {
		n += 2
	}
	if m.IncludeMetadata {
		n += 2
	}
	return n
}

func (m *QueryMarketVolatilityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TradeHistoryOptions != nil {
		l = m.TradeHistoryOptions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMarketVolatilityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Volatility != nil {
		l = m.Volatility.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HistoryMetadata != nil {
		l = m.HistoryMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RawHistory) > 0 {
		for _, e := range m.RawHistory {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Subaccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subaccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subaccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountNonce", wireType)
			}
			m.SubaccountNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubaccountNonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubaccountOrderbookMetadataWithMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadataWithMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubaccountOrderbookMetadataWithMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &SubaccountOrderbookMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subaccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subaccount == nil {
				m.Subaccount = &Subaccount{}
			}
			if err := m.Subaccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposits == nil {
				m.Deposits = make(map[string]*Deposit)
			}
			var mapkey string
			var mapvalue *Deposit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Deposit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Deposits[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExchangeBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExchangeBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExchangeBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposits == nil {
				m.Deposits = &Deposit{}
			}
			if err := m.Deposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &SpotMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &SpotMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuysPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuysPriceLevel = append(m.BuysPriceLevel, &PriceLevel{})
			if err := m.BuysPriceLevel[len(m.BuysPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellsPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellsPriceLevel = append(m.SellsPriceLevel, &PriceLevel{})
			if err := m.SellsPriceLevel[len(m.SellsPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderSpotOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedSpotLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedSpotLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedSpotLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fillable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fillable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderSpotOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderSpotOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedSpotLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMidPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMidPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMidPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpotMidPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpotMidPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpotMidPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Price = &v
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMidPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMidPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMidPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Price = &v
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrderbookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeOrderbookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeOrderbookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuysPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuysPriceLevel = append(m.BuysPriceLevel, &PriceLevel{})
			if err := m.BuysPriceLevel[len(m.BuysPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellsPriceLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellsPriceLevel = append(m.SellsPriceLevel, &PriceLevel{})
			if err := m.SellsPriceLevel[len(m.SellsPriceLevel)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrimmedDerivativeLimitOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrimmedDerivativeLimitOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrimmedDerivativeLimitOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fillable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fillable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBuy = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTraderDerivativeOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTraderDerivativeOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &TrimmedDerivativeLimitOrder{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PriceLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualMarketState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarketState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarketState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketInfo == nil {
				m.MarketInfo = &PerpetualMarketInfo{}
			}
			if err := m.MarketInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FundingInfo == nil {
				m.FundingInfo = &PerpetualMarketFunding{}
			}
			if err := m.FundingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullDerivativeMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullDerivativeMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullDerivativeMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &DerivativeMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PerpetualMarketState{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &FullDerivativeMarket_PerpetualInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuturesInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ExpiryFuturesMarketInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Info = &FullDerivativeMarket_FuturesInfo{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarkPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markets = append(m.Markets, &FullDerivativeMarket{})
			if err := m.Markets[len(m.Markets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Market", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Market == nil {
				m.Market = &FullDerivativeMarket{}
			}
			if err := m.Market.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDerivativeMarketAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDerivativeMarketAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountTradeNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionInMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountEffectivePositionInMarketRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrderMetadataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, DerivativePosition{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountPositionInMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountPositionInMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &Position{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EffectivePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EffectivePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EffectivePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveMargin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EffectiveMargin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountEffectivePositionInMarketResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountEffectivePositionInMarketResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &EffectivePosition{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiryFuturesMarketInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExpiryFuturesMarketInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExpiryFuturesMarketInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketFundingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualMarketFundingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualMarketFundingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountOrderMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountOrderMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, SubaccountOrderbookMetadataWithMarket{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySubaccountTradeNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySubaccountTradeNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &GenesisState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, DerivativePosition{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardPointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardPointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardPointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPoolTimestamp", wireType)
			}
			m.PendingPoolTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingPoolTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardPointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardPointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardPointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.AccountTradeRewardPoints = append(m.AccountTradeRewardPoints, v)
			if err := m.AccountTradeRewardPoints[len(m.AccountTradeRewardPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardCampaignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTradeRewardCampaignResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTradeRewardCampaignResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardCampaignInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradingRewardCampaignInfo == nil {
				m.TradingRewardCampaignInfo = &TradingRewardCampaignInfo{}
			}
			if err := m.TradingRewardCampaignInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardPoolCampaignSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingRewardPoolCampaignSchedule = append(m.TradingRewardPoolCampaignSchedule, &CampaignRewardPool{})
			if err := m.TradingRewardPoolCampaignSchedule[len(m.TradingRewardPoolCampaignSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTradeRewardPoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTradingRewardPoolCampaignSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTradingRewardPoolCampaignSchedule = append(m.PendingTradingRewardPoolCampaignSchedule, &CampaignRewardPool{})
			if err := m.PendingTradingRewardPoolCampaignSchedule[len(m.PendingTradingRewardPoolCampaignSchedule)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTotalTradeRewardPoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.PendingTotalTradeRewardPoints = append(m.PendingTotalTradeRewardPoints, v)
			if err := m.PendingTotalTradeRewardPoints[len(m.PendingTotalTradeRewardPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsRegisteredDMMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsRegisteredDMMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsRegisteredDMMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsRegisteredDMMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsRegisteredDMMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsRegisteredDMMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRegisteredDmm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRegisteredDmm = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredDMMsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredDMMsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredDMMsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRegisteredDMMsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRegisteredDMMsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRegisteredDMMsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredDmms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegisteredDmms = append(m.RegisteredDmms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountAccountInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountAccountInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountAccountInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierLevel", wireType)
			}
			m.TierLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TierLevel |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountInfo == nil {
				m.AccountInfo = &FeeDiscountTierInfo{}
			}
			if err := m.AccountInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountTtl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountTtl == nil {
				m.AccountTtl = &FeeDiscountTierTTL{}
			}
			if err := m.AccountTtl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountScheduleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountScheduleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountScheduleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeDiscountSchedule", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeDiscountSchedule == nil {
				m.FeeDiscountSchedule = &FeeDiscountSchedule{}
			}
			if err := m.FeeDiscountSchedule.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceMismatchesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceMismatchesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceMismatchesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DustFactor", wireType)
			}
			m.DustFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DustFactor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceMismatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceMismatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceMismatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceHold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceHold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Difference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceMismatchesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceMismatchesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceMismatchesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceMismatches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceMismatches = append(m.BalanceMismatches, &BalanceMismatch{})
			if err := m.BalanceMismatches[len(m.BalanceMismatches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceWithBalanceHoldsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BalanceWithMarginHold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceWithMarginHold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceWithMarginHold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Available.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceHold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BalanceHold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceWithBalanceHoldsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceWithBalanceHoldsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceWithBalanceHolds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceWithBalanceHolds = append(m.BalanceWithBalanceHolds, &BalanceWithMarginHold{})
			if err := m.BalanceWithBalanceHolds[len(m.BalanceWithBalanceHolds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountTierStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TierStatistic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TierStatistic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TierStatistic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeDiscountTierStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeDiscountTierStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, &TierStatistic{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketMakingPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketMakingPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketMakingPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolSubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolSubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddressMaker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddressMaker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketMakingPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketMakingPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketMakingPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolPosition == nil {
				m.PoolPosition = &Position{}
			}
			if err := m.PoolPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpTokenTotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LpTokenTotalSupply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpTokenQuoteValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LpTokenQuoteValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpTokenBaseValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LpTokenBaseValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolQuoteDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolQuoteDeposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolBaseDeposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolBaseDeposits == nil {
				m.PoolBaseDeposits = &Deposit{}
			}
			if err := m.PoolBaseDeposits.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketIDFromVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultSubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultSubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketIDFromVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketIDFromVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalTradeRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHistoricalTradeRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHistoricalTradeRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeRecords = append(m.TradeRecords, &TradeRecords{})
			if err := m.TradeRecords[len(m.TradeRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradeHistoryOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradeHistoryOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradeHistoryOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeGroupingSec", wireType)
			}
			m.TradeGroupingSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeGroupingSec |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAge", wireType)
			}
			m.MaxAge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAge |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeRawHistory", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeRawHistory = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeMetadata", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeMetadata = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketVolatilityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketVolatilityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketVolatilityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeHistoryOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TradeHistoryOptions == nil {
				m.TradeHistoryOptions = &TradeHistoryOptions{}
			}
			if err := m.TradeHistoryOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMarketVolatilityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMarketVolatilityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMarketVolatilityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volatility", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.Volatility = &v
			if err := m.Volatility.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HistoryMetadata == nil {
				m.HistoryMetadata = &types.MetadataStatistics{}
			}
			if err := m.HistoryMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawHistory = append(m.RawHistory, &TradeRecord{})
			if err := m.RawHistory[len(m.RawHistory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
